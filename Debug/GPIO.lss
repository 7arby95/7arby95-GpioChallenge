
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002de0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010a  00800060  00002de0  00002e74  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  0080016a  0080016a  00002f7e  2**0
                  ALLOC
  3 .stab         000031f8  00000000  00000000  00002f80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001984  00000000  00000000  00006178  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007afc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000195  00000000  00000000  00007c3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001b12  00000000  00000000  00007dd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000ead  00000000  00000000  000098e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000e5d  00000000  00000000  0000a790  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b5f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002ae  00000000  00000000  0000b750  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000896  00000000  00000000  0000b9fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c294  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 6e 0b 	jmp	0x16dc	; 0x16dc <__vector_1>
       8:	0c 94 7f 0b 	jmp	0x16fe	; 0x16fe <__vector_2>
       c:	0c 94 90 0b 	jmp	0x1720	; 0x1720 <__vector_3>
      10:	0c 94 1a 0d 	jmp	0x1a34	; 0x1a34 <__vector_4>
      14:	0c 94 06 0e 	jmp	0x1c0c	; 0x1c0c <__vector_5>
      18:	0c 94 d6 0c 	jmp	0x19ac	; 0x19ac <__vector_6>
      1c:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <__vector_7>
      20:	0c 94 f8 0c 	jmp	0x19f0	; 0x19f0 <__vector_8>
      24:	0c 94 09 0d 	jmp	0x1a12	; 0x1a12 <__vector_9>
      28:	0c 94 dd 0b 	jmp	0x17ba	; 0x17ba <__vector_10>
      2c:	0c 94 c5 0c 	jmp	0x198a	; 0x198a <__vector_11>
      30:	0c 94 17 0e 	jmp	0x1c2e	; 0x1c2e <__vector_12>
      34:	0c 94 28 0e 	jmp	0x1c50	; 0x1c50 <__vector_13>
      38:	0c 94 39 0e 	jmp	0x1c72	; 0x1c72 <__vector_14>
      3c:	0c 94 4a 0e 	jmp	0x1c94	; 0x1c94 <__vector_15>
      40:	0c 94 5b 0e 	jmp	0x1cb6	; 0x1cb6 <__vector_16>
      44:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__vector_17>
      48:	0c 94 7d 0e 	jmp	0x1cfa	; 0x1cfa <__vector_18>
      4c:	0c 94 8e 0e 	jmp	0x1d1c	; 0x1d1c <__vector_19>
      50:	0c 94 9f 0e 	jmp	0x1d3e	; 0x1d3e <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ee       	ldi	r30, 0xE0	; 224
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 37       	cpi	r26, 0x77	; 119
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <main>
      8a:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 19 03 	call	0x632	; 0x632 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a7 03 	call	0x74e	; 0x74e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 d3 16 	jmp	0x2da6	; 0x2da6 <__epilogue_restores__>

00000632 <__gesf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 c3 16 	jmp	0x2d86	; 0x2d86 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gesf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gesf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 97 05 	call	0xb2e	; 0xb2e <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gesf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 df 16 	jmp	0x2dbe	; 0x2dbe <__epilogue_restores__+0x18>

00000692 <__floatsisf>:
     692:	a8 e0       	ldi	r26, 0x08	; 8
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 c0 16 	jmp	0x2d80	; 0x2d80 <__prologue_saves__+0x12>
     69e:	9b 01       	movw	r18, r22
     6a0:	ac 01       	movw	r20, r24
     6a2:	83 e0       	ldi	r24, 0x03	; 3
     6a4:	89 83       	std	Y+1, r24	; 0x01
     6a6:	da 01       	movw	r26, r20
     6a8:	c9 01       	movw	r24, r18
     6aa:	88 27       	eor	r24, r24
     6ac:	b7 fd       	sbrc	r27, 7
     6ae:	83 95       	inc	r24
     6b0:	99 27       	eor	r25, r25
     6b2:	aa 27       	eor	r26, r26
     6b4:	bb 27       	eor	r27, r27
     6b6:	b8 2e       	mov	r11, r24
     6b8:	21 15       	cp	r18, r1
     6ba:	31 05       	cpc	r19, r1
     6bc:	41 05       	cpc	r20, r1
     6be:	51 05       	cpc	r21, r1
     6c0:	19 f4       	brne	.+6      	; 0x6c8 <__floatsisf+0x36>
     6c2:	82 e0       	ldi	r24, 0x02	; 2
     6c4:	89 83       	std	Y+1, r24	; 0x01
     6c6:	3a c0       	rjmp	.+116    	; 0x73c <__floatsisf+0xaa>
     6c8:	88 23       	and	r24, r24
     6ca:	a9 f0       	breq	.+42     	; 0x6f6 <__floatsisf+0x64>
     6cc:	20 30       	cpi	r18, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	38 07       	cpc	r19, r24
     6d2:	80 e0       	ldi	r24, 0x00	; 0
     6d4:	48 07       	cpc	r20, r24
     6d6:	80 e8       	ldi	r24, 0x80	; 128
     6d8:	58 07       	cpc	r21, r24
     6da:	29 f4       	brne	.+10     	; 0x6e6 <__floatsisf+0x54>
     6dc:	60 e0       	ldi	r22, 0x00	; 0
     6de:	70 e0       	ldi	r23, 0x00	; 0
     6e0:	80 e0       	ldi	r24, 0x00	; 0
     6e2:	9f ec       	ldi	r25, 0xCF	; 207
     6e4:	30 c0       	rjmp	.+96     	; 0x746 <__floatsisf+0xb4>
     6e6:	ee 24       	eor	r14, r14
     6e8:	ff 24       	eor	r15, r15
     6ea:	87 01       	movw	r16, r14
     6ec:	e2 1a       	sub	r14, r18
     6ee:	f3 0a       	sbc	r15, r19
     6f0:	04 0b       	sbc	r16, r20
     6f2:	15 0b       	sbc	r17, r21
     6f4:	02 c0       	rjmp	.+4      	; 0x6fa <__floatsisf+0x68>
     6f6:	79 01       	movw	r14, r18
     6f8:	8a 01       	movw	r16, r20
     6fa:	8e e1       	ldi	r24, 0x1E	; 30
     6fc:	c8 2e       	mov	r12, r24
     6fe:	d1 2c       	mov	r13, r1
     700:	dc 82       	std	Y+4, r13	; 0x04
     702:	cb 82       	std	Y+3, r12	; 0x03
     704:	ed 82       	std	Y+5, r14	; 0x05
     706:	fe 82       	std	Y+6, r15	; 0x06
     708:	0f 83       	std	Y+7, r16	; 0x07
     70a:	18 87       	std	Y+8, r17	; 0x08
     70c:	c8 01       	movw	r24, r16
     70e:	b7 01       	movw	r22, r14
     710:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <__clzsi2>
     714:	01 97       	sbiw	r24, 0x01	; 1
     716:	18 16       	cp	r1, r24
     718:	19 06       	cpc	r1, r25
     71a:	84 f4       	brge	.+32     	; 0x73c <__floatsisf+0xaa>
     71c:	08 2e       	mov	r0, r24
     71e:	04 c0       	rjmp	.+8      	; 0x728 <__floatsisf+0x96>
     720:	ee 0c       	add	r14, r14
     722:	ff 1c       	adc	r15, r15
     724:	00 1f       	adc	r16, r16
     726:	11 1f       	adc	r17, r17
     728:	0a 94       	dec	r0
     72a:	d2 f7       	brpl	.-12     	; 0x720 <__floatsisf+0x8e>
     72c:	ed 82       	std	Y+5, r14	; 0x05
     72e:	fe 82       	std	Y+6, r15	; 0x06
     730:	0f 83       	std	Y+7, r16	; 0x07
     732:	18 87       	std	Y+8, r17	; 0x08
     734:	c8 1a       	sub	r12, r24
     736:	d9 0a       	sbc	r13, r25
     738:	dc 82       	std	Y+4, r13	; 0x04
     73a:	cb 82       	std	Y+3, r12	; 0x03
     73c:	ba 82       	std	Y+2, r11	; 0x02
     73e:	ce 01       	movw	r24, r28
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	0e 94 4a 04 	call	0x894	; 0x894 <__pack_f>
     746:	28 96       	adiw	r28, 0x08	; 8
     748:	e9 e0       	ldi	r30, 0x09	; 9
     74a:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__epilogue_restores__+0x12>

0000074e <__fixsfsi>:
     74e:	ac e0       	ldi	r26, 0x0C	; 12
     750:	b0 e0       	ldi	r27, 0x00	; 0
     752:	ed ea       	ldi	r30, 0xAD	; 173
     754:	f3 e0       	ldi	r31, 0x03	; 3
     756:	0c 94 c7 16 	jmp	0x2d8e	; 0x2d8e <__prologue_saves__+0x20>
     75a:	69 83       	std	Y+1, r22	; 0x01
     75c:	7a 83       	std	Y+2, r23	; 0x02
     75e:	8b 83       	std	Y+3, r24	; 0x03
     760:	9c 83       	std	Y+4, r25	; 0x04
     762:	ce 01       	movw	r24, r28
     764:	01 96       	adiw	r24, 0x01	; 1
     766:	be 01       	movw	r22, r28
     768:	6b 5f       	subi	r22, 0xFB	; 251
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__unpack_f>
     770:	8d 81       	ldd	r24, Y+5	; 0x05
     772:	82 30       	cpi	r24, 0x02	; 2
     774:	61 f1       	breq	.+88     	; 0x7ce <__fixsfsi+0x80>
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	50 f1       	brcs	.+84     	; 0x7ce <__fixsfsi+0x80>
     77a:	84 30       	cpi	r24, 0x04	; 4
     77c:	21 f4       	brne	.+8      	; 0x786 <__fixsfsi+0x38>
     77e:	8e 81       	ldd	r24, Y+6	; 0x06
     780:	88 23       	and	r24, r24
     782:	51 f1       	breq	.+84     	; 0x7d8 <__fixsfsi+0x8a>
     784:	2e c0       	rjmp	.+92     	; 0x7e2 <__fixsfsi+0x94>
     786:	2f 81       	ldd	r18, Y+7	; 0x07
     788:	38 85       	ldd	r19, Y+8	; 0x08
     78a:	37 fd       	sbrc	r19, 7
     78c:	20 c0       	rjmp	.+64     	; 0x7ce <__fixsfsi+0x80>
     78e:	6e 81       	ldd	r22, Y+6	; 0x06
     790:	2f 31       	cpi	r18, 0x1F	; 31
     792:	31 05       	cpc	r19, r1
     794:	1c f0       	brlt	.+6      	; 0x79c <__fixsfsi+0x4e>
     796:	66 23       	and	r22, r22
     798:	f9 f0       	breq	.+62     	; 0x7d8 <__fixsfsi+0x8a>
     79a:	23 c0       	rjmp	.+70     	; 0x7e2 <__fixsfsi+0x94>
     79c:	8e e1       	ldi	r24, 0x1E	; 30
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	82 1b       	sub	r24, r18
     7a2:	93 0b       	sbc	r25, r19
     7a4:	29 85       	ldd	r18, Y+9	; 0x09
     7a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a8:	4b 85       	ldd	r20, Y+11	; 0x0b
     7aa:	5c 85       	ldd	r21, Y+12	; 0x0c
     7ac:	04 c0       	rjmp	.+8      	; 0x7b6 <__fixsfsi+0x68>
     7ae:	56 95       	lsr	r21
     7b0:	47 95       	ror	r20
     7b2:	37 95       	ror	r19
     7b4:	27 95       	ror	r18
     7b6:	8a 95       	dec	r24
     7b8:	d2 f7       	brpl	.-12     	; 0x7ae <__fixsfsi+0x60>
     7ba:	66 23       	and	r22, r22
     7bc:	b1 f0       	breq	.+44     	; 0x7ea <__fixsfsi+0x9c>
     7be:	50 95       	com	r21
     7c0:	40 95       	com	r20
     7c2:	30 95       	com	r19
     7c4:	21 95       	neg	r18
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	4f 4f       	sbci	r20, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	0e c0       	rjmp	.+28     	; 0x7ea <__fixsfsi+0x9c>
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	50 e0       	ldi	r21, 0x00	; 0
     7d6:	09 c0       	rjmp	.+18     	; 0x7ea <__fixsfsi+0x9c>
     7d8:	2f ef       	ldi	r18, 0xFF	; 255
     7da:	3f ef       	ldi	r19, 0xFF	; 255
     7dc:	4f ef       	ldi	r20, 0xFF	; 255
     7de:	5f e7       	ldi	r21, 0x7F	; 127
     7e0:	04 c0       	rjmp	.+8      	; 0x7ea <__fixsfsi+0x9c>
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	50 e8       	ldi	r21, 0x80	; 128
     7ea:	b9 01       	movw	r22, r18
     7ec:	ca 01       	movw	r24, r20
     7ee:	2c 96       	adiw	r28, 0x0c	; 12
     7f0:	e2 e0       	ldi	r30, 0x02	; 2
     7f2:	0c 94 e3 16 	jmp	0x2dc6	; 0x2dc6 <__epilogue_restores__+0x20>

000007f6 <__clzsi2>:
     7f6:	ef 92       	push	r14
     7f8:	ff 92       	push	r15
     7fa:	0f 93       	push	r16
     7fc:	1f 93       	push	r17
     7fe:	7b 01       	movw	r14, r22
     800:	8c 01       	movw	r16, r24
     802:	80 e0       	ldi	r24, 0x00	; 0
     804:	e8 16       	cp	r14, r24
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	f8 06       	cpc	r15, r24
     80a:	81 e0       	ldi	r24, 0x01	; 1
     80c:	08 07       	cpc	r16, r24
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	18 07       	cpc	r17, r24
     812:	88 f4       	brcc	.+34     	; 0x836 <__clzsi2+0x40>
     814:	8f ef       	ldi	r24, 0xFF	; 255
     816:	e8 16       	cp	r14, r24
     818:	f1 04       	cpc	r15, r1
     81a:	01 05       	cpc	r16, r1
     81c:	11 05       	cpc	r17, r1
     81e:	31 f0       	breq	.+12     	; 0x82c <__clzsi2+0x36>
     820:	28 f0       	brcs	.+10     	; 0x82c <__clzsi2+0x36>
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	a0 e0       	ldi	r26, 0x00	; 0
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	17 c0       	rjmp	.+46     	; 0x85a <__clzsi2+0x64>
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	a0 e0       	ldi	r26, 0x00	; 0
     832:	b0 e0       	ldi	r27, 0x00	; 0
     834:	12 c0       	rjmp	.+36     	; 0x85a <__clzsi2+0x64>
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	e8 16       	cp	r14, r24
     83a:	80 e0       	ldi	r24, 0x00	; 0
     83c:	f8 06       	cpc	r15, r24
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	08 07       	cpc	r16, r24
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	18 07       	cpc	r17, r24
     846:	28 f0       	brcs	.+10     	; 0x852 <__clzsi2+0x5c>
     848:	88 e1       	ldi	r24, 0x18	; 24
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	a0 e0       	ldi	r26, 0x00	; 0
     84e:	b0 e0       	ldi	r27, 0x00	; 0
     850:	04 c0       	rjmp	.+8      	; 0x85a <__clzsi2+0x64>
     852:	80 e1       	ldi	r24, 0x10	; 16
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a0 e0       	ldi	r26, 0x00	; 0
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	20 e2       	ldi	r18, 0x20	; 32
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	28 1b       	sub	r18, r24
     864:	39 0b       	sbc	r19, r25
     866:	4a 0b       	sbc	r20, r26
     868:	5b 0b       	sbc	r21, r27
     86a:	04 c0       	rjmp	.+8      	; 0x874 <__stack+0x15>
     86c:	16 95       	lsr	r17
     86e:	07 95       	ror	r16
     870:	f7 94       	ror	r15
     872:	e7 94       	ror	r14
     874:	8a 95       	dec	r24
     876:	d2 f7       	brpl	.-12     	; 0x86c <__stack+0xd>
     878:	f7 01       	movw	r30, r14
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	80 81       	ld	r24, Z
     880:	28 1b       	sub	r18, r24
     882:	31 09       	sbc	r19, r1
     884:	41 09       	sbc	r20, r1
     886:	51 09       	sbc	r21, r1
     888:	c9 01       	movw	r24, r18
     88a:	1f 91       	pop	r17
     88c:	0f 91       	pop	r16
     88e:	ff 90       	pop	r15
     890:	ef 90       	pop	r14
     892:	08 95       	ret

00000894 <__pack_f>:
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	fc 01       	movw	r30, r24
     8a0:	e4 80       	ldd	r14, Z+4	; 0x04
     8a2:	f5 80       	ldd	r15, Z+5	; 0x05
     8a4:	06 81       	ldd	r16, Z+6	; 0x06
     8a6:	17 81       	ldd	r17, Z+7	; 0x07
     8a8:	d1 80       	ldd	r13, Z+1	; 0x01
     8aa:	80 81       	ld	r24, Z
     8ac:	82 30       	cpi	r24, 0x02	; 2
     8ae:	48 f4       	brcc	.+18     	; 0x8c2 <__pack_f+0x2e>
     8b0:	80 e0       	ldi	r24, 0x00	; 0
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e1       	ldi	r26, 0x10	; 16
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	e8 2a       	or	r14, r24
     8ba:	f9 2a       	or	r15, r25
     8bc:	0a 2b       	or	r16, r26
     8be:	1b 2b       	or	r17, r27
     8c0:	a5 c0       	rjmp	.+330    	; 0xa0c <__pack_f+0x178>
     8c2:	84 30       	cpi	r24, 0x04	; 4
     8c4:	09 f4       	brne	.+2      	; 0x8c8 <__pack_f+0x34>
     8c6:	9f c0       	rjmp	.+318    	; 0xa06 <__pack_f+0x172>
     8c8:	82 30       	cpi	r24, 0x02	; 2
     8ca:	21 f4       	brne	.+8      	; 0x8d4 <__pack_f+0x40>
     8cc:	ee 24       	eor	r14, r14
     8ce:	ff 24       	eor	r15, r15
     8d0:	87 01       	movw	r16, r14
     8d2:	05 c0       	rjmp	.+10     	; 0x8de <__pack_f+0x4a>
     8d4:	e1 14       	cp	r14, r1
     8d6:	f1 04       	cpc	r15, r1
     8d8:	01 05       	cpc	r16, r1
     8da:	11 05       	cpc	r17, r1
     8dc:	19 f4       	brne	.+6      	; 0x8e4 <__pack_f+0x50>
     8de:	e0 e0       	ldi	r30, 0x00	; 0
     8e0:	f0 e0       	ldi	r31, 0x00	; 0
     8e2:	96 c0       	rjmp	.+300    	; 0xa10 <__pack_f+0x17c>
     8e4:	62 81       	ldd	r22, Z+2	; 0x02
     8e6:	73 81       	ldd	r23, Z+3	; 0x03
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	62 38       	cpi	r22, 0x82	; 130
     8ec:	79 07       	cpc	r23, r25
     8ee:	0c f0       	brlt	.+2      	; 0x8f2 <__pack_f+0x5e>
     8f0:	5b c0       	rjmp	.+182    	; 0x9a8 <__pack_f+0x114>
     8f2:	22 e8       	ldi	r18, 0x82	; 130
     8f4:	3f ef       	ldi	r19, 0xFF	; 255
     8f6:	26 1b       	sub	r18, r22
     8f8:	37 0b       	sbc	r19, r23
     8fa:	2a 31       	cpi	r18, 0x1A	; 26
     8fc:	31 05       	cpc	r19, r1
     8fe:	2c f0       	brlt	.+10     	; 0x90a <__pack_f+0x76>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	40 e0       	ldi	r20, 0x00	; 0
     906:	50 e0       	ldi	r21, 0x00	; 0
     908:	2a c0       	rjmp	.+84     	; 0x95e <__pack_f+0xca>
     90a:	b8 01       	movw	r22, r16
     90c:	a7 01       	movw	r20, r14
     90e:	02 2e       	mov	r0, r18
     910:	04 c0       	rjmp	.+8      	; 0x91a <__pack_f+0x86>
     912:	76 95       	lsr	r23
     914:	67 95       	ror	r22
     916:	57 95       	ror	r21
     918:	47 95       	ror	r20
     91a:	0a 94       	dec	r0
     91c:	d2 f7       	brpl	.-12     	; 0x912 <__pack_f+0x7e>
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	a0 e0       	ldi	r26, 0x00	; 0
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	04 c0       	rjmp	.+8      	; 0x930 <__pack_f+0x9c>
     928:	88 0f       	add	r24, r24
     92a:	99 1f       	adc	r25, r25
     92c:	aa 1f       	adc	r26, r26
     92e:	bb 1f       	adc	r27, r27
     930:	2a 95       	dec	r18
     932:	d2 f7       	brpl	.-12     	; 0x928 <__pack_f+0x94>
     934:	01 97       	sbiw	r24, 0x01	; 1
     936:	a1 09       	sbc	r26, r1
     938:	b1 09       	sbc	r27, r1
     93a:	8e 21       	and	r24, r14
     93c:	9f 21       	and	r25, r15
     93e:	a0 23       	and	r26, r16
     940:	b1 23       	and	r27, r17
     942:	00 97       	sbiw	r24, 0x00	; 0
     944:	a1 05       	cpc	r26, r1
     946:	b1 05       	cpc	r27, r1
     948:	21 f0       	breq	.+8      	; 0x952 <__pack_f+0xbe>
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	a0 e0       	ldi	r26, 0x00	; 0
     950:	b0 e0       	ldi	r27, 0x00	; 0
     952:	9a 01       	movw	r18, r20
     954:	ab 01       	movw	r20, r22
     956:	28 2b       	or	r18, r24
     958:	39 2b       	or	r19, r25
     95a:	4a 2b       	or	r20, r26
     95c:	5b 2b       	or	r21, r27
     95e:	da 01       	movw	r26, r20
     960:	c9 01       	movw	r24, r18
     962:	8f 77       	andi	r24, 0x7F	; 127
     964:	90 70       	andi	r25, 0x00	; 0
     966:	a0 70       	andi	r26, 0x00	; 0
     968:	b0 70       	andi	r27, 0x00	; 0
     96a:	80 34       	cpi	r24, 0x40	; 64
     96c:	91 05       	cpc	r25, r1
     96e:	a1 05       	cpc	r26, r1
     970:	b1 05       	cpc	r27, r1
     972:	39 f4       	brne	.+14     	; 0x982 <__pack_f+0xee>
     974:	27 ff       	sbrs	r18, 7
     976:	09 c0       	rjmp	.+18     	; 0x98a <__pack_f+0xf6>
     978:	20 5c       	subi	r18, 0xC0	; 192
     97a:	3f 4f       	sbci	r19, 0xFF	; 255
     97c:	4f 4f       	sbci	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	04 c0       	rjmp	.+8      	; 0x98a <__pack_f+0xf6>
     982:	21 5c       	subi	r18, 0xC1	; 193
     984:	3f 4f       	sbci	r19, 0xFF	; 255
     986:	4f 4f       	sbci	r20, 0xFF	; 255
     988:	5f 4f       	sbci	r21, 0xFF	; 255
     98a:	e0 e0       	ldi	r30, 0x00	; 0
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	20 30       	cpi	r18, 0x00	; 0
     990:	a0 e0       	ldi	r26, 0x00	; 0
     992:	3a 07       	cpc	r19, r26
     994:	a0 e0       	ldi	r26, 0x00	; 0
     996:	4a 07       	cpc	r20, r26
     998:	a0 e4       	ldi	r26, 0x40	; 64
     99a:	5a 07       	cpc	r21, r26
     99c:	10 f0       	brcs	.+4      	; 0x9a2 <__pack_f+0x10e>
     99e:	e1 e0       	ldi	r30, 0x01	; 1
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	79 01       	movw	r14, r18
     9a4:	8a 01       	movw	r16, r20
     9a6:	27 c0       	rjmp	.+78     	; 0x9f6 <__pack_f+0x162>
     9a8:	60 38       	cpi	r22, 0x80	; 128
     9aa:	71 05       	cpc	r23, r1
     9ac:	64 f5       	brge	.+88     	; 0xa06 <__pack_f+0x172>
     9ae:	fb 01       	movw	r30, r22
     9b0:	e1 58       	subi	r30, 0x81	; 129
     9b2:	ff 4f       	sbci	r31, 0xFF	; 255
     9b4:	d8 01       	movw	r26, r16
     9b6:	c7 01       	movw	r24, r14
     9b8:	8f 77       	andi	r24, 0x7F	; 127
     9ba:	90 70       	andi	r25, 0x00	; 0
     9bc:	a0 70       	andi	r26, 0x00	; 0
     9be:	b0 70       	andi	r27, 0x00	; 0
     9c0:	80 34       	cpi	r24, 0x40	; 64
     9c2:	91 05       	cpc	r25, r1
     9c4:	a1 05       	cpc	r26, r1
     9c6:	b1 05       	cpc	r27, r1
     9c8:	39 f4       	brne	.+14     	; 0x9d8 <__pack_f+0x144>
     9ca:	e7 fe       	sbrs	r14, 7
     9cc:	0d c0       	rjmp	.+26     	; 0x9e8 <__pack_f+0x154>
     9ce:	80 e4       	ldi	r24, 0x40	; 64
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	04 c0       	rjmp	.+8      	; 0x9e0 <__pack_f+0x14c>
     9d8:	8f e3       	ldi	r24, 0x3F	; 63
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	a0 e0       	ldi	r26, 0x00	; 0
     9de:	b0 e0       	ldi	r27, 0x00	; 0
     9e0:	e8 0e       	add	r14, r24
     9e2:	f9 1e       	adc	r15, r25
     9e4:	0a 1f       	adc	r16, r26
     9e6:	1b 1f       	adc	r17, r27
     9e8:	17 ff       	sbrs	r17, 7
     9ea:	05 c0       	rjmp	.+10     	; 0x9f6 <__pack_f+0x162>
     9ec:	16 95       	lsr	r17
     9ee:	07 95       	ror	r16
     9f0:	f7 94       	ror	r15
     9f2:	e7 94       	ror	r14
     9f4:	31 96       	adiw	r30, 0x01	; 1
     9f6:	87 e0       	ldi	r24, 0x07	; 7
     9f8:	16 95       	lsr	r17
     9fa:	07 95       	ror	r16
     9fc:	f7 94       	ror	r15
     9fe:	e7 94       	ror	r14
     a00:	8a 95       	dec	r24
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__pack_f+0x164>
     a04:	05 c0       	rjmp	.+10     	; 0xa10 <__pack_f+0x17c>
     a06:	ee 24       	eor	r14, r14
     a08:	ff 24       	eor	r15, r15
     a0a:	87 01       	movw	r16, r14
     a0c:	ef ef       	ldi	r30, 0xFF	; 255
     a0e:	f0 e0       	ldi	r31, 0x00	; 0
     a10:	6e 2f       	mov	r22, r30
     a12:	67 95       	ror	r22
     a14:	66 27       	eor	r22, r22
     a16:	67 95       	ror	r22
     a18:	90 2f       	mov	r25, r16
     a1a:	9f 77       	andi	r25, 0x7F	; 127
     a1c:	d7 94       	ror	r13
     a1e:	dd 24       	eor	r13, r13
     a20:	d7 94       	ror	r13
     a22:	8e 2f       	mov	r24, r30
     a24:	86 95       	lsr	r24
     a26:	49 2f       	mov	r20, r25
     a28:	46 2b       	or	r20, r22
     a2a:	58 2f       	mov	r21, r24
     a2c:	5d 29       	or	r21, r13
     a2e:	b7 01       	movw	r22, r14
     a30:	ca 01       	movw	r24, r20
     a32:	1f 91       	pop	r17
     a34:	0f 91       	pop	r16
     a36:	ff 90       	pop	r15
     a38:	ef 90       	pop	r14
     a3a:	df 90       	pop	r13
     a3c:	08 95       	ret

00000a3e <__unpack_f>:
     a3e:	fc 01       	movw	r30, r24
     a40:	db 01       	movw	r26, r22
     a42:	40 81       	ld	r20, Z
     a44:	51 81       	ldd	r21, Z+1	; 0x01
     a46:	22 81       	ldd	r18, Z+2	; 0x02
     a48:	62 2f       	mov	r22, r18
     a4a:	6f 77       	andi	r22, 0x7F	; 127
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	22 1f       	adc	r18, r18
     a50:	22 27       	eor	r18, r18
     a52:	22 1f       	adc	r18, r18
     a54:	93 81       	ldd	r25, Z+3	; 0x03
     a56:	89 2f       	mov	r24, r25
     a58:	88 0f       	add	r24, r24
     a5a:	82 2b       	or	r24, r18
     a5c:	28 2f       	mov	r18, r24
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	99 1f       	adc	r25, r25
     a62:	99 27       	eor	r25, r25
     a64:	99 1f       	adc	r25, r25
     a66:	11 96       	adiw	r26, 0x01	; 1
     a68:	9c 93       	st	X, r25
     a6a:	11 97       	sbiw	r26, 0x01	; 1
     a6c:	21 15       	cp	r18, r1
     a6e:	31 05       	cpc	r19, r1
     a70:	a9 f5       	brne	.+106    	; 0xadc <__unpack_f+0x9e>
     a72:	41 15       	cp	r20, r1
     a74:	51 05       	cpc	r21, r1
     a76:	61 05       	cpc	r22, r1
     a78:	71 05       	cpc	r23, r1
     a7a:	11 f4       	brne	.+4      	; 0xa80 <__unpack_f+0x42>
     a7c:	82 e0       	ldi	r24, 0x02	; 2
     a7e:	37 c0       	rjmp	.+110    	; 0xaee <__unpack_f+0xb0>
     a80:	82 e8       	ldi	r24, 0x82	; 130
     a82:	9f ef       	ldi	r25, 0xFF	; 255
     a84:	13 96       	adiw	r26, 0x03	; 3
     a86:	9c 93       	st	X, r25
     a88:	8e 93       	st	-X, r24
     a8a:	12 97       	sbiw	r26, 0x02	; 2
     a8c:	9a 01       	movw	r18, r20
     a8e:	ab 01       	movw	r20, r22
     a90:	67 e0       	ldi	r22, 0x07	; 7
     a92:	22 0f       	add	r18, r18
     a94:	33 1f       	adc	r19, r19
     a96:	44 1f       	adc	r20, r20
     a98:	55 1f       	adc	r21, r21
     a9a:	6a 95       	dec	r22
     a9c:	d1 f7       	brne	.-12     	; 0xa92 <__unpack_f+0x54>
     a9e:	83 e0       	ldi	r24, 0x03	; 3
     aa0:	8c 93       	st	X, r24
     aa2:	0d c0       	rjmp	.+26     	; 0xabe <__unpack_f+0x80>
     aa4:	22 0f       	add	r18, r18
     aa6:	33 1f       	adc	r19, r19
     aa8:	44 1f       	adc	r20, r20
     aaa:	55 1f       	adc	r21, r21
     aac:	12 96       	adiw	r26, 0x02	; 2
     aae:	8d 91       	ld	r24, X+
     ab0:	9c 91       	ld	r25, X
     ab2:	13 97       	sbiw	r26, 0x03	; 3
     ab4:	01 97       	sbiw	r24, 0x01	; 1
     ab6:	13 96       	adiw	r26, 0x03	; 3
     ab8:	9c 93       	st	X, r25
     aba:	8e 93       	st	-X, r24
     abc:	12 97       	sbiw	r26, 0x02	; 2
     abe:	20 30       	cpi	r18, 0x00	; 0
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	38 07       	cpc	r19, r24
     ac4:	80 e0       	ldi	r24, 0x00	; 0
     ac6:	48 07       	cpc	r20, r24
     ac8:	80 e4       	ldi	r24, 0x40	; 64
     aca:	58 07       	cpc	r21, r24
     acc:	58 f3       	brcs	.-42     	; 0xaa4 <__unpack_f+0x66>
     ace:	14 96       	adiw	r26, 0x04	; 4
     ad0:	2d 93       	st	X+, r18
     ad2:	3d 93       	st	X+, r19
     ad4:	4d 93       	st	X+, r20
     ad6:	5c 93       	st	X, r21
     ad8:	17 97       	sbiw	r26, 0x07	; 7
     ada:	08 95       	ret
     adc:	2f 3f       	cpi	r18, 0xFF	; 255
     ade:	31 05       	cpc	r19, r1
     ae0:	79 f4       	brne	.+30     	; 0xb00 <__unpack_f+0xc2>
     ae2:	41 15       	cp	r20, r1
     ae4:	51 05       	cpc	r21, r1
     ae6:	61 05       	cpc	r22, r1
     ae8:	71 05       	cpc	r23, r1
     aea:	19 f4       	brne	.+6      	; 0xaf2 <__unpack_f+0xb4>
     aec:	84 e0       	ldi	r24, 0x04	; 4
     aee:	8c 93       	st	X, r24
     af0:	08 95       	ret
     af2:	64 ff       	sbrs	r22, 4
     af4:	03 c0       	rjmp	.+6      	; 0xafc <__unpack_f+0xbe>
     af6:	81 e0       	ldi	r24, 0x01	; 1
     af8:	8c 93       	st	X, r24
     afa:	12 c0       	rjmp	.+36     	; 0xb20 <__unpack_f+0xe2>
     afc:	1c 92       	st	X, r1
     afe:	10 c0       	rjmp	.+32     	; 0xb20 <__unpack_f+0xe2>
     b00:	2f 57       	subi	r18, 0x7F	; 127
     b02:	30 40       	sbci	r19, 0x00	; 0
     b04:	13 96       	adiw	r26, 0x03	; 3
     b06:	3c 93       	st	X, r19
     b08:	2e 93       	st	-X, r18
     b0a:	12 97       	sbiw	r26, 0x02	; 2
     b0c:	83 e0       	ldi	r24, 0x03	; 3
     b0e:	8c 93       	st	X, r24
     b10:	87 e0       	ldi	r24, 0x07	; 7
     b12:	44 0f       	add	r20, r20
     b14:	55 1f       	adc	r21, r21
     b16:	66 1f       	adc	r22, r22
     b18:	77 1f       	adc	r23, r23
     b1a:	8a 95       	dec	r24
     b1c:	d1 f7       	brne	.-12     	; 0xb12 <__unpack_f+0xd4>
     b1e:	70 64       	ori	r23, 0x40	; 64
     b20:	14 96       	adiw	r26, 0x04	; 4
     b22:	4d 93       	st	X+, r20
     b24:	5d 93       	st	X+, r21
     b26:	6d 93       	st	X+, r22
     b28:	7c 93       	st	X, r23
     b2a:	17 97       	sbiw	r26, 0x07	; 7
     b2c:	08 95       	ret

00000b2e <__fpcmp_parts_f>:
     b2e:	1f 93       	push	r17
     b30:	dc 01       	movw	r26, r24
     b32:	fb 01       	movw	r30, r22
     b34:	9c 91       	ld	r25, X
     b36:	92 30       	cpi	r25, 0x02	; 2
     b38:	08 f4       	brcc	.+2      	; 0xb3c <__fpcmp_parts_f+0xe>
     b3a:	47 c0       	rjmp	.+142    	; 0xbca <__fpcmp_parts_f+0x9c>
     b3c:	80 81       	ld	r24, Z
     b3e:	82 30       	cpi	r24, 0x02	; 2
     b40:	08 f4       	brcc	.+2      	; 0xb44 <__fpcmp_parts_f+0x16>
     b42:	43 c0       	rjmp	.+134    	; 0xbca <__fpcmp_parts_f+0x9c>
     b44:	94 30       	cpi	r25, 0x04	; 4
     b46:	51 f4       	brne	.+20     	; 0xb5c <__fpcmp_parts_f+0x2e>
     b48:	11 96       	adiw	r26, 0x01	; 1
     b4a:	1c 91       	ld	r17, X
     b4c:	84 30       	cpi	r24, 0x04	; 4
     b4e:	99 f5       	brne	.+102    	; 0xbb6 <__fpcmp_parts_f+0x88>
     b50:	81 81       	ldd	r24, Z+1	; 0x01
     b52:	68 2f       	mov	r22, r24
     b54:	70 e0       	ldi	r23, 0x00	; 0
     b56:	61 1b       	sub	r22, r17
     b58:	71 09       	sbc	r23, r1
     b5a:	3f c0       	rjmp	.+126    	; 0xbda <__fpcmp_parts_f+0xac>
     b5c:	84 30       	cpi	r24, 0x04	; 4
     b5e:	21 f0       	breq	.+8      	; 0xb68 <__fpcmp_parts_f+0x3a>
     b60:	92 30       	cpi	r25, 0x02	; 2
     b62:	31 f4       	brne	.+12     	; 0xb70 <__fpcmp_parts_f+0x42>
     b64:	82 30       	cpi	r24, 0x02	; 2
     b66:	b9 f1       	breq	.+110    	; 0xbd6 <__fpcmp_parts_f+0xa8>
     b68:	81 81       	ldd	r24, Z+1	; 0x01
     b6a:	88 23       	and	r24, r24
     b6c:	89 f1       	breq	.+98     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     b6e:	2d c0       	rjmp	.+90     	; 0xbca <__fpcmp_parts_f+0x9c>
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 91       	ld	r17, X
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	82 30       	cpi	r24, 0x02	; 2
     b78:	f1 f0       	breq	.+60     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b7a:	81 81       	ldd	r24, Z+1	; 0x01
     b7c:	18 17       	cp	r17, r24
     b7e:	d9 f4       	brne	.+54     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b80:	12 96       	adiw	r26, 0x02	; 2
     b82:	2d 91       	ld	r18, X+
     b84:	3c 91       	ld	r19, X
     b86:	13 97       	sbiw	r26, 0x03	; 3
     b88:	82 81       	ldd	r24, Z+2	; 0x02
     b8a:	93 81       	ldd	r25, Z+3	; 0x03
     b8c:	82 17       	cp	r24, r18
     b8e:	93 07       	cpc	r25, r19
     b90:	94 f0       	brlt	.+36     	; 0xbb6 <__fpcmp_parts_f+0x88>
     b92:	28 17       	cp	r18, r24
     b94:	39 07       	cpc	r19, r25
     b96:	bc f0       	brlt	.+46     	; 0xbc6 <__fpcmp_parts_f+0x98>
     b98:	14 96       	adiw	r26, 0x04	; 4
     b9a:	8d 91       	ld	r24, X+
     b9c:	9d 91       	ld	r25, X+
     b9e:	0d 90       	ld	r0, X+
     ba0:	bc 91       	ld	r27, X
     ba2:	a0 2d       	mov	r26, r0
     ba4:	24 81       	ldd	r18, Z+4	; 0x04
     ba6:	35 81       	ldd	r19, Z+5	; 0x05
     ba8:	46 81       	ldd	r20, Z+6	; 0x06
     baa:	57 81       	ldd	r21, Z+7	; 0x07
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	18 f4       	brcc	.+6      	; 0xbbc <__fpcmp_parts_f+0x8e>
     bb6:	11 23       	and	r17, r17
     bb8:	41 f0       	breq	.+16     	; 0xbca <__fpcmp_parts_f+0x9c>
     bba:	0a c0       	rjmp	.+20     	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bbc:	82 17       	cp	r24, r18
     bbe:	93 07       	cpc	r25, r19
     bc0:	a4 07       	cpc	r26, r20
     bc2:	b5 07       	cpc	r27, r21
     bc4:	40 f4       	brcc	.+16     	; 0xbd6 <__fpcmp_parts_f+0xa8>
     bc6:	11 23       	and	r17, r17
     bc8:	19 f0       	breq	.+6      	; 0xbd0 <__fpcmp_parts_f+0xa2>
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	05 c0       	rjmp	.+10     	; 0xbda <__fpcmp_parts_f+0xac>
     bd0:	6f ef       	ldi	r22, 0xFF	; 255
     bd2:	7f ef       	ldi	r23, 0xFF	; 255
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__fpcmp_parts_f+0xac>
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	cb 01       	movw	r24, r22
     bdc:	1f 91       	pop	r17
     bde:	08 95       	ret

00000be0 <main>:

extern uint8_t gu8_swIcuRead;
extern uint8_t gu8_swIcuFlag;

int main(void)
{
     be0:	df 93       	push	r29
     be2:	cf 93       	push	r28
     be4:	0f 92       	push	r0
     be6:	cd b7       	in	r28, 0x3d	; 61
     be8:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_swIcuVariable = 0;
     bea:	19 82       	std	Y+1, r1	; 0x01
//	Led_Init(LED_0);
//	Led_Init(LED_1);
//	Led_Init(LED_2);
//	Led_Init(LED_3);

	gpioPinDirection(GPIOD, (BIT2 | BIT3 | BIT6 | BIT7), OUTPUT);
     bec:	83 e0       	ldi	r24, 0x03	; 3
     bee:	6c ec       	ldi	r22, 0xCC	; 204
     bf0:	4f ef       	ldi	r20, 0xFF	; 255
     bf2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
	gpioPinWrite(GPIOD, (BIT2 | BIT6), HIGH);
     bf6:	83 e0       	ldi	r24, 0x03	; 3
     bf8:	64 e4       	ldi	r22, 0x44	; 68
     bfa:	4f ef       	ldi	r20, 0xFF	; 255
     bfc:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
	gpioPinWrite(GPIOD, (BIT3 | BIT7), LOW);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	68 e8       	ldi	r22, 0x88	; 136
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>

	SwICU_Init(SwICU_EdgeRising);
     c0a:	80 e4       	ldi	r24, 0x40	; 64
     c0c:	0e 94 68 07 	call	0xed0	; 0xed0 <SwICU_Init>

	HwPWMInit();
     c10:	0e 94 59 06 	call	0xcb2	; 0xcb2 <HwPWMInit>
	HwPWMSetDuty(75, 100);
     c14:	8b e4       	ldi	r24, 0x4B	; 75
     c16:	44 e6       	ldi	r20, 0x64	; 100
     c18:	50 e0       	ldi	r21, 0x00	; 0
     c1a:	60 e0       	ldi	r22, 0x00	; 0
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	0e 94 bd 06 	call	0xd7a	; 0xd7a <HwPWMSetDuty>

	while(1)
	{
		softwareDelayMs(100);
     c22:	64 e6       	ldi	r22, 0x64	; 100
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	80 e0       	ldi	r24, 0x00	; 0
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 26 11 	call	0x224c	; 0x224c <softwareDelayMs>

		if(gu8_swIcuFlag)
     c2e:	80 91 6d 01 	lds	r24, 0x016D
     c32:	88 23       	and	r24, r24
     c34:	79 f1       	breq	.+94     	; 0xc94 <main+0xb4>
		{
			u8_swIcuVariable = gu8_swIcuRead * 0.544;
     c36:	80 91 6c 01 	lds	r24, 0x016C
     c3a:	88 2f       	mov	r24, r24
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	aa 27       	eor	r26, r26
     c40:	97 fd       	sbrc	r25, 7
     c42:	a0 95       	com	r26
     c44:	ba 2f       	mov	r27, r26
     c46:	bc 01       	movw	r22, r24
     c48:	cd 01       	movw	r24, r26
     c4a:	0e 94 49 03 	call	0x692	; 0x692 <__floatsisf>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	bc 01       	movw	r22, r24
     c54:	cd 01       	movw	r24, r26
     c56:	26 e9       	ldi	r18, 0x96	; 150
     c58:	33 e4       	ldi	r19, 0x43	; 67
     c5a:	4b e0       	ldi	r20, 0x0B	; 11
     c5c:	5f e3       	ldi	r21, 0x3F	; 63
     c5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c62:	dc 01       	movw	r26, r24
     c64:	cb 01       	movw	r24, r22
     c66:	bc 01       	movw	r22, r24
     c68:	cd 01       	movw	r24, r26
     c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c6e:	dc 01       	movw	r26, r24
     c70:	cb 01       	movw	r24, r22
     c72:	89 83       	std	Y+1, r24	; 0x01

			gpioPinWrite(GPIOD, BIT0, HIGH);
     c74:	83 e0       	ldi	r24, 0x03	; 3
     c76:	61 e0       	ldi	r22, 0x01	; 1
     c78:	4f ef       	ldi	r20, 0xFF	; 255
     c7a:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
			timer2DelayMs(1);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	0e 94 5e 15 	call	0x2abc	; 0x2abc <timer2DelayMs>
			gpioPinWrite(GPIOD, BIT0, LOW);
     c86:	83 e0       	ldi	r24, 0x03	; 3
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	40 e0       	ldi	r20, 0x00	; 0
     c8c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>

			gu8_swIcuFlag = 0;
     c90:	10 92 6d 01 	sts	0x016D, r1
		}

		if(u8_swIcuVariable <= 10)
     c94:	89 81       	ldd	r24, Y+1	; 0x01
     c96:	8b 30       	cpi	r24, 0x0B	; 11
     c98:	30 f4       	brcc	.+12     	; 0xca6 <main+0xc6>
			gpioPinWrite(GPIOD, (BIT4 | BIT5), LOW);
     c9a:	83 e0       	ldi	r24, 0x03	; 3
     c9c:	60 e3       	ldi	r22, 0x30	; 48
     c9e:	40 e0       	ldi	r20, 0x00	; 0
     ca0:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
     ca4:	be cf       	rjmp	.-132    	; 0xc22 <main+0x42>
		else
			gpioPinWrite(GPIOD, (BIT4 | BIT5), HIGH);
     ca6:	83 e0       	ldi	r24, 0x03	; 3
     ca8:	60 e3       	ldi	r22, 0x30	; 48
     caa:	4f ef       	ldi	r20, 0xFF	; 255
     cac:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
     cb0:	b8 cf       	rjmp	.-144    	; 0xc22 <main+0x42>

00000cb2 <HwPWMInit>:
#define ICES1		6
#define ICNC1		7


void HwPWMInit(void)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
	/* set OC1A and OC1B pins as output pins */
	gpioPinDirection(GPIOD, (BIT4 | BIT5), OUTPUT);
     cba:	83 e0       	ldi	r24, 0x03	; 3
     cbc:	60 e3       	ldi	r22, 0x30	; 48
     cbe:	4f ef       	ldi	r20, 0xFF	; 255
     cc0:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>

	/* PWM mode */
	CLEAR_BIT(TCCR1A, FOC1B);
     cc4:	af e4       	ldi	r26, 0x4F	; 79
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	ef e4       	ldi	r30, 0x4F	; 79
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8b 7f       	andi	r24, 0xFB	; 251
     cd0:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, FOC1A);
     cd2:	af e4       	ldi	r26, 0x4F	; 79
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ef e4       	ldi	r30, 0x4F	; 79
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	87 7f       	andi	r24, 0xF7	; 247
     cde:	8c 93       	st	X, r24

	/* fast PWM mode using OCR1A */
	CLEAR_BIT(TCCR1A, WGM10);
     ce0:	af e4       	ldi	r26, 0x4F	; 79
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	ef e4       	ldi	r30, 0x4F	; 79
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	8e 7f       	andi	r24, 0xFE	; 254
     cec:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, WGM11);
     cee:	af e4       	ldi	r26, 0x4F	; 79
     cf0:	b0 e0       	ldi	r27, 0x00	; 0
     cf2:	ef e4       	ldi	r30, 0x4F	; 79
     cf4:	f0 e0       	ldi	r31, 0x00	; 0
     cf6:	80 81       	ld	r24, Z
     cf8:	82 60       	ori	r24, 0x02	; 2
     cfa:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM12);
     cfc:	ae e4       	ldi	r26, 0x4E	; 78
     cfe:	b0 e0       	ldi	r27, 0x00	; 0
     d00:	ee e4       	ldi	r30, 0x4E	; 78
     d02:	f0 e0       	ldi	r31, 0x00	; 0
     d04:	80 81       	ld	r24, Z
     d06:	88 60       	ori	r24, 0x08	; 8
     d08:	8c 93       	st	X, r24
	SET_BIT(TCCR1B, WGM13);
     d0a:	ae e4       	ldi	r26, 0x4E	; 78
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	ee e4       	ldi	r30, 0x4E	; 78
     d10:	f0 e0       	ldi	r31, 0x00	; 0
     d12:	80 81       	ld	r24, Z
     d14:	80 61       	ori	r24, 0x10	; 16
     d16:	8c 93       	st	X, r24

	/* use OCR1A and OCR1B */
	CLEAR_BIT(TCCR1A, COM1A0);
     d18:	af e4       	ldi	r26, 0x4F	; 79
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ef e4       	ldi	r30, 0x4F	; 79
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	8f 7b       	andi	r24, 0xBF	; 191
     d24:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1A1);
     d26:	af e4       	ldi	r26, 0x4F	; 79
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	ef e4       	ldi	r30, 0x4F	; 79
     d2c:	f0 e0       	ldi	r31, 0x00	; 0
     d2e:	80 81       	ld	r24, Z
     d30:	80 68       	ori	r24, 0x80	; 128
     d32:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A, COM1B0);
     d34:	af e4       	ldi	r26, 0x4F	; 79
     d36:	b0 e0       	ldi	r27, 0x00	; 0
     d38:	ef e4       	ldi	r30, 0x4F	; 79
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	80 81       	ld	r24, Z
     d3e:	8f 7e       	andi	r24, 0xEF	; 239
     d40:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, COM1B1);
     d42:	af e4       	ldi	r26, 0x4F	; 79
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	ef e4       	ldi	r30, 0x4F	; 79
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	80 62       	ori	r24, 0x20	; 32
     d4e:	8c 93       	st	X, r24

	/* clear input capture bits */
	CLEAR_BIT(TCCR1B, ICES1);
     d50:	ae e4       	ldi	r26, 0x4E	; 78
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ee e4       	ldi	r30, 0x4E	; 78
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7b       	andi	r24, 0xBF	; 191
     d5c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B, ICNC1);
     d5e:	ae e4       	ldi	r26, 0x4E	; 78
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ee e4       	ldi	r30, 0x4E	; 78
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	8f 77       	andi	r24, 0x7F	; 127
     d6a:	8c 93       	st	X, r24

	/* start counting from 0 */
	TCNT1 = 0;
     d6c:	ec e4       	ldi	r30, 0x4C	; 76
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	11 82       	std	Z+1, r1	; 0x01
     d72:	10 82       	st	Z, r1
}
     d74:	cf 91       	pop	r28
     d76:	df 91       	pop	r29
     d78:	08 95       	ret

00000d7a <HwPWMSetDuty>:

void HwPWMSetDuty(uint8_t a_u8_duty, uint32_t a_u32_frequency)
{
     d7a:	ef 92       	push	r14
     d7c:	ff 92       	push	r15
     d7e:	0f 93       	push	r16
     d80:	1f 93       	push	r17
     d82:	df 93       	push	r29
     d84:	cf 93       	push	r28
     d86:	00 d0       	rcall	.+0      	; 0xd88 <HwPWMSetDuty+0xe>
     d88:	00 d0       	rcall	.+0      	; 0xd8a <HwPWMSetDuty+0x10>
     d8a:	0f 92       	push	r0
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	89 83       	std	Y+1, r24	; 0x01
     d92:	4a 83       	std	Y+2, r20	; 0x02
     d94:	5b 83       	std	Y+3, r21	; 0x03
     d96:	6c 83       	std	Y+4, r22	; 0x04
     d98:	7d 83       	std	Y+5, r23	; 0x05
	if(a_u32_frequency >= 245)
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	9b 81       	ldd	r25, Y+3	; 0x03
     d9e:	ac 81       	ldd	r26, Y+4	; 0x04
     da0:	bd 81       	ldd	r27, Y+5	; 0x05
     da2:	85 3f       	cpi	r24, 0xF5	; 245
     da4:	91 05       	cpc	r25, r1
     da6:	a1 05       	cpc	r26, r1
     da8:	b1 05       	cpc	r27, r1
     daa:	d8 f0       	brcs	.+54     	; 0xde2 <HwPWMSetDuty+0x68>
	{
		ICR1 = F_CPU / (1UL * a_u32_frequency);
     dac:	06 e4       	ldi	r16, 0x46	; 70
     dae:	10 e0       	ldi	r17, 0x00	; 0
     db0:	80 e0       	ldi	r24, 0x00	; 0
     db2:	94 e2       	ldi	r25, 0x24	; 36
     db4:	a4 ef       	ldi	r26, 0xF4	; 244
     db6:	b0 e0       	ldi	r27, 0x00	; 0
     db8:	2a 81       	ldd	r18, Y+2	; 0x02
     dba:	3b 81       	ldd	r19, Y+3	; 0x03
     dbc:	4c 81       	ldd	r20, Y+4	; 0x04
     dbe:	5d 81       	ldd	r21, Y+5	; 0x05
     dc0:	bc 01       	movw	r22, r24
     dc2:	cd 01       	movw	r24, r26
     dc4:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
     dc8:	da 01       	movw	r26, r20
     dca:	c9 01       	movw	r24, r18
     dcc:	f8 01       	movw	r30, r16
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_NO;
     dd2:	ae e4       	ldi	r26, 0x4E	; 78
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	ee e4       	ldi	r30, 0x4E	; 78
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	81 60       	ori	r24, 0x01	; 1
     dde:	8c 93       	st	X, r24
     de0:	31 c0       	rjmp	.+98     	; 0xe44 <HwPWMSetDuty+0xca>
	}else if(a_u32_frequency >= 31)
     de2:	8a 81       	ldd	r24, Y+2	; 0x02
     de4:	9b 81       	ldd	r25, Y+3	; 0x03
     de6:	ac 81       	ldd	r26, Y+4	; 0x04
     de8:	bd 81       	ldd	r27, Y+5	; 0x05
     dea:	8f 31       	cpi	r24, 0x1F	; 31
     dec:	91 05       	cpc	r25, r1
     dee:	a1 05       	cpc	r26, r1
     df0:	b1 05       	cpc	r27, r1
     df2:	40 f1       	brcs	.+80     	; 0xe44 <HwPWMSetDuty+0xca>
	{
		ICR1 = F_CPU / (8UL * a_u32_frequency);
     df4:	06 e4       	ldi	r16, 0x46	; 70
     df6:	10 e0       	ldi	r17, 0x00	; 0
     df8:	8a 81       	ldd	r24, Y+2	; 0x02
     dfa:	9b 81       	ldd	r25, Y+3	; 0x03
     dfc:	ac 81       	ldd	r26, Y+4	; 0x04
     dfe:	bd 81       	ldd	r27, Y+5	; 0x05
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	aa 1f       	adc	r26, r26
     e06:	bb 1f       	adc	r27, r27
     e08:	88 0f       	add	r24, r24
     e0a:	99 1f       	adc	r25, r25
     e0c:	aa 1f       	adc	r26, r26
     e0e:	bb 1f       	adc	r27, r27
     e10:	88 0f       	add	r24, r24
     e12:	99 1f       	adc	r25, r25
     e14:	aa 1f       	adc	r26, r26
     e16:	bb 1f       	adc	r27, r27
     e18:	9c 01       	movw	r18, r24
     e1a:	ad 01       	movw	r20, r26
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	94 e2       	ldi	r25, 0x24	; 36
     e20:	a4 ef       	ldi	r26, 0xF4	; 244
     e22:	b0 e0       	ldi	r27, 0x00	; 0
     e24:	bc 01       	movw	r22, r24
     e26:	cd 01       	movw	r24, r26
     e28:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
     e2c:	da 01       	movw	r26, r20
     e2e:	c9 01       	movw	r24, r18
     e30:	f8 01       	movw	r30, r16
     e32:	91 83       	std	Z+1, r25	; 0x01
     e34:	80 83       	st	Z, r24

		/* set clock for the timer */
		TCCR1B |= T1_PRESCALER_8;
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	82 60       	ori	r24, 0x02	; 2
     e42:	8c 93       	st	X, r24
	}

	OCR1A = a_u8_duty * (ICR1 / 100);
     e44:	0f 2e       	mov	r0, r31
     e46:	fa e4       	ldi	r31, 0x4A	; 74
     e48:	ef 2e       	mov	r14, r31
     e4a:	ff 24       	eor	r15, r15
     e4c:	f0 2d       	mov	r31, r0
     e4e:	89 81       	ldd	r24, Y+1	; 0x01
     e50:	08 2f       	mov	r16, r24
     e52:	10 e0       	ldi	r17, 0x00	; 0
     e54:	e6 e4       	ldi	r30, 0x46	; 70
     e56:	f0 e0       	ldi	r31, 0x00	; 0
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	24 e6       	ldi	r18, 0x64	; 100
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	b9 01       	movw	r22, r18
     e62:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
     e66:	cb 01       	movw	r24, r22
     e68:	9c 01       	movw	r18, r24
     e6a:	02 9f       	mul	r16, r18
     e6c:	c0 01       	movw	r24, r0
     e6e:	03 9f       	mul	r16, r19
     e70:	90 0d       	add	r25, r0
     e72:	12 9f       	mul	r17, r18
     e74:	90 0d       	add	r25, r0
     e76:	11 24       	eor	r1, r1
     e78:	f7 01       	movw	r30, r14
     e7a:	91 83       	std	Z+1, r25	; 0x01
     e7c:	80 83       	st	Z, r24
	OCR1B = a_u8_duty * (ICR1 / 100);
     e7e:	0f 2e       	mov	r0, r31
     e80:	f8 e4       	ldi	r31, 0x48	; 72
     e82:	ef 2e       	mov	r14, r31
     e84:	ff 24       	eor	r15, r15
     e86:	f0 2d       	mov	r31, r0
     e88:	89 81       	ldd	r24, Y+1	; 0x01
     e8a:	08 2f       	mov	r16, r24
     e8c:	10 e0       	ldi	r17, 0x00	; 0
     e8e:	e6 e4       	ldi	r30, 0x46	; 70
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	91 81       	ldd	r25, Z+1	; 0x01
     e96:	24 e6       	ldi	r18, 0x64	; 100
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	b9 01       	movw	r22, r18
     e9c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
     ea0:	cb 01       	movw	r24, r22
     ea2:	9c 01       	movw	r18, r24
     ea4:	02 9f       	mul	r16, r18
     ea6:	c0 01       	movw	r24, r0
     ea8:	03 9f       	mul	r16, r19
     eaa:	90 0d       	add	r25, r0
     eac:	12 9f       	mul	r17, r18
     eae:	90 0d       	add	r25, r0
     eb0:	11 24       	eor	r1, r1
     eb2:	f7 01       	movw	r30, r14
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24

}
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	cf 91       	pop	r28
     ec4:	df 91       	pop	r29
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	ef 90       	pop	r14
     ece:	08 95       	ret

00000ed0 <SwICU_Init>:

volatile uint8_t gu8_swIcuRead = 0;
volatile uint8_t gu8_swIcuFlag = 0;

void SwICU_Init(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     ed0:	ef 92       	push	r14
     ed2:	0f 93       	push	r16
     ed4:	df 93       	push	r29
     ed6:	cf 93       	push	r28
     ed8:	0f 92       	push	r0
     eda:	cd b7       	in	r28, 0x3d	; 61
     edc:	de b7       	in	r29, 0x3e	; 62
     ede:	89 83       	std	Y+1, r24	; 0x01
	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_256, 0, 0, T0_POLLING);
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	44 e0       	ldi	r20, 0x04	; 4
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	00 e0       	ldi	r16, 0x00	; 0
     eea:	ee 24       	eor	r14, r14
     eec:	0e 94 7f 11 	call	0x22fe	; 0x22fe <timer0Init>

	gpioPinDirection(GPIOB, BIT2, INPUT);
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	64 e0       	ldi	r22, 0x04	; 4
     ef4:	40 e0       	ldi	r20, 0x00	; 0
     ef6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
	gpioPinDirection(GPIOD, BIT0, OUTPUT);
     efa:	83 e0       	ldi	r24, 0x03	; 3
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	4f ef       	ldi	r20, 0xFF	; 255
     f00:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>

	SET_BIT(GICR, INT2);
     f04:	ab e5       	ldi	r26, 0x5B	; 91
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	eb e5       	ldi	r30, 0x5B	; 91
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	80 62       	ori	r24, 0x20	; 32
     f10:	8c 93       	st	X, r24
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     f12:	a4 e5       	ldi	r26, 0x54	; 84
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e4 e5       	ldi	r30, 0x54	; 84
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	98 2f       	mov	r25, r24
     f1e:	9f 7b       	andi	r25, 0xBF	; 191
     f20:	89 81       	ldd	r24, Y+1	; 0x01
     f22:	89 2b       	or	r24, r25
     f24:	8c 93       	st	X, r24

	sei();
     f26:	78 94       	sei
}
     f28:	0f 90       	pop	r0
     f2a:	cf 91       	pop	r28
     f2c:	df 91       	pop	r29
     f2e:	0f 91       	pop	r16
     f30:	ef 90       	pop	r14
     f32:	08 95       	ret

00000f34 <SwICU_GetCfgEdge>:

EN_SwICU_Edge_t SwICU_GetCfgEdge(void)
{
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	cd b7       	in	r28, 0x3d	; 61
     f3a:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
	return 0;
     f3c:	80 e0       	ldi	r24, 0x00	; 0
}
     f3e:	cf 91       	pop	r28
     f40:	df 91       	pop	r29
     f42:	08 95       	ret

00000f44 <SwICU_SetCfgEdge>:

/*choose the detecting edge*/
void SwICU_SetCfgEdge(EN_SwICU_Edge_t a_en_inputCaptureEdge)
{
     f44:	df 93       	push	r29
     f46:	cf 93       	push	r28
     f48:	0f 92       	push	r0
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	89 83       	std	Y+1, r24	; 0x01
	MCUCSR = (MCUCSR & 0xBF) | a_en_inputCaptureEdge;
     f50:	a4 e5       	ldi	r26, 0x54	; 84
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e4 e5       	ldi	r30, 0x54	; 84
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	98 2f       	mov	r25, r24
     f5c:	9f 7b       	andi	r25, 0xBF	; 191
     f5e:	89 81       	ldd	r24, Y+1	; 0x01
     f60:	89 2b       	or	r24, r25
     f62:	8c 93       	st	X, r24
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <SwICU_Read>:

void SwICU_Read(volatile uint8_t * a_pu8_capt)
{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <SwICU_Read+0x6>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	9a 83       	std	Y+2, r25	; 0x02
     f78:	89 83       	std	Y+1, r24	; 0x01
	*a_pu8_capt = timer0Read();
     f7a:	0e 94 d7 11 	call	0x23ae	; 0x23ae <timer0Read>
     f7e:	e9 81       	ldd	r30, Y+1	; 0x01
     f80:	fa 81       	ldd	r31, Y+2	; 0x02
     f82:	80 83       	st	Z, r24
}
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <SwICU_Stop>:

void SwICU_Stop(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
	timer0Stop();
     f96:	0e 94 f6 11 	call	0x23ec	; 0x23ec <timer0Stop>
}
     f9a:	cf 91       	pop	r28
     f9c:	df 91       	pop	r29
     f9e:	08 95       	ret

00000fa0 <SwICU_Start>:

void SwICU_Start(void)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
	timer0Start();
     fa8:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <timer0Start>
}
     fac:	cf 91       	pop	r28
     fae:	df 91       	pop	r29
     fb0:	08 95       	ret

00000fb2 <SwICU_Enable>:

void SwICU_Enable(void)
{
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	cd b7       	in	r28, 0x3d	; 61
     fb8:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     fba:	cf 91       	pop	r28
     fbc:	df 91       	pop	r29
     fbe:	08 95       	ret

00000fc0 <SwICU_Disable>:

void SwICU_Disable(void)
{
     fc0:	df 93       	push	r29
     fc2:	cf 93       	push	r28
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
	// BLANK Function
}
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <MotorDC_Init>:
#define MOTOR_FREQUENCY 200

/*- APIs IMPLEMENTATION ------------------------------------*/

void MotorDC_Init(En_motorType_t en_motor_number)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <MotorDC_Init+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3b 83       	std	Y+3, r19	; 0x03
     fe4:	2a 83       	std	Y+2, r18	; 0x02
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	31 f0       	breq	.+12     	; 0xffa <MotorDC_Init+0x2c>
     fee:	2a 81       	ldd	r18, Y+2	; 0x02
     ff0:	3b 81       	ldd	r19, Y+3	; 0x03
     ff2:	21 30       	cpi	r18, 0x01	; 1
     ff4:	31 05       	cpc	r19, r1
     ff6:	b1 f0       	breq	.+44     	; 0x1024 <MotorDC_Init+0x56>
     ff8:	29 c0       	rjmp	.+82     	; 0x104c <MotorDC_Init+0x7e>
	{
		case MOT_1:
			gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
     ffa:	83 e0       	ldi	r24, 0x03	; 3
     ffc:	60 e1       	ldi	r22, 0x10	; 16
     ffe:	4f ef       	ldi	r20, 0xFF	; 255
    1000:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	64 e0       	ldi	r22, 0x04	; 4
    1008:	4f ef       	ldi	r20, 0xFF	; 255
    100a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
    100e:	83 e0       	ldi	r24, 0x03	; 3
    1010:	68 e0       	ldi	r22, 0x08	; 8
    1012:	4f ef       	ldi	r20, 0xFF	; 255
    1014:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, HIGH);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	60 e1       	ldi	r22, 0x10	; 16
    101c:	4f ef       	ldi	r20, 0xFF	; 255
    101e:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1022:	14 c0       	rjmp	.+40     	; 0x104c <MotorDC_Init+0x7e>
			break;
		case MOT_2:
			gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
    1024:	83 e0       	ldi	r24, 0x03	; 3
    1026:	60 e2       	ldi	r22, 0x20	; 32
    1028:	4f ef       	ldi	r20, 0xFF	; 255
    102a:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
    102e:	83 e0       	ldi	r24, 0x03	; 3
    1030:	60 e4       	ldi	r22, 0x40	; 64
    1032:	4f ef       	ldi	r20, 0xFF	; 255
    1034:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
    1038:	83 e0       	ldi	r24, 0x03	; 3
    103a:	60 e8       	ldi	r22, 0x80	; 128
    103c:	4f ef       	ldi	r20, 0xFF	; 255
    103e:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, HIGH);
    1042:	83 e0       	ldi	r24, 0x03	; 3
    1044:	60 e2       	ldi	r22, 0x20	; 32
    1046:	4f ef       	ldi	r20, 0xFF	; 255
    1048:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
			break;
	}
}
    104c:	0f 90       	pop	r0
    104e:	0f 90       	pop	r0
    1050:	0f 90       	pop	r0
    1052:	cf 91       	pop	r28
    1054:	df 91       	pop	r29
    1056:	08 95       	ret

00001058 <MotorDC_Dir>:

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
    1058:	df 93       	push	r29
    105a:	cf 93       	push	r28
    105c:	cd b7       	in	r28, 0x3d	; 61
    105e:	de b7       	in	r29, 0x3e	; 62
    1060:	2b 97       	sbiw	r28, 0x0b	; 11
    1062:	0f b6       	in	r0, 0x3f	; 63
    1064:	f8 94       	cli
    1066:	de bf       	out	0x3e, r29	; 62
    1068:	0f be       	out	0x3f, r0	; 63
    106a:	cd bf       	out	0x3d, r28	; 61
    106c:	8c 83       	std	Y+4, r24	; 0x04
    106e:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t motorGpio = 0;
    1070:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t motorBitA = 0;
    1072:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t motorBitB = 0;
    1074:	19 82       	std	Y+1, r1	; 0x01
	
	switch(en_motor_number)
    1076:	8c 81       	ldd	r24, Y+4	; 0x04
    1078:	28 2f       	mov	r18, r24
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	3b 87       	std	Y+11, r19	; 0x0b
    107e:	2a 87       	std	Y+10, r18	; 0x0a
    1080:	8a 85       	ldd	r24, Y+10	; 0x0a
    1082:	9b 85       	ldd	r25, Y+11	; 0x0b
    1084:	00 97       	sbiw	r24, 0x00	; 0
    1086:	31 f0       	breq	.+12     	; 0x1094 <MotorDC_Dir+0x3c>
    1088:	2a 85       	ldd	r18, Y+10	; 0x0a
    108a:	3b 85       	ldd	r19, Y+11	; 0x0b
    108c:	21 30       	cpi	r18, 0x01	; 1
    108e:	31 05       	cpc	r19, r1
    1090:	41 f0       	breq	.+16     	; 0x10a2 <MotorDC_Dir+0x4a>
    1092:	0d c0       	rjmp	.+26     	; 0x10ae <MotorDC_Dir+0x56>
	{
		case MOT_1:
			motorGpio = MOTOR_OUT_1A_GPIO;
    1094:	83 e0       	ldi	r24, 0x03	; 3
    1096:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_1A_BIT;
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_1B_BIT;
    109c:	88 e0       	ldi	r24, 0x08	; 8
    109e:	89 83       	std	Y+1, r24	; 0x01
    10a0:	06 c0       	rjmp	.+12     	; 0x10ae <MotorDC_Dir+0x56>
			break;
		case MOT_2:
			motorGpio = MOTOR_OUT_2A_GPIO;
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_2A_BIT;
    10a6:	80 e4       	ldi	r24, 0x40	; 64
    10a8:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_2B_BIT;
    10aa:	80 e8       	ldi	r24, 0x80	; 128
    10ac:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	
	switch(en_motor_dir)
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	28 2f       	mov	r18, r24
    10b2:	30 e0       	ldi	r19, 0x00	; 0
    10b4:	39 87       	std	Y+9, r19	; 0x09
    10b6:	28 87       	std	Y+8, r18	; 0x08
    10b8:	88 85       	ldd	r24, Y+8	; 0x08
    10ba:	99 85       	ldd	r25, Y+9	; 0x09
    10bc:	81 30       	cpi	r24, 0x01	; 1
    10be:	91 05       	cpc	r25, r1
    10c0:	71 f1       	breq	.+92     	; 0x111e <MotorDC_Dir+0xc6>
    10c2:	28 85       	ldd	r18, Y+8	; 0x08
    10c4:	39 85       	ldd	r19, Y+9	; 0x09
    10c6:	22 30       	cpi	r18, 0x02	; 2
    10c8:	31 05       	cpc	r19, r1
    10ca:	a1 f1       	breq	.+104    	; 0x1134 <MotorDC_Dir+0xdc>
    10cc:	88 85       	ldd	r24, Y+8	; 0x08
    10ce:	99 85       	ldd	r25, Y+9	; 0x09
    10d0:	00 97       	sbiw	r24, 0x00	; 0
    10d2:	d1 f5       	brne	.+116    	; 0x1148 <MotorDC_Dir+0xf0>
	{
		case STOP:
		gpioPinWrite(motorGpio, motorBitA, LOW);
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	6a 81       	ldd	r22, Y+2	; 0x02
    10d8:	40 e0       	ldi	r20, 0x00	; 0
    10da:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	69 81       	ldd	r22, Y+1	; 0x01
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		switch(en_motor_number)
    10e8:	8c 81       	ldd	r24, Y+4	; 0x04
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3f 83       	std	Y+7, r19	; 0x07
    10f0:	2e 83       	std	Y+6, r18	; 0x06
    10f2:	8e 81       	ldd	r24, Y+6	; 0x06
    10f4:	9f 81       	ldd	r25, Y+7	; 0x07
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	31 f0       	breq	.+12     	; 0x1106 <MotorDC_Dir+0xae>
    10fa:	2e 81       	ldd	r18, Y+6	; 0x06
    10fc:	3f 81       	ldd	r19, Y+7	; 0x07
    10fe:	21 30       	cpi	r18, 0x01	; 1
    1100:	31 05       	cpc	r19, r1
    1102:	39 f0       	breq	.+14     	; 0x1112 <MotorDC_Dir+0xba>
    1104:	21 c0       	rjmp	.+66     	; 0x1148 <MotorDC_Dir+0xf0>
		{
			case MOT_1:
				gpioPinWrite(motorGpio, MOTOR_EN_1_BIT, LOW);
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	60 e1       	ldi	r22, 0x10	; 16
    110a:	40 e0       	ldi	r20, 0x00	; 0
    110c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1110:	1b c0       	rjmp	.+54     	; 0x1148 <MotorDC_Dir+0xf0>
				break;
			case MOT_2:
				gpioPinWrite(motorGpio, MOTOR_EN_2_BIT, LOW);
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	60 e2       	ldi	r22, 0x20	; 32
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    111c:	15 c0       	rjmp	.+42     	; 0x1148 <MotorDC_Dir+0xf0>
				break;
		}
		break;
		
		case FORWARD:
		gpioPinWrite(motorGpio, motorBitA, LOW);
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	6a 81       	ldd	r22, Y+2	; 0x02
    1122:	40 e0       	ldi	r20, 0x00	; 0
    1124:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, HIGH);
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	69 81       	ldd	r22, Y+1	; 0x01
    112c:	4f ef       	ldi	r20, 0xFF	; 255
    112e:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1132:	0a c0       	rjmp	.+20     	; 0x1148 <MotorDC_Dir+0xf0>
		break;
		
		case BACKWARD:
		gpioPinWrite(motorGpio, motorBitA, HIGH);
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	6a 81       	ldd	r22, Y+2	; 0x02
    1138:	4f ef       	ldi	r20, 0xFF	; 255
    113a:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	69 81       	ldd	r22, Y+1	; 0x01
    1142:	40 e0       	ldi	r20, 0x00	; 0
    1144:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		break;
	}
}
    1148:	2b 96       	adiw	r28, 0x0b	; 11
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	f8 94       	cli
    114e:	de bf       	out	0x3e, r29	; 62
    1150:	0f be       	out	0x3f, r0	; 63
    1152:	cd bf       	out	0x3d, r28	; 61
    1154:	cf 91       	pop	r28
    1156:	df 91       	pop	r29
    1158:	08 95       	ret

0000115a <MotorDC_Speed_PollingWithT0>:

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
    115a:	df 93       	push	r29
    115c:	cf 93       	push	r28
    115e:	0f 92       	push	r0
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed, MOTOR_FREQUENCY);
    1166:	89 81       	ldd	r24, Y+1	; 0x01
    1168:	68 ec       	ldi	r22, 0xC8	; 200
    116a:	0e 94 9a 12 	call	0x2534	; 0x2534 <timer0SwPWM>
}
    116e:	0f 90       	pop	r0
    1170:	cf 91       	pop	r28
    1172:	df 91       	pop	r29
    1174:	08 95       	ret

00001176 <MotorDC_Speed_HwPWM>:

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
    1176:	df 93       	push	r29
    1178:	cf 93       	push	r28
    117a:	0f 92       	push	r0
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	89 83       	std	Y+1, r24	; 0x01
	
    1182:	0f 90       	pop	r0
    1184:	cf 91       	pop	r28
    1186:	df 91       	pop	r29
    1188:	08 95       	ret

0000118a <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
    118a:	df 93       	push	r29
    118c:	cf 93       	push	r28
    118e:	00 d0       	rcall	.+0      	; 0x1190 <gpioPortDirection+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <gpioPortDirection+0x8>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	28 2f       	mov	r18, r24
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	3c 83       	std	Y+4, r19	; 0x04
    11a2:	2b 83       	std	Y+3, r18	; 0x03
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	81 30       	cpi	r24, 0x01	; 1
    11aa:	91 05       	cpc	r25, r1
    11ac:	d1 f0       	breq	.+52     	; 0x11e2 <gpioPortDirection+0x58>
    11ae:	2b 81       	ldd	r18, Y+3	; 0x03
    11b0:	3c 81       	ldd	r19, Y+4	; 0x04
    11b2:	22 30       	cpi	r18, 0x02	; 2
    11b4:	31 05       	cpc	r19, r1
    11b6:	2c f4       	brge	.+10     	; 0x11c2 <gpioPortDirection+0x38>
    11b8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ba:	9c 81       	ldd	r25, Y+4	; 0x04
    11bc:	00 97       	sbiw	r24, 0x00	; 0
    11be:	61 f0       	breq	.+24     	; 0x11d8 <gpioPortDirection+0x4e>
    11c0:	1e c0       	rjmp	.+60     	; 0x11fe <gpioPortDirection+0x74>
    11c2:	2b 81       	ldd	r18, Y+3	; 0x03
    11c4:	3c 81       	ldd	r19, Y+4	; 0x04
    11c6:	22 30       	cpi	r18, 0x02	; 2
    11c8:	31 05       	cpc	r19, r1
    11ca:	81 f0       	breq	.+32     	; 0x11ec <gpioPortDirection+0x62>
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	91 05       	cpc	r25, r1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <gpioPortDirection+0x6c>
    11d6:	13 c0       	rjmp	.+38     	; 0x11fe <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
    11d8:	ea e3       	ldi	r30, 0x3A	; 58
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	8a 81       	ldd	r24, Y+2	; 0x02
    11de:	80 83       	st	Z, r24
    11e0:	0e c0       	rjmp	.+28     	; 0x11fe <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
    11e2:	e7 e3       	ldi	r30, 0x37	; 55
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 83       	st	Z, r24
    11ea:	09 c0       	rjmp	.+18     	; 0x11fe <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
    11ec:	e4 e3       	ldi	r30, 0x34	; 52
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 83       	st	Z, r24
    11f4:	04 c0       	rjmp	.+8      	; 0x11fe <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
    11f6:	e1 e3       	ldi	r30, 0x31	; 49
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    11fe:	0f 90       	pop	r0
    1200:	0f 90       	pop	r0
    1202:	0f 90       	pop	r0
    1204:	0f 90       	pop	r0
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <gpioPortWrite+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <gpioPortWrite+0x8>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
    121c:	89 81       	ldd	r24, Y+1	; 0x01
    121e:	28 2f       	mov	r18, r24
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	3c 83       	std	Y+4, r19	; 0x04
    1224:	2b 83       	std	Y+3, r18	; 0x03
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	9c 81       	ldd	r25, Y+4	; 0x04
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	91 05       	cpc	r25, r1
    122e:	d1 f0       	breq	.+52     	; 0x1264 <gpioPortWrite+0x58>
    1230:	2b 81       	ldd	r18, Y+3	; 0x03
    1232:	3c 81       	ldd	r19, Y+4	; 0x04
    1234:	22 30       	cpi	r18, 0x02	; 2
    1236:	31 05       	cpc	r19, r1
    1238:	2c f4       	brge	.+10     	; 0x1244 <gpioPortWrite+0x38>
    123a:	8b 81       	ldd	r24, Y+3	; 0x03
    123c:	9c 81       	ldd	r25, Y+4	; 0x04
    123e:	00 97       	sbiw	r24, 0x00	; 0
    1240:	61 f0       	breq	.+24     	; 0x125a <gpioPortWrite+0x4e>
    1242:	1e c0       	rjmp	.+60     	; 0x1280 <gpioPortWrite+0x74>
    1244:	2b 81       	ldd	r18, Y+3	; 0x03
    1246:	3c 81       	ldd	r19, Y+4	; 0x04
    1248:	22 30       	cpi	r18, 0x02	; 2
    124a:	31 05       	cpc	r19, r1
    124c:	81 f0       	breq	.+32     	; 0x126e <gpioPortWrite+0x62>
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	83 30       	cpi	r24, 0x03	; 3
    1254:	91 05       	cpc	r25, r1
    1256:	81 f0       	breq	.+32     	; 0x1278 <gpioPortWrite+0x6c>
    1258:	13 c0       	rjmp	.+38     	; 0x1280 <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
    125a:	eb e3       	ldi	r30, 0x3B	; 59
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	8a 81       	ldd	r24, Y+2	; 0x02
    1260:	80 83       	st	Z, r24
    1262:	0e c0       	rjmp	.+28     	; 0x1280 <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
    1264:	e8 e3       	ldi	r30, 0x38	; 56
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	8a 81       	ldd	r24, Y+2	; 0x02
    126a:	80 83       	st	Z, r24
    126c:	09 c0       	rjmp	.+18     	; 0x1280 <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
    126e:	e5 e3       	ldi	r30, 0x35	; 53
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	8a 81       	ldd	r24, Y+2	; 0x02
    1274:	80 83       	st	Z, r24
    1276:	04 c0       	rjmp	.+8      	; 0x1280 <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
    1278:	e2 e3       	ldi	r30, 0x32	; 50
    127a:	f0 e0       	ldi	r31, 0x00	; 0
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1280:	0f 90       	pop	r0
    1282:	0f 90       	pop	r0
    1284:	0f 90       	pop	r0
    1286:	0f 90       	pop	r0
    1288:	cf 91       	pop	r28
    128a:	df 91       	pop	r29
    128c:	08 95       	ret

0000128e <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
    128e:	df 93       	push	r29
    1290:	cf 93       	push	r28
    1292:	00 d0       	rcall	.+0      	; 0x1294 <gpioPortToggle+0x6>
    1294:	0f 92       	push	r0
    1296:	cd b7       	in	r28, 0x3d	; 61
    1298:	de b7       	in	r29, 0x3e	; 62
    129a:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
    129c:	89 81       	ldd	r24, Y+1	; 0x01
    129e:	28 2f       	mov	r18, r24
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	3b 83       	std	Y+3, r19	; 0x03
    12a4:	2a 83       	std	Y+2, r18	; 0x02
    12a6:	8a 81       	ldd	r24, Y+2	; 0x02
    12a8:	9b 81       	ldd	r25, Y+3	; 0x03
    12aa:	81 30       	cpi	r24, 0x01	; 1
    12ac:	91 05       	cpc	r25, r1
    12ae:	e9 f0       	breq	.+58     	; 0x12ea <gpioPortToggle+0x5c>
    12b0:	2a 81       	ldd	r18, Y+2	; 0x02
    12b2:	3b 81       	ldd	r19, Y+3	; 0x03
    12b4:	22 30       	cpi	r18, 0x02	; 2
    12b6:	31 05       	cpc	r19, r1
    12b8:	2c f4       	brge	.+10     	; 0x12c4 <gpioPortToggle+0x36>
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	9b 81       	ldd	r25, Y+3	; 0x03
    12be:	00 97       	sbiw	r24, 0x00	; 0
    12c0:	61 f0       	breq	.+24     	; 0x12da <gpioPortToggle+0x4c>
    12c2:	2a c0       	rjmp	.+84     	; 0x1318 <gpioPortToggle+0x8a>
    12c4:	2a 81       	ldd	r18, Y+2	; 0x02
    12c6:	3b 81       	ldd	r19, Y+3	; 0x03
    12c8:	22 30       	cpi	r18, 0x02	; 2
    12ca:	31 05       	cpc	r19, r1
    12cc:	b1 f0       	breq	.+44     	; 0x12fa <gpioPortToggle+0x6c>
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	9b 81       	ldd	r25, Y+3	; 0x03
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	91 05       	cpc	r25, r1
    12d6:	c9 f0       	breq	.+50     	; 0x130a <gpioPortToggle+0x7c>
    12d8:	1f c0       	rjmp	.+62     	; 0x1318 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
    12da:	ab e3       	ldi	r26, 0x3B	; 59
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	eb e3       	ldi	r30, 0x3B	; 59
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	80 95       	com	r24
    12e6:	8c 93       	st	X, r24
    12e8:	17 c0       	rjmp	.+46     	; 0x1318 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
    12ea:	a8 e3       	ldi	r26, 0x38	; 56
    12ec:	b0 e0       	ldi	r27, 0x00	; 0
    12ee:	e8 e3       	ldi	r30, 0x38	; 56
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	80 95       	com	r24
    12f6:	8c 93       	st	X, r24
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
    12fa:	a5 e3       	ldi	r26, 0x35	; 53
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e5 e3       	ldi	r30, 0x35	; 53
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	80 95       	com	r24
    1306:	8c 93       	st	X, r24
    1308:	07 c0       	rjmp	.+14     	; 0x1318 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
    130a:	a2 e3       	ldi	r26, 0x32	; 50
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	e2 e3       	ldi	r30, 0x32	; 50
    1310:	f0 e0       	ldi	r31, 0x00	; 0
    1312:	80 81       	ld	r24, Z
    1314:	80 95       	com	r24
    1316:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	0f 90       	pop	r0
    131e:	cf 91       	pop	r28
    1320:	df 91       	pop	r29
    1322:	08 95       	ret

00001324 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
    1324:	df 93       	push	r29
    1326:	cf 93       	push	r28
    1328:	00 d0       	rcall	.+0      	; 0x132a <gpioPortRead+0x6>
    132a:	00 d0       	rcall	.+0      	; 0x132c <gpioPortRead+0x8>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
    1332:	89 81       	ldd	r24, Y+1	; 0x01
    1334:	28 2f       	mov	r18, r24
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	3c 83       	std	Y+4, r19	; 0x04
    133a:	2b 83       	std	Y+3, r18	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	81 30       	cpi	r24, 0x01	; 1
    1342:	91 05       	cpc	r25, r1
    1344:	d1 f0       	breq	.+52     	; 0x137a <gpioPortRead+0x56>
    1346:	2b 81       	ldd	r18, Y+3	; 0x03
    1348:	3c 81       	ldd	r19, Y+4	; 0x04
    134a:	22 30       	cpi	r18, 0x02	; 2
    134c:	31 05       	cpc	r19, r1
    134e:	2c f4       	brge	.+10     	; 0x135a <gpioPortRead+0x36>
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	61 f0       	breq	.+24     	; 0x1370 <gpioPortRead+0x4c>
    1358:	1f c0       	rjmp	.+62     	; 0x1398 <gpioPortRead+0x74>
    135a:	2b 81       	ldd	r18, Y+3	; 0x03
    135c:	3c 81       	ldd	r19, Y+4	; 0x04
    135e:	22 30       	cpi	r18, 0x02	; 2
    1360:	31 05       	cpc	r19, r1
    1362:	81 f0       	breq	.+32     	; 0x1384 <gpioPortRead+0x60>
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	83 30       	cpi	r24, 0x03	; 3
    136a:	91 05       	cpc	r25, r1
    136c:	81 f0       	breq	.+32     	; 0x138e <gpioPortRead+0x6a>
    136e:	14 c0       	rjmp	.+40     	; 0x1398 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
    1370:	e9 e3       	ldi	r30, 0x39	; 57
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	90 81       	ld	r25, Z
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	11 c0       	rjmp	.+34     	; 0x139c <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
    137a:	e6 e3       	ldi	r30, 0x36	; 54
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	20 81       	ld	r18, Z
    1380:	2a 83       	std	Y+2, r18	; 0x02
    1382:	0c c0       	rjmp	.+24     	; 0x139c <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
    1384:	e3 e3       	ldi	r30, 0x33	; 51
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	30 81       	ld	r19, Z
    138a:	3a 83       	std	Y+2, r19	; 0x02
    138c:	07 c0       	rjmp	.+14     	; 0x139c <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
    138e:	e0 e3       	ldi	r30, 0x30	; 48
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	02 c0       	rjmp	.+4      	; 0x139c <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
    1398:	9f ef       	ldi	r25, 0xFF	; 255
    139a:	9a 83       	std	Y+2, r25	; 0x02
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	08 95       	ret

000013ac <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
    13ac:	df 93       	push	r29
    13ae:	cf 93       	push	r28
    13b0:	cd b7       	in	r28, 0x3d	; 61
    13b2:	de b7       	in	r29, 0x3e	; 62
    13b4:	29 97       	sbiw	r28, 0x09	; 9
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	8b 83       	std	Y+3, r24	; 0x03
    13c2:	6c 83       	std	Y+4, r22	; 0x04
    13c4:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
    13c6:	1a 82       	std	Y+2, r1	; 0x02
    13c8:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	28 2f       	mov	r18, r24
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	39 87       	std	Y+9, r19	; 0x09
    13d2:	28 87       	std	Y+8, r18	; 0x08
    13d4:	88 85       	ldd	r24, Y+8	; 0x08
    13d6:	99 85       	ldd	r25, Y+9	; 0x09
    13d8:	81 30       	cpi	r24, 0x01	; 1
    13da:	91 05       	cpc	r25, r1
    13dc:	d1 f0       	breq	.+52     	; 0x1412 <gpioPinDirection+0x66>
    13de:	28 85       	ldd	r18, Y+8	; 0x08
    13e0:	39 85       	ldd	r19, Y+9	; 0x09
    13e2:	22 30       	cpi	r18, 0x02	; 2
    13e4:	31 05       	cpc	r19, r1
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <gpioPinDirection+0x46>
    13e8:	88 85       	ldd	r24, Y+8	; 0x08
    13ea:	99 85       	ldd	r25, Y+9	; 0x09
    13ec:	00 97       	sbiw	r24, 0x00	; 0
    13ee:	61 f0       	breq	.+24     	; 0x1408 <gpioPinDirection+0x5c>
    13f0:	1e c0       	rjmp	.+60     	; 0x142e <gpioPinDirection+0x82>
    13f2:	28 85       	ldd	r18, Y+8	; 0x08
    13f4:	39 85       	ldd	r19, Y+9	; 0x09
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	81 f0       	breq	.+32     	; 0x141c <gpioPinDirection+0x70>
    13fc:	88 85       	ldd	r24, Y+8	; 0x08
    13fe:	99 85       	ldd	r25, Y+9	; 0x09
    1400:	83 30       	cpi	r24, 0x03	; 3
    1402:	91 05       	cpc	r25, r1
    1404:	81 f0       	breq	.+32     	; 0x1426 <gpioPinDirection+0x7a>
    1406:	13 c0       	rjmp	.+38     	; 0x142e <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
    1408:	8a e3       	ldi	r24, 0x3A	; 58
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	0e c0       	rjmp	.+28     	; 0x142e <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
    1412:	87 e3       	ldi	r24, 0x37	; 55
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01
    141a:	09 c0       	rjmp	.+18     	; 0x142e <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
    141c:	84 e3       	ldi	r24, 0x34	; 52
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    1424:	04 c0       	rjmp	.+8      	; 0x142e <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
    1426:	81 e3       	ldi	r24, 0x31	; 49
    1428:	90 e0       	ldi	r25, 0x00	; 0
    142a:	9a 83       	std	Y+2, r25	; 0x02
    142c:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
    142e:	8d 81       	ldd	r24, Y+5	; 0x05
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	3f 83       	std	Y+7, r19	; 0x07
    1436:	2e 83       	std	Y+6, r18	; 0x06
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	9f 81       	ldd	r25, Y+7	; 0x07
    143c:	00 97       	sbiw	r24, 0x00	; 0
    143e:	31 f0       	breq	.+12     	; 0x144c <gpioPinDirection+0xa0>
    1440:	2e 81       	ldd	r18, Y+6	; 0x06
    1442:	3f 81       	ldd	r19, Y+7	; 0x07
    1444:	2f 3f       	cpi	r18, 0xFF	; 255
    1446:	31 05       	cpc	r19, r1
    1448:	61 f0       	breq	.+24     	; 0x1462 <gpioPinDirection+0xb6>
    144a:	13 c0       	rjmp	.+38     	; 0x1472 <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
    144c:	e9 81       	ldd	r30, Y+1	; 0x01
    144e:	fa 81       	ldd	r31, Y+2	; 0x02
    1450:	80 81       	ld	r24, Z
    1452:	98 2f       	mov	r25, r24
    1454:	8c 81       	ldd	r24, Y+4	; 0x04
    1456:	80 95       	com	r24
    1458:	89 23       	and	r24, r25
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	80 83       	st	Z, r24
    1460:	08 c0       	rjmp	.+16     	; 0x1472 <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	90 81       	ld	r25, Z
    1468:	8c 81       	ldd	r24, Y+4	; 0x04
    146a:	89 2b       	or	r24, r25
    146c:	e9 81       	ldd	r30, Y+1	; 0x01
    146e:	fa 81       	ldd	r31, Y+2	; 0x02
    1470:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    1472:	29 96       	adiw	r28, 0x09	; 9
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	de bf       	out	0x3e, r29	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	cd bf       	out	0x3d, r28	; 61
    147e:	cf 91       	pop	r28
    1480:	df 91       	pop	r29
    1482:	08 95       	ret

00001484 <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
    1484:	df 93       	push	r29
    1486:	cf 93       	push	r28
    1488:	cd b7       	in	r28, 0x3d	; 61
    148a:	de b7       	in	r29, 0x3e	; 62
    148c:	29 97       	sbiw	r28, 0x09	; 9
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	8b 83       	std	Y+3, r24	; 0x03
    149a:	6c 83       	std	Y+4, r22	; 0x04
    149c:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
    149e:	1a 82       	std	Y+2, r1	; 0x02
    14a0:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
    14a2:	8b 81       	ldd	r24, Y+3	; 0x03
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	39 87       	std	Y+9, r19	; 0x09
    14aa:	28 87       	std	Y+8, r18	; 0x08
    14ac:	88 85       	ldd	r24, Y+8	; 0x08
    14ae:	99 85       	ldd	r25, Y+9	; 0x09
    14b0:	81 30       	cpi	r24, 0x01	; 1
    14b2:	91 05       	cpc	r25, r1
    14b4:	d1 f0       	breq	.+52     	; 0x14ea <gpioPinWrite+0x66>
    14b6:	28 85       	ldd	r18, Y+8	; 0x08
    14b8:	39 85       	ldd	r19, Y+9	; 0x09
    14ba:	22 30       	cpi	r18, 0x02	; 2
    14bc:	31 05       	cpc	r19, r1
    14be:	2c f4       	brge	.+10     	; 0x14ca <gpioPinWrite+0x46>
    14c0:	88 85       	ldd	r24, Y+8	; 0x08
    14c2:	99 85       	ldd	r25, Y+9	; 0x09
    14c4:	00 97       	sbiw	r24, 0x00	; 0
    14c6:	61 f0       	breq	.+24     	; 0x14e0 <gpioPinWrite+0x5c>
    14c8:	1e c0       	rjmp	.+60     	; 0x1506 <gpioPinWrite+0x82>
    14ca:	28 85       	ldd	r18, Y+8	; 0x08
    14cc:	39 85       	ldd	r19, Y+9	; 0x09
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	81 f0       	breq	.+32     	; 0x14f4 <gpioPinWrite+0x70>
    14d4:	88 85       	ldd	r24, Y+8	; 0x08
    14d6:	99 85       	ldd	r25, Y+9	; 0x09
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	81 f0       	breq	.+32     	; 0x14fe <gpioPinWrite+0x7a>
    14de:	13 c0       	rjmp	.+38     	; 0x1506 <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
    14e0:	8b e3       	ldi	r24, 0x3B	; 59
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	9a 83       	std	Y+2, r25	; 0x02
    14e6:	89 83       	std	Y+1, r24	; 0x01
    14e8:	0e c0       	rjmp	.+28     	; 0x1506 <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
    14ea:	88 e3       	ldi	r24, 0x38	; 56
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	9a 83       	std	Y+2, r25	; 0x02
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	09 c0       	rjmp	.+18     	; 0x1506 <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
    14f4:	85 e3       	ldi	r24, 0x35	; 53
    14f6:	90 e0       	ldi	r25, 0x00	; 0
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
    14fc:	04 c0       	rjmp	.+8      	; 0x1506 <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
    14fe:	82 e3       	ldi	r24, 0x32	; 50
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	9a 83       	std	Y+2, r25	; 0x02
    1504:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
    1506:	8d 81       	ldd	r24, Y+5	; 0x05
    1508:	28 2f       	mov	r18, r24
    150a:	30 e0       	ldi	r19, 0x00	; 0
    150c:	3f 83       	std	Y+7, r19	; 0x07
    150e:	2e 83       	std	Y+6, r18	; 0x06
    1510:	8e 81       	ldd	r24, Y+6	; 0x06
    1512:	9f 81       	ldd	r25, Y+7	; 0x07
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	31 f0       	breq	.+12     	; 0x1524 <gpioPinWrite+0xa0>
    1518:	2e 81       	ldd	r18, Y+6	; 0x06
    151a:	3f 81       	ldd	r19, Y+7	; 0x07
    151c:	2f 3f       	cpi	r18, 0xFF	; 255
    151e:	31 05       	cpc	r19, r1
    1520:	61 f0       	breq	.+24     	; 0x153a <gpioPinWrite+0xb6>
    1522:	13 c0       	rjmp	.+38     	; 0x154a <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
    1524:	e9 81       	ldd	r30, Y+1	; 0x01
    1526:	fa 81       	ldd	r31, Y+2	; 0x02
    1528:	80 81       	ld	r24, Z
    152a:	98 2f       	mov	r25, r24
    152c:	8c 81       	ldd	r24, Y+4	; 0x04
    152e:	80 95       	com	r24
    1530:	89 23       	and	r24, r25
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 83       	st	Z, r24
    1538:	08 c0       	rjmp	.+16     	; 0x154a <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
    153a:	e9 81       	ldd	r30, Y+1	; 0x01
    153c:	fa 81       	ldd	r31, Y+2	; 0x02
    153e:	90 81       	ld	r25, Z
    1540:	8c 81       	ldd	r24, Y+4	; 0x04
    1542:	89 2b       	or	r24, r25
    1544:	e9 81       	ldd	r30, Y+1	; 0x01
    1546:	fa 81       	ldd	r31, Y+2	; 0x02
    1548:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
    154a:	29 96       	adiw	r28, 0x09	; 9
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	de bf       	out	0x3e, r29	; 62
    1552:	0f be       	out	0x3f, r0	; 63
    1554:	cd bf       	out	0x3d, r28	; 61
    1556:	cf 91       	pop	r28
    1558:	df 91       	pop	r29
    155a:	08 95       	ret

0000155c <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <gpioPinToggle+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <gpioPinToggle+0x8>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
    156c:	89 81       	ldd	r24, Y+1	; 0x01
    156e:	28 2f       	mov	r18, r24
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	3c 83       	std	Y+4, r19	; 0x04
    1574:	2b 83       	std	Y+3, r18	; 0x03
    1576:	8b 81       	ldd	r24, Y+3	; 0x03
    1578:	9c 81       	ldd	r25, Y+4	; 0x04
    157a:	81 30       	cpi	r24, 0x01	; 1
    157c:	91 05       	cpc	r25, r1
    157e:	f1 f0       	breq	.+60     	; 0x15bc <gpioPinToggle+0x60>
    1580:	2b 81       	ldd	r18, Y+3	; 0x03
    1582:	3c 81       	ldd	r19, Y+4	; 0x04
    1584:	22 30       	cpi	r18, 0x02	; 2
    1586:	31 05       	cpc	r19, r1
    1588:	2c f4       	brge	.+10     	; 0x1594 <gpioPinToggle+0x38>
    158a:	8b 81       	ldd	r24, Y+3	; 0x03
    158c:	9c 81       	ldd	r25, Y+4	; 0x04
    158e:	00 97       	sbiw	r24, 0x00	; 0
    1590:	61 f0       	breq	.+24     	; 0x15aa <gpioPinToggle+0x4e>
    1592:	2e c0       	rjmp	.+92     	; 0x15f0 <gpioPinToggle+0x94>
    1594:	2b 81       	ldd	r18, Y+3	; 0x03
    1596:	3c 81       	ldd	r19, Y+4	; 0x04
    1598:	22 30       	cpi	r18, 0x02	; 2
    159a:	31 05       	cpc	r19, r1
    159c:	c1 f0       	breq	.+48     	; 0x15ce <gpioPinToggle+0x72>
    159e:	8b 81       	ldd	r24, Y+3	; 0x03
    15a0:	9c 81       	ldd	r25, Y+4	; 0x04
    15a2:	83 30       	cpi	r24, 0x03	; 3
    15a4:	91 05       	cpc	r25, r1
    15a6:	e1 f0       	breq	.+56     	; 0x15e0 <gpioPinToggle+0x84>
    15a8:	23 c0       	rjmp	.+70     	; 0x15f0 <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
    15aa:	ab e3       	ldi	r26, 0x3B	; 59
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	eb e3       	ldi	r30, 0x3B	; 59
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	90 81       	ld	r25, Z
    15b4:	8a 81       	ldd	r24, Y+2	; 0x02
    15b6:	89 27       	eor	r24, r25
    15b8:	8c 93       	st	X, r24
    15ba:	1a c0       	rjmp	.+52     	; 0x15f0 <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
    15bc:	a8 e3       	ldi	r26, 0x38	; 56
    15be:	b0 e0       	ldi	r27, 0x00	; 0
    15c0:	e8 e3       	ldi	r30, 0x38	; 56
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	90 81       	ld	r25, Z
    15c6:	8a 81       	ldd	r24, Y+2	; 0x02
    15c8:	89 27       	eor	r24, r25
    15ca:	8c 93       	st	X, r24
    15cc:	11 c0       	rjmp	.+34     	; 0x15f0 <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
    15ce:	a5 e3       	ldi	r26, 0x35	; 53
    15d0:	b0 e0       	ldi	r27, 0x00	; 0
    15d2:	e5 e3       	ldi	r30, 0x35	; 53
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	90 81       	ld	r25, Z
    15d8:	8a 81       	ldd	r24, Y+2	; 0x02
    15da:	89 27       	eor	r24, r25
    15dc:	8c 93       	st	X, r24
    15de:	08 c0       	rjmp	.+16     	; 0x15f0 <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
    15e0:	a2 e3       	ldi	r26, 0x32	; 50
    15e2:	b0 e0       	ldi	r27, 0x00	; 0
    15e4:	e2 e3       	ldi	r30, 0x32	; 50
    15e6:	f0 e0       	ldi	r31, 0x00	; 0
    15e8:	90 81       	ld	r25, Z
    15ea:	8a 81       	ldd	r24, Y+2	; 0x02
    15ec:	89 27       	eor	r24, r25
    15ee:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
    15f0:	0f 90       	pop	r0
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	cf 91       	pop	r28
    15fa:	df 91       	pop	r29
    15fc:	08 95       	ret

000015fe <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
    15fe:	df 93       	push	r29
    1600:	cf 93       	push	r28
    1602:	cd b7       	in	r28, 0x3d	; 61
    1604:	de b7       	in	r29, 0x3e	; 62
    1606:	29 97       	sbiw	r28, 0x09	; 9
    1608:	0f b6       	in	r0, 0x3f	; 63
    160a:	f8 94       	cli
    160c:	de bf       	out	0x3e, r29	; 62
    160e:	0f be       	out	0x3f, r0	; 63
    1610:	cd bf       	out	0x3d, r28	; 61
    1612:	89 83       	std	Y+1, r24	; 0x01
    1614:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
    1616:	89 81       	ldd	r24, Y+1	; 0x01
    1618:	28 2f       	mov	r18, r24
    161a:	30 e0       	ldi	r19, 0x00	; 0
    161c:	3d 83       	std	Y+5, r19	; 0x05
    161e:	2c 83       	std	Y+4, r18	; 0x04
    1620:	8c 81       	ldd	r24, Y+4	; 0x04
    1622:	9d 81       	ldd	r25, Y+5	; 0x05
    1624:	81 30       	cpi	r24, 0x01	; 1
    1626:	91 05       	cpc	r25, r1
    1628:	19 f1       	breq	.+70     	; 0x1670 <gpioPinRead+0x72>
    162a:	2c 81       	ldd	r18, Y+4	; 0x04
    162c:	3d 81       	ldd	r19, Y+5	; 0x05
    162e:	22 30       	cpi	r18, 0x02	; 2
    1630:	31 05       	cpc	r19, r1
    1632:	2c f4       	brge	.+10     	; 0x163e <gpioPinRead+0x40>
    1634:	8c 81       	ldd	r24, Y+4	; 0x04
    1636:	9d 81       	ldd	r25, Y+5	; 0x05
    1638:	00 97       	sbiw	r24, 0x00	; 0
    163a:	61 f0       	breq	.+24     	; 0x1654 <gpioPinRead+0x56>
    163c:	43 c0       	rjmp	.+134    	; 0x16c4 <gpioPinRead+0xc6>
    163e:	2c 81       	ldd	r18, Y+4	; 0x04
    1640:	3d 81       	ldd	r19, Y+5	; 0x05
    1642:	22 30       	cpi	r18, 0x02	; 2
    1644:	31 05       	cpc	r19, r1
    1646:	11 f1       	breq	.+68     	; 0x168c <gpioPinRead+0x8e>
    1648:	8c 81       	ldd	r24, Y+4	; 0x04
    164a:	9d 81       	ldd	r25, Y+5	; 0x05
    164c:	83 30       	cpi	r24, 0x03	; 3
    164e:	91 05       	cpc	r25, r1
    1650:	59 f1       	breq	.+86     	; 0x16a8 <gpioPinRead+0xaa>
    1652:	38 c0       	rjmp	.+112    	; 0x16c4 <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
    1654:	e9 e3       	ldi	r30, 0x39	; 57
    1656:	f0 e0       	ldi	r31, 0x00	; 0
    1658:	90 81       	ld	r25, Z
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	89 23       	and	r24, r25
    165e:	8e 83       	std	Y+6, r24	; 0x06
    1660:	9e 81       	ldd	r25, Y+6	; 0x06
    1662:	99 23       	and	r25, r25
    1664:	11 f0       	breq	.+4      	; 0x166a <gpioPinRead+0x6c>
    1666:	21 e0       	ldi	r18, 0x01	; 1
    1668:	2e 83       	std	Y+6, r18	; 0x06
    166a:	3e 81       	ldd	r19, Y+6	; 0x06
    166c:	3b 83       	std	Y+3, r19	; 0x03
    166e:	2c c0       	rjmp	.+88     	; 0x16c8 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
    1670:	e6 e3       	ldi	r30, 0x36	; 54
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	90 81       	ld	r25, Z
    1676:	8a 81       	ldd	r24, Y+2	; 0x02
    1678:	89 23       	and	r24, r25
    167a:	8f 83       	std	Y+7, r24	; 0x07
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	88 23       	and	r24, r24
    1680:	11 f0       	breq	.+4      	; 0x1686 <gpioPinRead+0x88>
    1682:	91 e0       	ldi	r25, 0x01	; 1
    1684:	9f 83       	std	Y+7, r25	; 0x07
    1686:	2f 81       	ldd	r18, Y+7	; 0x07
    1688:	2b 83       	std	Y+3, r18	; 0x03
    168a:	1e c0       	rjmp	.+60     	; 0x16c8 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
    168c:	e3 e3       	ldi	r30, 0x33	; 51
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	90 81       	ld	r25, Z
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	89 23       	and	r24, r25
    1696:	88 87       	std	Y+8, r24	; 0x08
    1698:	38 85       	ldd	r19, Y+8	; 0x08
    169a:	33 23       	and	r19, r19
    169c:	11 f0       	breq	.+4      	; 0x16a2 <gpioPinRead+0xa4>
    169e:	81 e0       	ldi	r24, 0x01	; 1
    16a0:	88 87       	std	Y+8, r24	; 0x08
    16a2:	98 85       	ldd	r25, Y+8	; 0x08
    16a4:	9b 83       	std	Y+3, r25	; 0x03
    16a6:	10 c0       	rjmp	.+32     	; 0x16c8 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
    16a8:	e0 e3       	ldi	r30, 0x30	; 48
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	90 81       	ld	r25, Z
    16ae:	8a 81       	ldd	r24, Y+2	; 0x02
    16b0:	89 23       	and	r24, r25
    16b2:	89 87       	std	Y+9, r24	; 0x09
    16b4:	29 85       	ldd	r18, Y+9	; 0x09
    16b6:	22 23       	and	r18, r18
    16b8:	11 f0       	breq	.+4      	; 0x16be <gpioPinRead+0xc0>
    16ba:	31 e0       	ldi	r19, 0x01	; 1
    16bc:	39 87       	std	Y+9, r19	; 0x09
    16be:	89 85       	ldd	r24, Y+9	; 0x09
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
    16c4:	9f ef       	ldi	r25, 0xFF	; 255
    16c6:	9b 83       	std	Y+3, r25	; 0x03
    16c8:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
    16ca:	29 96       	adiw	r28, 0x09	; 9
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	cf 91       	pop	r28
    16d8:	df 91       	pop	r29
    16da:	08 95       	ret

000016dc <__vector_1>:
extern uint8_t gu8_swIcuFlag;

/*- INTERRUPT APIs IMPLEMENTATION --------------------------*/

void EXTERNAL_INTERRUPT0 (void)
{
    16dc:	78 94       	sei
    16de:	1f 92       	push	r1
    16e0:	0f 92       	push	r0
    16e2:	0f b6       	in	r0, 0x3f	; 63
    16e4:	0f 92       	push	r0
    16e6:	11 24       	eor	r1, r1
    16e8:	df 93       	push	r29
    16ea:	cf 93       	push	r28
    16ec:	cd b7       	in	r28, 0x3d	; 61
    16ee:	de b7       	in	r29, 0x3e	; 62

}
    16f0:	cf 91       	pop	r28
    16f2:	df 91       	pop	r29
    16f4:	0f 90       	pop	r0
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	0f 90       	pop	r0
    16fa:	1f 90       	pop	r1
    16fc:	18 95       	reti

000016fe <__vector_2>:

void EXTERNAL_INTERRUPT1 (void)
{
    16fe:	78 94       	sei
    1700:	1f 92       	push	r1
    1702:	0f 92       	push	r0
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	0f 92       	push	r0
    1708:	11 24       	eor	r1, r1
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	cd b7       	in	r28, 0x3d	; 61
    1710:	de b7       	in	r29, 0x3e	; 62

}
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	0f 90       	pop	r0
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	0f 90       	pop	r0
    171c:	1f 90       	pop	r1
    171e:	18 95       	reti

00001720 <__vector_3>:

void EXTERNAL_INTERRUPT2 (void)
{
    1720:	78 94       	sei
    1722:	1f 92       	push	r1
    1724:	0f 92       	push	r0
    1726:	0f b6       	in	r0, 0x3f	; 63
    1728:	0f 92       	push	r0
    172a:	11 24       	eor	r1, r1
    172c:	2f 93       	push	r18
    172e:	3f 93       	push	r19
    1730:	4f 93       	push	r20
    1732:	5f 93       	push	r21
    1734:	6f 93       	push	r22
    1736:	7f 93       	push	r23
    1738:	8f 93       	push	r24
    173a:	9f 93       	push	r25
    173c:	af 93       	push	r26
    173e:	bf 93       	push	r27
    1740:	ef 93       	push	r30
    1742:	ff 93       	push	r31
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	cd b7       	in	r28, 0x3d	; 61
    174a:	de b7       	in	r29, 0x3e	; 62
	if(BIT_IS_SET(MCUCSR, 6))
    174c:	e4 e5       	ldi	r30, 0x54	; 84
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	88 2f       	mov	r24, r24
    1754:	90 e0       	ldi	r25, 0x00	; 0
    1756:	80 74       	andi	r24, 0x40	; 64
    1758:	90 70       	andi	r25, 0x00	; 0
    175a:	00 97       	sbiw	r24, 0x00	; 0
    175c:	31 f0       	breq	.+12     	; 0x176a <__vector_3+0x4a>
	{
		SwICU_Start();
    175e:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <SwICU_Start>
		SwICU_SetCfgEdge(SwICU_EdgeFalling);
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	0e 94 a2 07 	call	0xf44	; 0xf44 <SwICU_SetCfgEdge>
    1768:	15 c0       	rjmp	.+42     	; 0x1794 <__vector_3+0x74>
	}
	else if(BIT_IS_CLEAR(MCUCSR, 6))
    176a:	e4 e5       	ldi	r30, 0x54	; 84
    176c:	f0 e0       	ldi	r31, 0x00	; 0
    176e:	80 81       	ld	r24, Z
    1770:	88 2f       	mov	r24, r24
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	80 74       	andi	r24, 0x40	; 64
    1776:	90 70       	andi	r25, 0x00	; 0
    1778:	00 97       	sbiw	r24, 0x00	; 0
    177a:	61 f4       	brne	.+24     	; 0x1794 <__vector_3+0x74>
	{
		gu8_swIcuRead = timer0Read();
    177c:	0e 94 d7 11 	call	0x23ae	; 0x23ae <timer0Read>
    1780:	80 93 6c 01 	sts	0x016C, r24
		SwICU_SetCfgEdge(SwICU_EdgeRising);
    1784:	80 e4       	ldi	r24, 0x40	; 64
    1786:	0e 94 a2 07 	call	0xf44	; 0xf44 <SwICU_SetCfgEdge>
		SwICU_Stop();
    178a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <SwICU_Stop>
		gu8_swIcuFlag = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 6d 01 	sts	0x016D, r24
	}
}
    1794:	cf 91       	pop	r28
    1796:	df 91       	pop	r29
    1798:	ff 91       	pop	r31
    179a:	ef 91       	pop	r30
    179c:	bf 91       	pop	r27
    179e:	af 91       	pop	r26
    17a0:	9f 91       	pop	r25
    17a2:	8f 91       	pop	r24
    17a4:	7f 91       	pop	r23
    17a6:	6f 91       	pop	r22
    17a8:	5f 91       	pop	r21
    17aa:	4f 91       	pop	r20
    17ac:	3f 91       	pop	r19
    17ae:	2f 91       	pop	r18
    17b0:	0f 90       	pop	r0
    17b2:	0f be       	out	0x3f, r0	; 63
    17b4:	0f 90       	pop	r0
    17b6:	1f 90       	pop	r1
    17b8:	18 95       	reti

000017ba <__vector_10>:

void TIMER0_CTC_MODE_INTERRUPT (void)
{
    17ba:	78 94       	sei
    17bc:	1f 92       	push	r1
    17be:	0f 92       	push	r0
    17c0:	0f b6       	in	r0, 0x3f	; 63
    17c2:	0f 92       	push	r0
    17c4:	11 24       	eor	r1, r1
    17c6:	2f 93       	push	r18
    17c8:	3f 93       	push	r19
    17ca:	4f 93       	push	r20
    17cc:	5f 93       	push	r21
    17ce:	6f 93       	push	r22
    17d0:	7f 93       	push	r23
    17d2:	8f 93       	push	r24
    17d4:	9f 93       	push	r25
    17d6:	af 93       	push	r26
    17d8:	bf 93       	push	r27
    17da:	ef 93       	push	r30
    17dc:	ff 93       	push	r31
    17de:	df 93       	push	r29
    17e0:	cf 93       	push	r28
    17e2:	cd b7       	in	r28, 0x3d	; 61
    17e4:	de b7       	in	r29, 0x3e	; 62
	/* A global interrupt variable used for controlling the motor speed every time the duty cycle changes */
	gu16_globalInterruptVariable++;
    17e6:	80 91 6e 01 	lds	r24, 0x016E
    17ea:	90 91 6f 01 	lds	r25, 0x016F
    17ee:	01 96       	adiw	r24, 0x01	; 1
    17f0:	90 93 6f 01 	sts	0x016F, r25
    17f4:	80 93 6e 01 	sts	0x016E, r24
	
	if(gu16_globalInterruptVariable % 100 == gu8_dutyCycle)
    17f8:	80 91 6e 01 	lds	r24, 0x016E
    17fc:	90 91 6f 01 	lds	r25, 0x016F
    1800:	24 e6       	ldi	r18, 0x64	; 100
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	b9 01       	movw	r22, r18
    1806:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
    180a:	9c 01       	movw	r18, r24
    180c:	80 91 6b 01 	lds	r24, 0x016B
    1810:	88 2f       	mov	r24, r24
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	28 17       	cp	r18, r24
    1816:	39 07       	cpc	r19, r25
    1818:	c1 f4       	brne	.+48     	; 0x184a <__vector_10+0x90>
	{
		gpioPinWrite(GPIOD, BIT2, LOW);
    181a:	83 e0       	ldi	r24, 0x03	; 3
    181c:	64 e0       	ldi	r22, 0x04	; 4
    181e:	40 e0       	ldi	r20, 0x00	; 0
    1820:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		if(gu8_flag != 2)
    1824:	80 91 72 01 	lds	r24, 0x0172
    1828:	90 91 73 01 	lds	r25, 0x0173
    182c:	82 30       	cpi	r24, 0x02	; 2
    182e:	91 05       	cpc	r25, r1
    1830:	31 f0       	breq	.+12     	; 0x183e <__vector_10+0x84>
			gpioPinWrite(GPIOD, BIT6, LOW);
    1832:	83 e0       	ldi	r24, 0x03	; 3
    1834:	60 e4       	ldi	r22, 0x40	; 64
    1836:	40 e0       	ldi	r20, 0x00	; 0
    1838:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    183c:	2c c0       	rjmp	.+88     	; 0x1896 <__vector_10+0xdc>
		else
			gpioPinWrite(GPIOD, BIT7, LOW);
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	60 e8       	ldi	r22, 0x80	; 128
    1842:	40 e0       	ldi	r20, 0x00	; 0
    1844:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1848:	26 c0       	rjmp	.+76     	; 0x1896 <__vector_10+0xdc>
	}else if(gu16_globalInterruptVariable % 100 == 0)
    184a:	80 91 6e 01 	lds	r24, 0x016E
    184e:	90 91 6f 01 	lds	r25, 0x016F
    1852:	24 e6       	ldi	r18, 0x64	; 100
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	b9 01       	movw	r22, r18
    1858:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
    185c:	00 97       	sbiw	r24, 0x00	; 0
    185e:	d9 f4       	brne	.+54     	; 0x1896 <__vector_10+0xdc>
	{
		gpioPinWrite(GPIOD, BIT2, HIGH);
    1860:	83 e0       	ldi	r24, 0x03	; 3
    1862:	64 e0       	ldi	r22, 0x04	; 4
    1864:	4f ef       	ldi	r20, 0xFF	; 255
    1866:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		if(gu8_flag != 2)
    186a:	80 91 72 01 	lds	r24, 0x0172
    186e:	90 91 73 01 	lds	r25, 0x0173
    1872:	82 30       	cpi	r24, 0x02	; 2
    1874:	91 05       	cpc	r25, r1
    1876:	31 f0       	breq	.+12     	; 0x1884 <__vector_10+0xca>
			gpioPinWrite(GPIOD, BIT6, HIGH);
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	60 e4       	ldi	r22, 0x40	; 64
    187c:	4f ef       	ldi	r20, 0xFF	; 255
    187e:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1882:	05 c0       	rjmp	.+10     	; 0x188e <__vector_10+0xd4>
		else
			gpioPinWrite(GPIOD, BIT7, HIGH);
    1884:	83 e0       	ldi	r24, 0x03	; 3
    1886:	60 e8       	ldi	r22, 0x80	; 128
    1888:	4f ef       	ldi	r20, 0xFF	; 255
    188a:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
			
		gu16_globalInterruptVariable = 0;
    188e:	10 92 6f 01 	sts	0x016F, r1
    1892:	10 92 6e 01 	sts	0x016E, r1
	}

	if(gu8_completionFlag == 1)
    1896:	80 91 6a 01 	lds	r24, 0x016A
    189a:	81 30       	cpi	r24, 0x01	; 1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <__vector_10+0xe6>
	{
		cli();
    189e:	f8 94       	cli
	}

	gu16_delayCounter++;
    18a0:	80 91 70 01 	lds	r24, 0x0170
    18a4:	90 91 71 01 	lds	r25, 0x0171
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	90 93 71 01 	sts	0x0171, r25
    18ae:	80 93 70 01 	sts	0x0170, r24

	if(gu16_delayCounter == 650)
    18b2:	80 91 70 01 	lds	r24, 0x0170
    18b6:	90 91 71 01 	lds	r25, 0x0171
    18ba:	22 e0       	ldi	r18, 0x02	; 2
    18bc:	8a 38       	cpi	r24, 0x8A	; 138
    18be:	92 07       	cpc	r25, r18
    18c0:	39 f5       	brne	.+78     	; 0x1910 <__vector_10+0x156>
	{
		if(gu8_flag == 0)
    18c2:	80 91 72 01 	lds	r24, 0x0172
    18c6:	90 91 73 01 	lds	r25, 0x0173
    18ca:	00 97       	sbiw	r24, 0x00	; 0
    18cc:	31 f4       	brne	.+12     	; 0x18da <__vector_10+0x120>
			gu8_dutyCycle++;
    18ce:	80 91 6b 01 	lds	r24, 0x016B
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	80 93 6b 01 	sts	0x016B, r24
    18d8:	17 c0       	rjmp	.+46     	; 0x1908 <__vector_10+0x14e>
		else if(gu8_flag == 1)
    18da:	80 91 72 01 	lds	r24, 0x0172
    18de:	90 91 73 01 	lds	r25, 0x0173
    18e2:	81 30       	cpi	r24, 0x01	; 1
    18e4:	91 05       	cpc	r25, r1
    18e6:	31 f4       	brne	.+12     	; 0x18f4 <__vector_10+0x13a>
			gu8_dutyCycle--;
    18e8:	80 91 6b 01 	lds	r24, 0x016B
    18ec:	81 50       	subi	r24, 0x01	; 1
    18ee:	80 93 6b 01 	sts	0x016B, r24
    18f2:	0a c0       	rjmp	.+20     	; 0x1908 <__vector_10+0x14e>
		else if(gu8_flag == 2)
    18f4:	80 91 72 01 	lds	r24, 0x0172
    18f8:	90 91 73 01 	lds	r25, 0x0173
    18fc:	82 30       	cpi	r24, 0x02	; 2
    18fe:	91 05       	cpc	r25, r1
    1900:	19 f4       	brne	.+6      	; 0x1908 <__vector_10+0x14e>
			gu8_completionFlag = 1;
    1902:	81 e0       	ldi	r24, 0x01	; 1
    1904:	80 93 6a 01 	sts	0x016A, r24
		gu16_delayCounter = 0;
    1908:	10 92 71 01 	sts	0x0171, r1
    190c:	10 92 70 01 	sts	0x0170, r1
	}

	if(gu8_dutyCycle >= 100 && gu8_flag == 0)
    1910:	80 91 6b 01 	lds	r24, 0x016B
    1914:	84 36       	cpi	r24, 0x64	; 100
    1916:	68 f0       	brcs	.+26     	; 0x1932 <__vector_10+0x178>
    1918:	80 91 72 01 	lds	r24, 0x0172
    191c:	90 91 73 01 	lds	r25, 0x0173
    1920:	00 97       	sbiw	r24, 0x00	; 0
    1922:	39 f4       	brne	.+14     	; 0x1932 <__vector_10+0x178>
	{
		gu8_flag = 1;
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
    1928:	90 93 73 01 	sts	0x0173, r25
    192c:	80 93 72 01 	sts	0x0172, r24
    1930:	19 c0       	rjmp	.+50     	; 0x1964 <__vector_10+0x1aa>
	}
	else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
    1932:	80 91 6b 01 	lds	r24, 0x016B
    1936:	88 23       	and	r24, r24
    1938:	a9 f4       	brne	.+42     	; 0x1964 <__vector_10+0x1aa>
    193a:	80 91 72 01 	lds	r24, 0x0172
    193e:	90 91 73 01 	lds	r25, 0x0173
    1942:	81 30       	cpi	r24, 0x01	; 1
    1944:	91 05       	cpc	r25, r1
    1946:	71 f4       	brne	.+28     	; 0x1964 <__vector_10+0x1aa>
	{
		gu8_flag = 2;
    1948:	82 e0       	ldi	r24, 0x02	; 2
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	90 93 73 01 	sts	0x0173, r25
    1950:	80 93 72 01 	sts	0x0172, r24
		gu8_dutyCycle = 20;
    1954:	84 e1       	ldi	r24, 0x14	; 20
    1956:	80 93 6b 01 	sts	0x016B, r24
		gpioPinWrite(GPIOD, BIT6, LOW);
    195a:	83 e0       	ldi	r24, 0x03	; 3
    195c:	60 e4       	ldi	r22, 0x40	; 64
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
	}
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	ff 91       	pop	r31
    196a:	ef 91       	pop	r30
    196c:	bf 91       	pop	r27
    196e:	af 91       	pop	r26
    1970:	9f 91       	pop	r25
    1972:	8f 91       	pop	r24
    1974:	7f 91       	pop	r23
    1976:	6f 91       	pop	r22
    1978:	5f 91       	pop	r21
    197a:	4f 91       	pop	r20
    197c:	3f 91       	pop	r19
    197e:	2f 91       	pop	r18
    1980:	0f 90       	pop	r0
    1982:	0f be       	out	0x3f, r0	; 63
    1984:	0f 90       	pop	r0
    1986:	1f 90       	pop	r1
    1988:	18 95       	reti

0000198a <__vector_11>:

void TIMER0_OVF_MODE_INTERRUPT (void)
{
    198a:	78 94       	sei
    198c:	1f 92       	push	r1
    198e:	0f 92       	push	r0
    1990:	0f b6       	in	r0, 0x3f	; 63
    1992:	0f 92       	push	r0
    1994:	11 24       	eor	r1, r1
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62

}
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	0f 90       	pop	r0
    19a4:	0f be       	out	0x3f, r0	; 63
    19a6:	0f 90       	pop	r0
    19a8:	1f 90       	pop	r1
    19aa:	18 95       	reti

000019ac <__vector_6>:

void TIMER1_ICU_MODE_INTERRUPT (void)
{
    19ac:	78 94       	sei
    19ae:	1f 92       	push	r1
    19b0:	0f 92       	push	r0
    19b2:	0f b6       	in	r0, 0x3f	; 63
    19b4:	0f 92       	push	r0
    19b6:	11 24       	eor	r1, r1
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	cd b7       	in	r28, 0x3d	; 61
    19be:	de b7       	in	r29, 0x3e	; 62

}
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	0f 90       	pop	r0
    19c6:	0f be       	out	0x3f, r0	; 63
    19c8:	0f 90       	pop	r0
    19ca:	1f 90       	pop	r1
    19cc:	18 95       	reti

000019ce <__vector_7>:

void TIMER1_CTC_A_MODE_INTERRUPT (void)
{
    19ce:	78 94       	sei
    19d0:	1f 92       	push	r1
    19d2:	0f 92       	push	r0
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	0f 92       	push	r0
    19d8:	11 24       	eor	r1, r1
    19da:	df 93       	push	r29
    19dc:	cf 93       	push	r28
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
	
}
    19e2:	cf 91       	pop	r28
    19e4:	df 91       	pop	r29
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	0f 90       	pop	r0
    19ec:	1f 90       	pop	r1
    19ee:	18 95       	reti

000019f0 <__vector_8>:

void TIMER1_CTC_B_MODE_INTERRUPT (void)
{
    19f0:	78 94       	sei
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	df 93       	push	r29
    19fe:	cf 93       	push	r28
    1a00:	cd b7       	in	r28, 0x3d	; 61
    1a02:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
    1a04:	cf 91       	pop	r28
    1a06:	df 91       	pop	r29
    1a08:	0f 90       	pop	r0
    1a0a:	0f be       	out	0x3f, r0	; 63
    1a0c:	0f 90       	pop	r0
    1a0e:	1f 90       	pop	r1
    1a10:	18 95       	reti

00001a12 <__vector_9>:

void TIMER1_OVF_MODE_INTERRUPT (void)
{
    1a12:	78 94       	sei
    1a14:	1f 92       	push	r1
    1a16:	0f 92       	push	r0
    1a18:	0f b6       	in	r0, 0x3f	; 63
    1a1a:	0f 92       	push	r0
    1a1c:	11 24       	eor	r1, r1
    1a1e:	df 93       	push	r29
    1a20:	cf 93       	push	r28
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
//	timer1Set(49911);
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	0f 90       	pop	r0
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	0f 90       	pop	r0
    1a30:	1f 90       	pop	r1
    1a32:	18 95       	reti

00001a34 <__vector_4>:

void TIMER2_CTC_MODE_INTERRUPT (void)
{
    1a34:	78 94       	sei
    1a36:	1f 92       	push	r1
    1a38:	0f 92       	push	r0
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	0f 92       	push	r0
    1a3e:	11 24       	eor	r1, r1
    1a40:	2f 93       	push	r18
    1a42:	3f 93       	push	r19
    1a44:	4f 93       	push	r20
    1a46:	5f 93       	push	r21
    1a48:	6f 93       	push	r22
    1a4a:	7f 93       	push	r23
    1a4c:	8f 93       	push	r24
    1a4e:	9f 93       	push	r25
    1a50:	af 93       	push	r26
    1a52:	bf 93       	push	r27
    1a54:	ef 93       	push	r30
    1a56:	ff 93       	push	r31
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	cd b7       	in	r28, 0x3d	; 61
    1a5e:	de b7       	in	r29, 0x3e	; 62
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}

gu16_globalInterruptVariable++;
    1a60:	80 91 6e 01 	lds	r24, 0x016E
    1a64:	90 91 6f 01 	lds	r25, 0x016F
    1a68:	01 96       	adiw	r24, 0x01	; 1
    1a6a:	90 93 6f 01 	sts	0x016F, r25
    1a6e:	80 93 6e 01 	sts	0x016E, r24

if(gu16_globalInterruptVariable % 100 == (gu8_dutyCycle/3))
    1a72:	80 91 6e 01 	lds	r24, 0x016E
    1a76:	90 91 6f 01 	lds	r25, 0x016F
    1a7a:	24 e6       	ldi	r18, 0x64	; 100
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	b9 01       	movw	r22, r18
    1a80:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
    1a84:	9c 01       	movw	r18, r24
    1a86:	80 91 6b 01 	lds	r24, 0x016B
    1a8a:	93 e0       	ldi	r25, 0x03	; 3
    1a8c:	69 2f       	mov	r22, r25
    1a8e:	0e 94 75 16 	call	0x2cea	; 0x2cea <__udivmodqi4>
    1a92:	88 2f       	mov	r24, r24
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	28 17       	cp	r18, r24
    1a98:	39 07       	cpc	r19, r25
    1a9a:	c1 f4       	brne	.+48     	; 0x1acc <__vector_4+0x98>
{
	gpioPinWrite(GPIOD, BIT2, LOW);
    1a9c:	83 e0       	ldi	r24, 0x03	; 3
    1a9e:	64 e0       	ldi	r22, 0x04	; 4
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
	if(gu8_flag != 2)
    1aa6:	80 91 72 01 	lds	r24, 0x0172
    1aaa:	90 91 73 01 	lds	r25, 0x0173
    1aae:	82 30       	cpi	r24, 0x02	; 2
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	31 f0       	breq	.+12     	; 0x1ac0 <__vector_4+0x8c>
	gpioPinWrite(GPIOD, BIT6, LOW);
    1ab4:	83 e0       	ldi	r24, 0x03	; 3
    1ab6:	60 e4       	ldi	r22, 0x40	; 64
    1ab8:	40 e0       	ldi	r20, 0x00	; 0
    1aba:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1abe:	2c c0       	rjmp	.+88     	; 0x1b18 <__vector_4+0xe4>
	else
	gpioPinWrite(GPIOD, BIT7, LOW);
    1ac0:	83 e0       	ldi	r24, 0x03	; 3
    1ac2:	60 e8       	ldi	r22, 0x80	; 128
    1ac4:	40 e0       	ldi	r20, 0x00	; 0
    1ac6:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1aca:	26 c0       	rjmp	.+76     	; 0x1b18 <__vector_4+0xe4>
}else if(gu16_globalInterruptVariable % 100 == 0)
    1acc:	80 91 6e 01 	lds	r24, 0x016E
    1ad0:	90 91 6f 01 	lds	r25, 0x016F
    1ad4:	24 e6       	ldi	r18, 0x64	; 100
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	b9 01       	movw	r22, r18
    1ada:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__udivmodhi4>
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	d9 f4       	brne	.+54     	; 0x1b18 <__vector_4+0xe4>
{
	gpioPinWrite(GPIOD, BIT2, HIGH);
    1ae2:	83 e0       	ldi	r24, 0x03	; 3
    1ae4:	64 e0       	ldi	r22, 0x04	; 4
    1ae6:	4f ef       	ldi	r20, 0xFF	; 255
    1ae8:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
	if(gu8_flag != 2)
    1aec:	80 91 72 01 	lds	r24, 0x0172
    1af0:	90 91 73 01 	lds	r25, 0x0173
    1af4:	82 30       	cpi	r24, 0x02	; 2
    1af6:	91 05       	cpc	r25, r1
    1af8:	31 f0       	breq	.+12     	; 0x1b06 <__vector_4+0xd2>
	gpioPinWrite(GPIOD, BIT6, HIGH);
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	60 e4       	ldi	r22, 0x40	; 64
    1afe:	4f ef       	ldi	r20, 0xFF	; 255
    1b00:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1b04:	05 c0       	rjmp	.+10     	; 0x1b10 <__vector_4+0xdc>
	else
	gpioPinWrite(GPIOD, BIT7, HIGH);
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	60 e8       	ldi	r22, 0x80	; 128
    1b0a:	4f ef       	ldi	r20, 0xFF	; 255
    1b0c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
	
	gu16_globalInterruptVariable = 0;
    1b10:	10 92 6f 01 	sts	0x016F, r1
    1b14:	10 92 6e 01 	sts	0x016E, r1
}

if(gu8_completionFlag == 1)
    1b18:	80 91 6a 01 	lds	r24, 0x016A
    1b1c:	81 30       	cpi	r24, 0x01	; 1
    1b1e:	09 f4       	brne	.+2      	; 0x1b22 <__vector_4+0xee>
{
	cli();
    1b20:	f8 94       	cli
}

gu16_delayCounter++;
    1b22:	80 91 70 01 	lds	r24, 0x0170
    1b26:	90 91 71 01 	lds	r25, 0x0171
    1b2a:	01 96       	adiw	r24, 0x01	; 1
    1b2c:	90 93 71 01 	sts	0x0171, r25
    1b30:	80 93 70 01 	sts	0x0170, r24

if(gu16_delayCounter == 540)
    1b34:	80 91 70 01 	lds	r24, 0x0170
    1b38:	90 91 71 01 	lds	r25, 0x0171
    1b3c:	22 e0       	ldi	r18, 0x02	; 2
    1b3e:	8c 31       	cpi	r24, 0x1C	; 28
    1b40:	92 07       	cpc	r25, r18
    1b42:	39 f5       	brne	.+78     	; 0x1b92 <__vector_4+0x15e>
{
	if(gu8_flag == 0)
    1b44:	80 91 72 01 	lds	r24, 0x0172
    1b48:	90 91 73 01 	lds	r25, 0x0173
    1b4c:	00 97       	sbiw	r24, 0x00	; 0
    1b4e:	31 f4       	brne	.+12     	; 0x1b5c <__vector_4+0x128>
	gu8_dutyCycle++;
    1b50:	80 91 6b 01 	lds	r24, 0x016B
    1b54:	8f 5f       	subi	r24, 0xFF	; 255
    1b56:	80 93 6b 01 	sts	0x016B, r24
    1b5a:	17 c0       	rjmp	.+46     	; 0x1b8a <__vector_4+0x156>
	else if(gu8_flag == 1)
    1b5c:	80 91 72 01 	lds	r24, 0x0172
    1b60:	90 91 73 01 	lds	r25, 0x0173
    1b64:	81 30       	cpi	r24, 0x01	; 1
    1b66:	91 05       	cpc	r25, r1
    1b68:	31 f4       	brne	.+12     	; 0x1b76 <__vector_4+0x142>
	gu8_dutyCycle--;
    1b6a:	80 91 6b 01 	lds	r24, 0x016B
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	80 93 6b 01 	sts	0x016B, r24
    1b74:	0a c0       	rjmp	.+20     	; 0x1b8a <__vector_4+0x156>
	else if(gu8_flag == 2)
    1b76:	80 91 72 01 	lds	r24, 0x0172
    1b7a:	90 91 73 01 	lds	r25, 0x0173
    1b7e:	82 30       	cpi	r24, 0x02	; 2
    1b80:	91 05       	cpc	r25, r1
    1b82:	19 f4       	brne	.+6      	; 0x1b8a <__vector_4+0x156>
	gu8_completionFlag = 1;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	80 93 6a 01 	sts	0x016A, r24
	gu16_delayCounter = 0;
    1b8a:	10 92 71 01 	sts	0x0171, r1
    1b8e:	10 92 70 01 	sts	0x0170, r1
}

if(gu8_dutyCycle >= 100 && gu8_flag == 0)
    1b92:	80 91 6b 01 	lds	r24, 0x016B
    1b96:	84 36       	cpi	r24, 0x64	; 100
    1b98:	68 f0       	brcs	.+26     	; 0x1bb4 <__vector_4+0x180>
    1b9a:	80 91 72 01 	lds	r24, 0x0172
    1b9e:	90 91 73 01 	lds	r25, 0x0173
    1ba2:	00 97       	sbiw	r24, 0x00	; 0
    1ba4:	39 f4       	brne	.+14     	; 0x1bb4 <__vector_4+0x180>
{
	gu8_flag = 1;
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	90 93 73 01 	sts	0x0173, r25
    1bae:	80 93 72 01 	sts	0x0172, r24
    1bb2:	19 c0       	rjmp	.+50     	; 0x1be6 <__vector_4+0x1b2>
}
else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
    1bb4:	80 91 6b 01 	lds	r24, 0x016B
    1bb8:	88 23       	and	r24, r24
    1bba:	a9 f4       	brne	.+42     	; 0x1be6 <__vector_4+0x1b2>
    1bbc:	80 91 72 01 	lds	r24, 0x0172
    1bc0:	90 91 73 01 	lds	r25, 0x0173
    1bc4:	81 30       	cpi	r24, 0x01	; 1
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	71 f4       	brne	.+28     	; 0x1be6 <__vector_4+0x1b2>
{
	gu8_flag = 2;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	90 93 73 01 	sts	0x0173, r25
    1bd2:	80 93 72 01 	sts	0x0172, r24
	gu8_dutyCycle = 60;
    1bd6:	8c e3       	ldi	r24, 0x3C	; 60
    1bd8:	80 93 6b 01 	sts	0x016B, r24
	gpioPinWrite(GPIOD, BIT6, LOW);
    1bdc:	83 e0       	ldi	r24, 0x03	; 3
    1bde:	60 e4       	ldi	r22, 0x40	; 64
    1be0:	40 e0       	ldi	r20, 0x00	; 0
    1be2:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
}
}
    1be6:	cf 91       	pop	r28
    1be8:	df 91       	pop	r29
    1bea:	ff 91       	pop	r31
    1bec:	ef 91       	pop	r30
    1bee:	bf 91       	pop	r27
    1bf0:	af 91       	pop	r26
    1bf2:	9f 91       	pop	r25
    1bf4:	8f 91       	pop	r24
    1bf6:	7f 91       	pop	r23
    1bf8:	6f 91       	pop	r22
    1bfa:	5f 91       	pop	r21
    1bfc:	4f 91       	pop	r20
    1bfe:	3f 91       	pop	r19
    1c00:	2f 91       	pop	r18
    1c02:	0f 90       	pop	r0
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	0f 90       	pop	r0
    1c08:	1f 90       	pop	r1
    1c0a:	18 95       	reti

00001c0c <__vector_5>:

void TIMER2_OVF_MODE_INTERRUPT (void)
{
    1c0c:	78 94       	sei
    1c0e:	1f 92       	push	r1
    1c10:	0f 92       	push	r0
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	0f 92       	push	r0
    1c16:	11 24       	eor	r1, r1
    1c18:	df 93       	push	r29
    1c1a:	cf 93       	push	r28
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
//	if(gu16_globalInterruptVariable == 250)
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}
}
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	0f 90       	pop	r0
    1c26:	0f be       	out	0x3f, r0	; 63
    1c28:	0f 90       	pop	r0
    1c2a:	1f 90       	pop	r1
    1c2c:	18 95       	reti

00001c2e <__vector_12>:

void SPI_STC_INTERRUPT (void)
{
    1c2e:	78 94       	sei
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	0f b6       	in	r0, 0x3f	; 63
    1c36:	0f 92       	push	r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62

}
    1c42:	cf 91       	pop	r28
    1c44:	df 91       	pop	r29
    1c46:	0f 90       	pop	r0
    1c48:	0f be       	out	0x3f, r0	; 63
    1c4a:	0f 90       	pop	r0
    1c4c:	1f 90       	pop	r1
    1c4e:	18 95       	reti

00001c50 <__vector_13>:

void USART_RXC_INTERRUPT (void)
{
    1c50:	78 94       	sei
    1c52:	1f 92       	push	r1
    1c54:	0f 92       	push	r0
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	0f 92       	push	r0
    1c5a:	11 24       	eor	r1, r1
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62

}
    1c64:	cf 91       	pop	r28
    1c66:	df 91       	pop	r29
    1c68:	0f 90       	pop	r0
    1c6a:	0f be       	out	0x3f, r0	; 63
    1c6c:	0f 90       	pop	r0
    1c6e:	1f 90       	pop	r1
    1c70:	18 95       	reti

00001c72 <__vector_14>:

void USART_UDRE_INTERRUPT (void)
{
    1c72:	78 94       	sei
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62

}
    1c86:	cf 91       	pop	r28
    1c88:	df 91       	pop	r29
    1c8a:	0f 90       	pop	r0
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	0f 90       	pop	r0
    1c90:	1f 90       	pop	r1
    1c92:	18 95       	reti

00001c94 <__vector_15>:

void USART_TXC_INTERRUPT (void)
{
    1c94:	78 94       	sei
    1c96:	1f 92       	push	r1
    1c98:	0f 92       	push	r0
    1c9a:	0f b6       	in	r0, 0x3f	; 63
    1c9c:	0f 92       	push	r0
    1c9e:	11 24       	eor	r1, r1
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62

}
    1ca8:	cf 91       	pop	r28
    1caa:	df 91       	pop	r29
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	0f 90       	pop	r0
    1cb2:	1f 90       	pop	r1
    1cb4:	18 95       	reti

00001cb6 <__vector_16>:

void ADC_INTERRUPT (void)
{
    1cb6:	78 94       	sei
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	df 93       	push	r29
    1cc4:	cf 93       	push	r28
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62

}
    1cca:	cf 91       	pop	r28
    1ccc:	df 91       	pop	r29
    1cce:	0f 90       	pop	r0
    1cd0:	0f be       	out	0x3f, r0	; 63
    1cd2:	0f 90       	pop	r0
    1cd4:	1f 90       	pop	r1
    1cd6:	18 95       	reti

00001cd8 <__vector_17>:

void EE_RDY_INTERRUPT (void)
{
    1cd8:	78 94       	sei
    1cda:	1f 92       	push	r1
    1cdc:	0f 92       	push	r0
    1cde:	0f b6       	in	r0, 0x3f	; 63
    1ce0:	0f 92       	push	r0
    1ce2:	11 24       	eor	r1, r1
    1ce4:	df 93       	push	r29
    1ce6:	cf 93       	push	r28
    1ce8:	cd b7       	in	r28, 0x3d	; 61
    1cea:	de b7       	in	r29, 0x3e	; 62

}
    1cec:	cf 91       	pop	r28
    1cee:	df 91       	pop	r29
    1cf0:	0f 90       	pop	r0
    1cf2:	0f be       	out	0x3f, r0	; 63
    1cf4:	0f 90       	pop	r0
    1cf6:	1f 90       	pop	r1
    1cf8:	18 95       	reti

00001cfa <__vector_18>:

void ANA_COMP_INTERRUPT (void)
{
    1cfa:	78 94       	sei
    1cfc:	1f 92       	push	r1
    1cfe:	0f 92       	push	r0
    1d00:	0f b6       	in	r0, 0x3f	; 63
    1d02:	0f 92       	push	r0
    1d04:	11 24       	eor	r1, r1
    1d06:	df 93       	push	r29
    1d08:	cf 93       	push	r28
    1d0a:	cd b7       	in	r28, 0x3d	; 61
    1d0c:	de b7       	in	r29, 0x3e	; 62

}
    1d0e:	cf 91       	pop	r28
    1d10:	df 91       	pop	r29
    1d12:	0f 90       	pop	r0
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	0f 90       	pop	r0
    1d18:	1f 90       	pop	r1
    1d1a:	18 95       	reti

00001d1c <__vector_19>:

void TWI_INTERRUPT (void)
{
    1d1c:	78 94       	sei
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	0f b6       	in	r0, 0x3f	; 63
    1d24:	0f 92       	push	r0
    1d26:	11 24       	eor	r1, r1
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62

}
    1d30:	cf 91       	pop	r28
    1d32:	df 91       	pop	r29
    1d34:	0f 90       	pop	r0
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	0f 90       	pop	r0
    1d3a:	1f 90       	pop	r1
    1d3c:	18 95       	reti

00001d3e <__vector_20>:

void SPM_RDY_INTERRUPT (void)
{
    1d3e:	78 94       	sei
    1d40:	1f 92       	push	r1
    1d42:	0f 92       	push	r0
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	0f 92       	push	r0
    1d48:	11 24       	eor	r1, r1
    1d4a:	df 93       	push	r29
    1d4c:	cf 93       	push	r28
    1d4e:	cd b7       	in	r28, 0x3d	; 61
    1d50:	de b7       	in	r29, 0x3e	; 62

}
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	0f 90       	pop	r0
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	0f 90       	pop	r0
    1d5c:	1f 90       	pop	r1
    1d5e:	18 95       	reti

00001d60 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <Led_Init+0x6>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
    1d6e:	89 81       	ldd	r24, Y+1	; 0x01
    1d70:	28 2f       	mov	r18, r24
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	3b 83       	std	Y+3, r19	; 0x03
    1d76:	2a 83       	std	Y+2, r18	; 0x02
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7c:	81 30       	cpi	r24, 0x01	; 1
    1d7e:	91 05       	cpc	r25, r1
    1d80:	d9 f0       	breq	.+54     	; 0x1db8 <Led_Init+0x58>
    1d82:	2a 81       	ldd	r18, Y+2	; 0x02
    1d84:	3b 81       	ldd	r19, Y+3	; 0x03
    1d86:	22 30       	cpi	r18, 0x02	; 2
    1d88:	31 05       	cpc	r19, r1
    1d8a:	2c f4       	brge	.+10     	; 0x1d96 <Led_Init+0x36>
    1d8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d8e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d90:	00 97       	sbiw	r24, 0x00	; 0
    1d92:	61 f0       	breq	.+24     	; 0x1dac <Led_Init+0x4c>
    1d94:	22 c0       	rjmp	.+68     	; 0x1dda <Led_Init+0x7a>
    1d96:	2a 81       	ldd	r18, Y+2	; 0x02
    1d98:	3b 81       	ldd	r19, Y+3	; 0x03
    1d9a:	22 30       	cpi	r18, 0x02	; 2
    1d9c:	31 05       	cpc	r19, r1
    1d9e:	91 f0       	breq	.+36     	; 0x1dc4 <Led_Init+0x64>
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	83 30       	cpi	r24, 0x03	; 3
    1da6:	91 05       	cpc	r25, r1
    1da8:	99 f0       	breq	.+38     	; 0x1dd0 <Led_Init+0x70>
    1daa:	17 c0       	rjmp	.+46     	; 0x1dda <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	60 e1       	ldi	r22, 0x10	; 16
    1db0:	4f ef       	ldi	r20, 0xFF	; 255
    1db2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
    1db6:	11 c0       	rjmp	.+34     	; 0x1dda <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
    1db8:	81 e0       	ldi	r24, 0x01	; 1
    1dba:	60 e2       	ldi	r22, 0x20	; 32
    1dbc:	4f ef       	ldi	r20, 0xFF	; 255
    1dbe:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
    1dc2:	0b c0       	rjmp	.+22     	; 0x1dda <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	60 e4       	ldi	r22, 0x40	; 64
    1dc8:	4f ef       	ldi	r20, 0xFF	; 255
    1dca:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
    1dce:	05 c0       	rjmp	.+10     	; 0x1dda <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    1dd0:	81 e0       	ldi	r24, 0x01	; 1
    1dd2:	60 e8       	ldi	r22, 0x80	; 128
    1dd4:	4f ef       	ldi	r20, 0xFF	; 255
    1dd6:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		break;
	default:

		break;
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <Led_On+0x6>
    1dec:	0f 92       	push	r0
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
    1df4:	89 81       	ldd	r24, Y+1	; 0x01
    1df6:	28 2f       	mov	r18, r24
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	3b 83       	std	Y+3, r19	; 0x03
    1dfc:	2a 83       	std	Y+2, r18	; 0x02
    1dfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1e00:	9b 81       	ldd	r25, Y+3	; 0x03
    1e02:	81 30       	cpi	r24, 0x01	; 1
    1e04:	91 05       	cpc	r25, r1
    1e06:	d9 f0       	breq	.+54     	; 0x1e3e <Led_On+0x58>
    1e08:	2a 81       	ldd	r18, Y+2	; 0x02
    1e0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1e0c:	22 30       	cpi	r18, 0x02	; 2
    1e0e:	31 05       	cpc	r19, r1
    1e10:	2c f4       	brge	.+10     	; 0x1e1c <Led_On+0x36>
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	9b 81       	ldd	r25, Y+3	; 0x03
    1e16:	00 97       	sbiw	r24, 0x00	; 0
    1e18:	61 f0       	breq	.+24     	; 0x1e32 <Led_On+0x4c>
    1e1a:	22 c0       	rjmp	.+68     	; 0x1e60 <Led_On+0x7a>
    1e1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1e1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1e20:	22 30       	cpi	r18, 0x02	; 2
    1e22:	31 05       	cpc	r19, r1
    1e24:	91 f0       	breq	.+36     	; 0x1e4a <Led_On+0x64>
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	83 30       	cpi	r24, 0x03	; 3
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	99 f0       	breq	.+38     	; 0x1e56 <Led_On+0x70>
    1e30:	17 c0       	rjmp	.+46     	; 0x1e60 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
    1e32:	81 e0       	ldi	r24, 0x01	; 1
    1e34:	60 e1       	ldi	r22, 0x10	; 16
    1e36:	4f ef       	ldi	r20, 0xFF	; 255
    1e38:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1e3c:	11 c0       	rjmp	.+34     	; 0x1e60 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	60 e2       	ldi	r22, 0x20	; 32
    1e42:	4f ef       	ldi	r20, 0xFF	; 255
    1e44:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1e48:	0b c0       	rjmp	.+22     	; 0x1e60 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
    1e4a:	81 e0       	ldi	r24, 0x01	; 1
    1e4c:	60 e4       	ldi	r22, 0x40	; 64
    1e4e:	4f ef       	ldi	r20, 0xFF	; 255
    1e50:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1e54:	05 c0       	rjmp	.+10     	; 0x1e60 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
    1e56:	81 e0       	ldi	r24, 0x01	; 1
    1e58:	60 e8       	ldi	r22, 0x80	; 128
    1e5a:	4f ef       	ldi	r20, 0xFF	; 255
    1e5c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		break;
	default:

		break;
	}
}
    1e60:	0f 90       	pop	r0
    1e62:	0f 90       	pop	r0
    1e64:	0f 90       	pop	r0
    1e66:	cf 91       	pop	r28
    1e68:	df 91       	pop	r29
    1e6a:	08 95       	ret

00001e6c <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    1e6c:	df 93       	push	r29
    1e6e:	cf 93       	push	r28
    1e70:	00 d0       	rcall	.+0      	; 0x1e72 <Led_Off+0x6>
    1e72:	0f 92       	push	r0
    1e74:	cd b7       	in	r28, 0x3d	; 61
    1e76:	de b7       	in	r29, 0x3e	; 62
    1e78:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
    1e7a:	89 81       	ldd	r24, Y+1	; 0x01
    1e7c:	28 2f       	mov	r18, r24
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	3b 83       	std	Y+3, r19	; 0x03
    1e82:	2a 83       	std	Y+2, r18	; 0x02
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	81 30       	cpi	r24, 0x01	; 1
    1e8a:	91 05       	cpc	r25, r1
    1e8c:	d9 f0       	breq	.+54     	; 0x1ec4 <Led_Off+0x58>
    1e8e:	2a 81       	ldd	r18, Y+2	; 0x02
    1e90:	3b 81       	ldd	r19, Y+3	; 0x03
    1e92:	22 30       	cpi	r18, 0x02	; 2
    1e94:	31 05       	cpc	r19, r1
    1e96:	2c f4       	brge	.+10     	; 0x1ea2 <Led_Off+0x36>
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9c:	00 97       	sbiw	r24, 0x00	; 0
    1e9e:	61 f0       	breq	.+24     	; 0x1eb8 <Led_Off+0x4c>
    1ea0:	22 c0       	rjmp	.+68     	; 0x1ee6 <Led_Off+0x7a>
    1ea2:	2a 81       	ldd	r18, Y+2	; 0x02
    1ea4:	3b 81       	ldd	r19, Y+3	; 0x03
    1ea6:	22 30       	cpi	r18, 0x02	; 2
    1ea8:	31 05       	cpc	r19, r1
    1eaa:	91 f0       	breq	.+36     	; 0x1ed0 <Led_Off+0x64>
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	83 30       	cpi	r24, 0x03	; 3
    1eb2:	91 05       	cpc	r25, r1
    1eb4:	99 f0       	breq	.+38     	; 0x1edc <Led_Off+0x70>
    1eb6:	17 c0       	rjmp	.+46     	; 0x1ee6 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    1eb8:	81 e0       	ldi	r24, 0x01	; 1
    1eba:	60 e1       	ldi	r22, 0x10	; 16
    1ebc:	40 e0       	ldi	r20, 0x00	; 0
    1ebe:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1ec2:	11 c0       	rjmp	.+34     	; 0x1ee6 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	60 e2       	ldi	r22, 0x20	; 32
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1ece:	0b c0       	rjmp	.+22     	; 0x1ee6 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1ed0:	81 e0       	ldi	r24, 0x01	; 1
    1ed2:	60 e4       	ldi	r22, 0x40	; 64
    1ed4:	40 e0       	ldi	r20, 0x00	; 0
    1ed6:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
    1eda:	05 c0       	rjmp	.+10     	; 0x1ee6 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	60 e8       	ldi	r22, 0x80	; 128
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		break;
	default:

		break;
	}
}
    1ee6:	0f 90       	pop	r0
    1ee8:	0f 90       	pop	r0
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <Led_Toggle+0x6>
    1ef8:	0f 92       	push	r0
    1efa:	cd b7       	in	r28, 0x3d	; 61
    1efc:	de b7       	in	r29, 0x3e	; 62
    1efe:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
    1f00:	89 81       	ldd	r24, Y+1	; 0x01
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	3b 83       	std	Y+3, r19	; 0x03
    1f08:	2a 83       	std	Y+2, r18	; 0x02
    1f0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f0e:	81 30       	cpi	r24, 0x01	; 1
    1f10:	91 05       	cpc	r25, r1
    1f12:	d1 f0       	breq	.+52     	; 0x1f48 <Led_Toggle+0x56>
    1f14:	2a 81       	ldd	r18, Y+2	; 0x02
    1f16:	3b 81       	ldd	r19, Y+3	; 0x03
    1f18:	22 30       	cpi	r18, 0x02	; 2
    1f1a:	31 05       	cpc	r19, r1
    1f1c:	2c f4       	brge	.+10     	; 0x1f28 <Led_Toggle+0x36>
    1f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f20:	9b 81       	ldd	r25, Y+3	; 0x03
    1f22:	00 97       	sbiw	r24, 0x00	; 0
    1f24:	61 f0       	breq	.+24     	; 0x1f3e <Led_Toggle+0x4c>
    1f26:	1e c0       	rjmp	.+60     	; 0x1f64 <Led_Toggle+0x72>
    1f28:	2a 81       	ldd	r18, Y+2	; 0x02
    1f2a:	3b 81       	ldd	r19, Y+3	; 0x03
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	81 f0       	breq	.+32     	; 0x1f52 <Led_Toggle+0x60>
    1f32:	8a 81       	ldd	r24, Y+2	; 0x02
    1f34:	9b 81       	ldd	r25, Y+3	; 0x03
    1f36:	83 30       	cpi	r24, 0x03	; 3
    1f38:	91 05       	cpc	r25, r1
    1f3a:	81 f0       	breq	.+32     	; 0x1f5c <Led_Toggle+0x6a>
    1f3c:	13 c0       	rjmp	.+38     	; 0x1f64 <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	60 e1       	ldi	r22, 0x10	; 16
    1f42:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpioPinToggle>
    1f46:	0e c0       	rjmp	.+28     	; 0x1f64 <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	60 e2       	ldi	r22, 0x20	; 32
    1f4c:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpioPinToggle>
    1f50:	09 c0       	rjmp	.+18     	; 0x1f64 <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	60 e4       	ldi	r22, 0x40	; 64
    1f56:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpioPinToggle>
    1f5a:	04 c0       	rjmp	.+8      	; 0x1f64 <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	60 e8       	ldi	r22, 0x80	; 128
    1f60:	0e 94 ae 0a 	call	0x155c	; 0x155c <gpioPinToggle>
		break;
	default:

		break;
	}
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	cf 91       	pop	r28
    1f6c:	df 91       	pop	r29
    1f6e:	08 95       	ret

00001f70 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    1f70:	df 93       	push	r29
    1f72:	cf 93       	push	r28
    1f74:	00 d0       	rcall	.+0      	; 0x1f76 <pushButtonInit+0x6>
    1f76:	0f 92       	push	r0
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	28 2f       	mov	r18, r24
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	3b 83       	std	Y+3, r19	; 0x03
    1f86:	2a 83       	std	Y+2, r18	; 0x02
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	00 97       	sbiw	r24, 0x00	; 0
    1f8e:	31 f0       	breq	.+12     	; 0x1f9c <pushButtonInit+0x2c>
    1f90:	2a 81       	ldd	r18, Y+2	; 0x02
    1f92:	3b 81       	ldd	r19, Y+3	; 0x03
    1f94:	21 30       	cpi	r18, 0x01	; 1
    1f96:	31 05       	cpc	r19, r1
    1f98:	39 f0       	breq	.+14     	; 0x1fa8 <pushButtonInit+0x38>
    1f9a:	0b c0       	rjmp	.+22     	; 0x1fb2 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    1f9c:	82 e0       	ldi	r24, 0x02	; 2
    1f9e:	60 e1       	ldi	r22, 0x10	; 16
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
    1fa6:	05 c0       	rjmp	.+10     	; 0x1fb2 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    1fa8:	81 e0       	ldi	r24, 0x01	; 1
    1faa:	64 e0       	ldi	r22, 0x04	; 4
    1fac:	40 e0       	ldi	r20, 0x00	; 0
    1fae:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		break;
	default:

		break;
	}
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	cf 91       	pop	r28
    1fba:	df 91       	pop	r29
    1fbc:	08 95       	ret

00001fbe <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    1fbe:	df 93       	push	r29
    1fc0:	cf 93       	push	r28
    1fc2:	cd b7       	in	r28, 0x3d	; 61
    1fc4:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    1fc6:	cf 91       	pop	r28
    1fc8:	df 91       	pop	r29
    1fca:	08 95       	ret

00001fcc <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    1fcc:	df 93       	push	r29
    1fce:	cf 93       	push	r28
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <pushButtonGetStatus+0x6>
    1fd2:	00 d0       	rcall	.+0      	; 0x1fd4 <pushButtonGetStatus+0x8>
    1fd4:	cd b7       	in	r28, 0x3d	; 61
    1fd6:	de b7       	in	r29, 0x3e	; 62
    1fd8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	28 2f       	mov	r18, r24
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	3c 83       	std	Y+4, r19	; 0x04
    1fe2:	2b 83       	std	Y+3, r18	; 0x03
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	81 30       	cpi	r24, 0x01	; 1
    1fea:	91 05       	cpc	r25, r1
    1fec:	71 f1       	breq	.+92     	; 0x204a <pushButtonGetStatus+0x7e>
    1fee:	2b 81       	ldd	r18, Y+3	; 0x03
    1ff0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ff2:	22 30       	cpi	r18, 0x02	; 2
    1ff4:	31 05       	cpc	r19, r1
    1ff6:	2c f4       	brge	.+10     	; 0x2002 <pushButtonGetStatus+0x36>
    1ff8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffa:	9c 81       	ldd	r25, Y+4	; 0x04
    1ffc:	00 97       	sbiw	r24, 0x00	; 0
    1ffe:	61 f0       	breq	.+24     	; 0x2018 <pushButtonGetStatus+0x4c>
    2000:	43 c0       	rjmp	.+134    	; 0x2088 <pushButtonGetStatus+0xbc>
    2002:	2b 81       	ldd	r18, Y+3	; 0x03
    2004:	3c 81       	ldd	r19, Y+4	; 0x04
    2006:	22 30       	cpi	r18, 0x02	; 2
    2008:	31 05       	cpc	r19, r1
    200a:	c1 f1       	breq	.+112    	; 0x207c <pushButtonGetStatus+0xb0>
    200c:	8b 81       	ldd	r24, Y+3	; 0x03
    200e:	9c 81       	ldd	r25, Y+4	; 0x04
    2010:	83 30       	cpi	r24, 0x03	; 3
    2012:	91 05       	cpc	r25, r1
    2014:	b1 f1       	breq	.+108    	; 0x2082 <pushButtonGetStatus+0xb6>
    2016:	38 c0       	rjmp	.+112    	; 0x2088 <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	60 e1       	ldi	r22, 0x10	; 16
    201c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <gpioPinRead>
    2020:	88 23       	and	r24, r24
    2022:	89 f0       	breq	.+34     	; 0x2046 <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
    2024:	64 e1       	ldi	r22, 0x14	; 20
    2026:	70 e0       	ldi	r23, 0x00	; 0
    2028:	80 e0       	ldi	r24, 0x00	; 0
    202a:	90 e0       	ldi	r25, 0x00	; 0
    202c:	0e 94 26 11 	call	0x224c	; 0x224c <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    2030:	82 e0       	ldi	r24, 0x02	; 2
    2032:	60 e1       	ldi	r22, 0x10	; 16
    2034:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <gpioPinRead>
    2038:	88 23       	and	r24, r24
    203a:	19 f0       	breq	.+6      	; 0x2042 <pushButtonGetStatus+0x76>
			{
				return Pressed;
    203c:	92 e0       	ldi	r25, 0x02	; 2
    203e:	9a 83       	std	Y+2, r25	; 0x02
    2040:	25 c0       	rjmp	.+74     	; 0x208c <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    2042:	1a 82       	std	Y+2, r1	; 0x02
    2044:	23 c0       	rjmp	.+70     	; 0x208c <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    2046:	1a 82       	std	Y+2, r1	; 0x02
    2048:	21 c0       	rjmp	.+66     	; 0x208c <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	64 e0       	ldi	r22, 0x04	; 4
    204e:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <gpioPinRead>
    2052:	88 23       	and	r24, r24
    2054:	89 f0       	breq	.+34     	; 0x2078 <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
    2056:	64 e1       	ldi	r22, 0x14	; 20
    2058:	70 e0       	ldi	r23, 0x00	; 0
    205a:	80 e0       	ldi	r24, 0x00	; 0
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 26 11 	call	0x224c	; 0x224c <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    2062:	81 e0       	ldi	r24, 0x01	; 1
    2064:	64 e0       	ldi	r22, 0x04	; 4
    2066:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <gpioPinRead>
    206a:	88 23       	and	r24, r24
    206c:	19 f0       	breq	.+6      	; 0x2074 <pushButtonGetStatus+0xa8>
			{
				return Pressed;
    206e:	22 e0       	ldi	r18, 0x02	; 2
    2070:	2a 83       	std	Y+2, r18	; 0x02
    2072:	0c c0       	rjmp	.+24     	; 0x208c <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    2074:	1a 82       	std	Y+2, r1	; 0x02
    2076:	0a c0       	rjmp	.+20     	; 0x208c <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    2078:	1a 82       	std	Y+2, r1	; 0x02
    207a:	08 c0       	rjmp	.+16     	; 0x208c <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
    207c:	3f ef       	ldi	r19, 0xFF	; 255
    207e:	3a 83       	std	Y+2, r19	; 0x02
    2080:	05 c0       	rjmp	.+10     	; 0x208c <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
    2082:	8f ef       	ldi	r24, 0xFF	; 255
    2084:	8a 83       	std	Y+2, r24	; 0x02
    2086:	02 c0       	rjmp	.+4      	; 0x208c <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
    2088:	9f ef       	ldi	r25, 0xFF	; 255
    208a:	9a 83       	std	Y+2, r25	; 0x02
    208c:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    208e:	0f 90       	pop	r0
    2090:	0f 90       	pop	r0
    2092:	0f 90       	pop	r0
    2094:	0f 90       	pop	r0
    2096:	cf 91       	pop	r28
    2098:	df 91       	pop	r29
    209a:	08 95       	ret

0000209c <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    209c:	df 93       	push	r29
    209e:	cf 93       	push	r28
    20a0:	00 d0       	rcall	.+0      	; 0x20a2 <sevenSegInit+0x6>
    20a2:	0f 92       	push	r0
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
    20aa:	89 81       	ldd	r24, Y+1	; 0x01
    20ac:	28 2f       	mov	r18, r24
    20ae:	30 e0       	ldi	r19, 0x00	; 0
    20b0:	3b 83       	std	Y+3, r19	; 0x03
    20b2:	2a 83       	std	Y+2, r18	; 0x02
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	00 97       	sbiw	r24, 0x00	; 0
    20ba:	31 f0       	breq	.+12     	; 0x20c8 <sevenSegInit+0x2c>
    20bc:	2a 81       	ldd	r18, Y+2	; 0x02
    20be:	3b 81       	ldd	r19, Y+3	; 0x03
    20c0:	21 30       	cpi	r18, 0x01	; 1
    20c2:	31 05       	cpc	r19, r1
    20c4:	c9 f0       	breq	.+50     	; 0x20f8 <sevenSegInit+0x5c>
    20c6:	2f c0       	rjmp	.+94     	; 0x2126 <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    20c8:	81 e0       	ldi	r24, 0x01	; 1
    20ca:	6f e0       	ldi	r22, 0x0F	; 15
    20cc:	4f ef       	ldi	r20, 0xFF	; 255
    20ce:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    20d2:	83 e0       	ldi	r24, 0x03	; 3
    20d4:	64 e1       	ldi	r22, 0x14	; 20
    20d6:	4f ef       	ldi	r20, 0xFF	; 255
    20d8:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    20dc:	81 e0       	ldi	r24, 0x01	; 1
    20de:	6f e0       	ldi	r22, 0x0F	; 15
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    20e6:	83 e0       	ldi	r24, 0x03	; 3
    20e8:	60 e1       	ldi	r22, 0x10	; 16
    20ea:	40 e0       	ldi	r20, 0x00	; 0
    20ec:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		sevenSegDisable(SEG_0);
    20f0:	80 e0       	ldi	r24, 0x00	; 0
    20f2:	0e 94 c6 10 	call	0x218c	; 0x218c <sevenSegDisable>
    20f6:	17 c0       	rjmp	.+46     	; 0x2126 <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	6f e0       	ldi	r22, 0x0F	; 15
    20fc:	4f ef       	ldi	r20, 0xFF	; 255
    20fe:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    2102:	83 e0       	ldi	r24, 0x03	; 3
    2104:	68 e1       	ldi	r22, 0x18	; 24
    2106:	4f ef       	ldi	r20, 0xFF	; 255
    2108:	0e 94 d6 09 	call	0x13ac	; 0x13ac <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	6f e0       	ldi	r22, 0x0F	; 15
    2110:	40 e0       	ldi	r20, 0x00	; 0
    2112:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    2116:	83 e0       	ldi	r24, 0x03	; 3
    2118:	60 e1       	ldi	r22, 0x10	; 16
    211a:	40 e0       	ldi	r20, 0x00	; 0
    211c:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		sevenSegDisable(SEG_1);
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	0e 94 c6 10 	call	0x218c	; 0x218c <sevenSegDisable>
		break;
	}
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	cf 91       	pop	r28
    212e:	df 91       	pop	r29
    2130:	08 95       	ret

00002132 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    2132:	df 93       	push	r29
    2134:	cf 93       	push	r28
    2136:	00 d0       	rcall	.+0      	; 0x2138 <sevenSegEnable+0x6>
    2138:	0f 92       	push	r0
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
    213e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    2140:	89 81       	ldd	r24, Y+1	; 0x01
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	3b 83       	std	Y+3, r19	; 0x03
    2148:	2a 83       	std	Y+2, r18	; 0x02
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	00 97       	sbiw	r24, 0x00	; 0
    2150:	31 f0       	breq	.+12     	; 0x215e <sevenSegEnable+0x2c>
    2152:	2a 81       	ldd	r18, Y+2	; 0x02
    2154:	3b 81       	ldd	r19, Y+3	; 0x03
    2156:	21 30       	cpi	r18, 0x01	; 1
    2158:	31 05       	cpc	r19, r1
    215a:	51 f0       	breq	.+20     	; 0x2170 <sevenSegEnable+0x3e>
    215c:	11 c0       	rjmp	.+34     	; 0x2180 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    215e:	83 e0       	ldi	r24, 0x03	; 3
    2160:	64 e0       	ldi	r22, 0x04	; 4
    2162:	40 e0       	ldi	r20, 0x00	; 0
    2164:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    2168:	8f ef       	ldi	r24, 0xFF	; 255
    216a:	80 93 74 01 	sts	0x0174, r24
    216e:	08 c0       	rjmp	.+16     	; 0x2180 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	68 e0       	ldi	r22, 0x08	; 8
    2174:	40 e0       	ldi	r20, 0x00	; 0
    2176:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    217a:	8f ef       	ldi	r24, 0xFF	; 255
    217c:	80 93 68 01 	sts	0x0168, r24
		break;
	}
}
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	0f 90       	pop	r0
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	08 95       	ret

0000218c <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	00 d0       	rcall	.+0      	; 0x2192 <sevenSegDisable+0x6>
    2192:	0f 92       	push	r0
    2194:	cd b7       	in	r28, 0x3d	; 61
    2196:	de b7       	in	r29, 0x3e	; 62
    2198:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	28 2f       	mov	r18, r24
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	3b 83       	std	Y+3, r19	; 0x03
    21a2:	2a 83       	std	Y+2, r18	; 0x02
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	9b 81       	ldd	r25, Y+3	; 0x03
    21a8:	00 97       	sbiw	r24, 0x00	; 0
    21aa:	31 f0       	breq	.+12     	; 0x21b8 <sevenSegDisable+0x2c>
    21ac:	2a 81       	ldd	r18, Y+2	; 0x02
    21ae:	3b 81       	ldd	r19, Y+3	; 0x03
    21b0:	21 30       	cpi	r18, 0x01	; 1
    21b2:	31 05       	cpc	r19, r1
    21b4:	49 f0       	breq	.+18     	; 0x21c8 <sevenSegDisable+0x3c>
    21b6:	0f c0       	rjmp	.+30     	; 0x21d6 <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	64 e0       	ldi	r22, 0x04	; 4
    21bc:	4f ef       	ldi	r20, 0xFF	; 255
    21be:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    21c2:	10 92 74 01 	sts	0x0174, r1
    21c6:	07 c0       	rjmp	.+14     	; 0x21d6 <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    21c8:	83 e0       	ldi	r24, 0x03	; 3
    21ca:	68 e0       	ldi	r22, 0x08	; 8
    21cc:	4f ef       	ldi	r20, 0xFF	; 255
    21ce:	0e 94 42 0a 	call	0x1484	; 0x1484 <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    21d2:	10 92 68 01 	sts	0x0168, r1
		break;
	}
}
    21d6:	0f 90       	pop	r0
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	cf 91       	pop	r28
    21de:	df 91       	pop	r29
    21e0:	08 95       	ret

000021e2 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    21e2:	df 93       	push	r29
    21e4:	cf 93       	push	r28
    21e6:	00 d0       	rcall	.+0      	; 0x21e8 <sevenSegWrite+0x6>
    21e8:	00 d0       	rcall	.+0      	; 0x21ea <sevenSegWrite+0x8>
    21ea:	cd b7       	in	r28, 0x3d	; 61
    21ec:	de b7       	in	r29, 0x3e	; 62
    21ee:	89 83       	std	Y+1, r24	; 0x01
    21f0:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    21f2:	89 81       	ldd	r24, Y+1	; 0x01
    21f4:	28 2f       	mov	r18, r24
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	3c 83       	std	Y+4, r19	; 0x04
    21fa:	2b 83       	std	Y+3, r18	; 0x03
    21fc:	8b 81       	ldd	r24, Y+3	; 0x03
    21fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2200:	00 97       	sbiw	r24, 0x00	; 0
    2202:	31 f0       	breq	.+12     	; 0x2210 <sevenSegWrite+0x2e>
    2204:	2b 81       	ldd	r18, Y+3	; 0x03
    2206:	3c 81       	ldd	r19, Y+4	; 0x04
    2208:	21 30       	cpi	r18, 0x01	; 1
    220a:	31 05       	cpc	r19, r1
    220c:	69 f0       	breq	.+26     	; 0x2228 <sevenSegWrite+0x46>
    220e:	17 c0       	rjmp	.+46     	; 0x223e <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    2210:	80 91 74 01 	lds	r24, 0x0174
    2214:	8f 3f       	cpi	r24, 0xFF	; 255
    2216:	99 f4       	brne	.+38     	; 0x223e <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    2218:	8a 81       	ldd	r24, Y+2	; 0x02
    221a:	98 2f       	mov	r25, r24
    221c:	9f 70       	andi	r25, 0x0F	; 15
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	69 2f       	mov	r22, r25
    2222:	0e 94 06 09 	call	0x120c	; 0x120c <gpioPortWrite>
    2226:	0b c0       	rjmp	.+22     	; 0x223e <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    2228:	80 91 68 01 	lds	r24, 0x0168
    222c:	8f 3f       	cpi	r24, 0xFF	; 255
    222e:	39 f4       	brne	.+14     	; 0x223e <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	98 2f       	mov	r25, r24
    2234:	9f 70       	andi	r25, 0x0F	; 15
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	69 2f       	mov	r22, r25
    223a:	0e 94 06 09 	call	0x120c	; 0x120c <gpioPortWrite>
		}
		break;
	}
}
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
    2254:	60 97       	sbiw	r28, 0x10	; 16
    2256:	0f b6       	in	r0, 0x3f	; 63
    2258:	f8 94       	cli
    225a:	de bf       	out	0x3e, r29	; 62
    225c:	0f be       	out	0x3f, r0	; 63
    225e:	cd bf       	out	0x3d, r28	; 61
    2260:	6d 87       	std	Y+13, r22	; 0x0d
    2262:	7e 87       	std	Y+14, r23	; 0x0e
    2264:	8f 87       	std	Y+15, r24	; 0x0f
    2266:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=380, i, j;
    2268:	8c e7       	ldi	r24, 0x7C	; 124
    226a:	91 e0       	ldi	r25, 0x01	; 1
    226c:	a0 e0       	ldi	r26, 0x00	; 0
    226e:	b0 e0       	ldi	r27, 0x00	; 0
    2270:	89 87       	std	Y+9, r24	; 0x09
    2272:	9a 87       	std	Y+10, r25	; 0x0a
    2274:	ab 87       	std	Y+11, r26	; 0x0b
    2276:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    2278:	1d 82       	std	Y+5, r1	; 0x05
    227a:	1e 82       	std	Y+6, r1	; 0x06
    227c:	1f 82       	std	Y+7, r1	; 0x07
    227e:	18 86       	std	Y+8, r1	; 0x08
    2280:	28 c0       	rjmp	.+80     	; 0x22d2 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    2282:	19 82       	std	Y+1, r1	; 0x01
    2284:	1a 82       	std	Y+2, r1	; 0x02
    2286:	1b 82       	std	Y+3, r1	; 0x03
    2288:	1c 82       	std	Y+4, r1	; 0x04
    228a:	0b c0       	rjmp	.+22     	; 0x22a2 <softwareDelayMs+0x56>
    228c:	89 81       	ldd	r24, Y+1	; 0x01
    228e:	9a 81       	ldd	r25, Y+2	; 0x02
    2290:	ab 81       	ldd	r26, Y+3	; 0x03
    2292:	bc 81       	ldd	r27, Y+4	; 0x04
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	a1 1d       	adc	r26, r1
    2298:	b1 1d       	adc	r27, r1
    229a:	89 83       	std	Y+1, r24	; 0x01
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	ab 83       	std	Y+3, r26	; 0x03
    22a0:	bc 83       	std	Y+4, r27	; 0x04
    22a2:	29 81       	ldd	r18, Y+1	; 0x01
    22a4:	3a 81       	ldd	r19, Y+2	; 0x02
    22a6:	4b 81       	ldd	r20, Y+3	; 0x03
    22a8:	5c 81       	ldd	r21, Y+4	; 0x04
    22aa:	89 85       	ldd	r24, Y+9	; 0x09
    22ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    22ae:	ab 85       	ldd	r26, Y+11	; 0x0b
    22b0:	bc 85       	ldd	r27, Y+12	; 0x0c
    22b2:	28 17       	cp	r18, r24
    22b4:	39 07       	cpc	r19, r25
    22b6:	4a 07       	cpc	r20, r26
    22b8:	5b 07       	cpc	r21, r27
    22ba:	40 f3       	brcs	.-48     	; 0x228c <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=380, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    22bc:	8d 81       	ldd	r24, Y+5	; 0x05
    22be:	9e 81       	ldd	r25, Y+6	; 0x06
    22c0:	af 81       	ldd	r26, Y+7	; 0x07
    22c2:	b8 85       	ldd	r27, Y+8	; 0x08
    22c4:	01 96       	adiw	r24, 0x01	; 1
    22c6:	a1 1d       	adc	r26, r1
    22c8:	b1 1d       	adc	r27, r1
    22ca:	8d 83       	std	Y+5, r24	; 0x05
    22cc:	9e 83       	std	Y+6, r25	; 0x06
    22ce:	af 83       	std	Y+7, r26	; 0x07
    22d0:	b8 87       	std	Y+8, r27	; 0x08
    22d2:	2d 81       	ldd	r18, Y+5	; 0x05
    22d4:	3e 81       	ldd	r19, Y+6	; 0x06
    22d6:	4f 81       	ldd	r20, Y+7	; 0x07
    22d8:	58 85       	ldd	r21, Y+8	; 0x08
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	af 85       	ldd	r26, Y+15	; 0x0f
    22e0:	b8 89       	ldd	r27, Y+16	; 0x10
    22e2:	28 17       	cp	r18, r24
    22e4:	39 07       	cpc	r19, r25
    22e6:	4a 07       	cpc	r20, r26
    22e8:	5b 07       	cpc	r21, r27
    22ea:	58 f2       	brcs	.-106    	; 0x2282 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    22ec:	60 96       	adiw	r28, 0x10	; 16
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	cf 91       	pop	r28
    22fa:	df 91       	pop	r29
    22fc:	08 95       	ret

000022fe <timer0Init>:
static uint8_t gu8_timer2PreScaler = 0;

/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    22fe:	ef 92       	push	r14
    2300:	0f 93       	push	r16
    2302:	df 93       	push	r29
    2304:	cf 93       	push	r28
    2306:	00 d0       	rcall	.+0      	; 0x2308 <timer0Init+0xa>
    2308:	00 d0       	rcall	.+0      	; 0x230a <timer0Init+0xc>
    230a:	00 d0       	rcall	.+0      	; 0x230c <timer0Init+0xe>
    230c:	cd b7       	in	r28, 0x3d	; 61
    230e:	de b7       	in	r29, 0x3e	; 62
    2310:	89 83       	std	Y+1, r24	; 0x01
    2312:	6a 83       	std	Y+2, r22	; 0x02
    2314:	4b 83       	std	Y+3, r20	; 0x03
    2316:	2c 83       	std	Y+4, r18	; 0x04
    2318:	0d 83       	std	Y+5, r16	; 0x05
    231a:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    231c:	a3 e5       	ldi	r26, 0x53	; 83
    231e:	b0 e0       	ldi	r27, 0x00	; 0
    2320:	e3 e5       	ldi	r30, 0x53	; 83
    2322:	f0 e0       	ldi	r31, 0x00	; 0
    2324:	80 81       	ld	r24, Z
    2326:	80 68       	ori	r24, 0x80	; 128
    2328:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    232a:	a3 e5       	ldi	r26, 0x53	; 83
    232c:	b0 e0       	ldi	r27, 0x00	; 0
    232e:	e3 e5       	ldi	r30, 0x53	; 83
    2330:	f0 e0       	ldi	r31, 0x00	; 0
    2332:	80 81       	ld	r24, Z
    2334:	98 2f       	mov	r25, r24
    2336:	97 7b       	andi	r25, 0xB7	; 183
    2338:	89 81       	ldd	r24, Y+1	; 0x01
    233a:	89 2b       	or	r24, r25
    233c:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    233e:	a3 e5       	ldi	r26, 0x53	; 83
    2340:	b0 e0       	ldi	r27, 0x00	; 0
    2342:	e3 e5       	ldi	r30, 0x53	; 83
    2344:	f0 e0       	ldi	r31, 0x00	; 0
    2346:	80 81       	ld	r24, Z
    2348:	98 2f       	mov	r25, r24
    234a:	9f 7c       	andi	r25, 0xCF	; 207
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	89 2b       	or	r24, r25
    2350:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    2352:	8b 81       	ldd	r24, Y+3	; 0x03
    2354:	80 93 75 01 	sts	0x0175, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    2358:	e2 e5       	ldi	r30, 0x52	; 82
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	8c 81       	ldd	r24, Y+4	; 0x04
    235e:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    2360:	ec e5       	ldi	r30, 0x5C	; 92
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	8d 81       	ldd	r24, Y+5	; 0x05
    2366:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    2368:	a9 e5       	ldi	r26, 0x59	; 89
    236a:	b0 e0       	ldi	r27, 0x00	; 0
    236c:	e9 e5       	ldi	r30, 0x59	; 89
    236e:	f0 e0       	ldi	r31, 0x00	; 0
    2370:	80 81       	ld	r24, Z
    2372:	98 2f       	mov	r25, r24
    2374:	9c 7f       	andi	r25, 0xFC	; 252
    2376:	8e 81       	ldd	r24, Y+6	; 0x06
    2378:	89 2b       	or	r24, r25
    237a:	8c 93       	st	X, r24
}
    237c:	26 96       	adiw	r28, 0x06	; 6
    237e:	0f b6       	in	r0, 0x3f	; 63
    2380:	f8 94       	cli
    2382:	de bf       	out	0x3e, r29	; 62
    2384:	0f be       	out	0x3f, r0	; 63
    2386:	cd bf       	out	0x3d, r28	; 61
    2388:	cf 91       	pop	r28
    238a:	df 91       	pop	r29
    238c:	0f 91       	pop	r16
    238e:	ef 90       	pop	r14
    2390:	08 95       	ret

00002392 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    2392:	df 93       	push	r29
    2394:	cf 93       	push	r28
    2396:	0f 92       	push	r0
    2398:	cd b7       	in	r28, 0x3d	; 61
    239a:	de b7       	in	r29, 0x3e	; 62
    239c:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    239e:	e2 e5       	ldi	r30, 0x52	; 82
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	89 81       	ldd	r24, Y+1	; 0x01
    23a4:	80 83       	st	Z, r24
}
    23a6:	0f 90       	pop	r0
    23a8:	cf 91       	pop	r28
    23aa:	df 91       	pop	r29
    23ac:	08 95       	ret

000023ae <timer0Read>:

uint8_t timer0Read(void)
{
    23ae:	df 93       	push	r29
    23b0:	cf 93       	push	r28
    23b2:	cd b7       	in	r28, 0x3d	; 61
    23b4:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    23b6:	e2 e5       	ldi	r30, 0x52	; 82
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
}
    23bc:	cf 91       	pop	r28
    23be:	df 91       	pop	r29
    23c0:	08 95       	ret

000023c2 <timer0Start>:

void timer0Start(void)
{
    23c2:	df 93       	push	r29
    23c4:	cf 93       	push	r28
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    23ca:	a3 e5       	ldi	r26, 0x53	; 83
    23cc:	b0 e0       	ldi	r27, 0x00	; 0
    23ce:	e3 e5       	ldi	r30, 0x53	; 83
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	80 81       	ld	r24, Z
    23d4:	98 2f       	mov	r25, r24
    23d6:	98 7f       	andi	r25, 0xF8	; 248
    23d8:	80 91 75 01 	lds	r24, 0x0175
    23dc:	89 2b       	or	r24, r25
    23de:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    23e0:	e2 e5       	ldi	r30, 0x52	; 82
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	10 82       	st	Z, r1
}
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <timer0Stop>:

void timer0Stop(void)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    23f4:	a3 e5       	ldi	r26, 0x53	; 83
    23f6:	b0 e0       	ldi	r27, 0x00	; 0
    23f8:	e3 e5       	ldi	r30, 0x53	; 83
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	88 7f       	andi	r24, 0xF8	; 248
    2400:	8c 93       	st	X, r24
}
    2402:	cf 91       	pop	r28
    2404:	df 91       	pop	r29
    2406:	08 95       	ret

00002408 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    2408:	ef 92       	push	r14
    240a:	0f 93       	push	r16
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <timer0DelayMs+0xa>
    2412:	00 d0       	rcall	.+0      	; 0x2414 <timer0DelayMs+0xc>
    2414:	0f 92       	push	r0
    2416:	cd b7       	in	r28, 0x3d	; 61
    2418:	de b7       	in	r29, 0x3e	; 62
    241a:	9d 83       	std	Y+5, r25	; 0x05
    241c:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    241e:	1b 82       	std	Y+3, r1	; 0x03
    2420:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    2422:	8a ef       	ldi	r24, 0xFA	; 250
    2424:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    2426:	80 e0       	ldi	r24, 0x00	; 0
    2428:	60 e0       	ldi	r22, 0x00	; 0
    242a:	43 e0       	ldi	r20, 0x03	; 3
    242c:	20 e0       	ldi	r18, 0x00	; 0
    242e:	00 e0       	ldi	r16, 0x00	; 0
    2430:	ee 24       	eor	r14, r14
    2432:	0e 94 7f 11 	call	0x22fe	; 0x22fe <timer0Init>
	timer0Start();
    2436:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    243a:	1b 82       	std	Y+3, r1	; 0x03
    243c:	1a 82       	std	Y+2, r1	; 0x02
    243e:	0e c0       	rjmp	.+28     	; 0x245c <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    2440:	e2 e5       	ldi	r30, 0x52	; 82
    2442:	f0 e0       	ldi	r31, 0x00	; 0
    2444:	90 81       	ld	r25, Z
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	98 17       	cp	r25, r24
    244a:	d0 f3       	brcs	.-12     	; 0x2440 <timer0DelayMs+0x38>
		TCNT0 = 0;
    244c:	e2 e5       	ldi	r30, 0x52	; 82
    244e:	f0 e0       	ldi	r31, 0x00	; 0
    2450:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    2452:	8a 81       	ldd	r24, Y+2	; 0x02
    2454:	9b 81       	ldd	r25, Y+3	; 0x03
    2456:	01 96       	adiw	r24, 0x01	; 1
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
    245c:	2a 81       	ldd	r18, Y+2	; 0x02
    245e:	3b 81       	ldd	r19, Y+3	; 0x03
    2460:	8c 81       	ldd	r24, Y+4	; 0x04
    2462:	9d 81       	ldd	r25, Y+5	; 0x05
    2464:	28 17       	cp	r18, r24
    2466:	39 07       	cpc	r19, r25
    2468:	58 f3       	brcs	.-42     	; 0x2440 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    246a:	0f 90       	pop	r0
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	cf 91       	pop	r28
    2476:	df 91       	pop	r29
    2478:	0f 91       	pop	r16
    247a:	ef 90       	pop	r14
    247c:	08 95       	ret

0000247e <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    247e:	ef 92       	push	r14
    2480:	0f 93       	push	r16
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	29 97       	sbiw	r28, 0x09	; 9
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	6e 83       	std	Y+6, r22	; 0x06
    2498:	7f 83       	std	Y+7, r23	; 0x07
    249a:	88 87       	std	Y+8, r24	; 0x08
    249c:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    249e:	1a 82       	std	Y+2, r1	; 0x02
    24a0:	1b 82       	std	Y+3, r1	; 0x03
    24a2:	1c 82       	std	Y+4, r1	; 0x04
    24a4:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    24a6:	80 e1       	ldi	r24, 0x10	; 16
    24a8:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    24aa:	88 e0       	ldi	r24, 0x08	; 8
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	41 e0       	ldi	r20, 0x01	; 1
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	09 81       	ldd	r16, Y+1	; 0x01
    24b4:	ee 24       	eor	r14, r14
    24b6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <timer0Init>
	timer0Start();
    24ba:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    24be:	1a 82       	std	Y+2, r1	; 0x02
    24c0:	1b 82       	std	Y+3, r1	; 0x03
    24c2:	1c 82       	std	Y+4, r1	; 0x04
    24c4:	1d 82       	std	Y+5, r1	; 0x05
    24c6:	1e c0       	rjmp	.+60     	; 0x2504 <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    24c8:	e8 e5       	ldi	r30, 0x58	; 88
    24ca:	f0 e0       	ldi	r31, 0x00	; 0
    24cc:	80 81       	ld	r24, Z
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	82 70       	andi	r24, 0x02	; 2
    24d4:	90 70       	andi	r25, 0x00	; 0
    24d6:	00 97       	sbiw	r24, 0x00	; 0
    24d8:	b9 f3       	breq	.-18     	; 0x24c8 <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    24da:	a8 e5       	ldi	r26, 0x58	; 88
    24dc:	b0 e0       	ldi	r27, 0x00	; 0
    24de:	e8 e5       	ldi	r30, 0x58	; 88
    24e0:	f0 e0       	ldi	r31, 0x00	; 0
    24e2:	80 81       	ld	r24, Z
    24e4:	82 60       	ori	r24, 0x02	; 2
    24e6:	8c 93       	st	X, r24
		TCNT0 = 0;
    24e8:	e2 e5       	ldi	r30, 0x52	; 82
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	ac 81       	ldd	r26, Y+4	; 0x04
    24f4:	bd 81       	ldd	r27, Y+5	; 0x05
    24f6:	01 96       	adiw	r24, 0x01	; 1
    24f8:	a1 1d       	adc	r26, r1
    24fa:	b1 1d       	adc	r27, r1
    24fc:	8a 83       	std	Y+2, r24	; 0x02
    24fe:	9b 83       	std	Y+3, r25	; 0x03
    2500:	ac 83       	std	Y+4, r26	; 0x04
    2502:	bd 83       	std	Y+5, r27	; 0x05
    2504:	2a 81       	ldd	r18, Y+2	; 0x02
    2506:	3b 81       	ldd	r19, Y+3	; 0x03
    2508:	4c 81       	ldd	r20, Y+4	; 0x04
    250a:	5d 81       	ldd	r21, Y+5	; 0x05
    250c:	8e 81       	ldd	r24, Y+6	; 0x06
    250e:	9f 81       	ldd	r25, Y+7	; 0x07
    2510:	a8 85       	ldd	r26, Y+8	; 0x08
    2512:	b9 85       	ldd	r27, Y+9	; 0x09
    2514:	28 17       	cp	r18, r24
    2516:	39 07       	cpc	r19, r25
    2518:	4a 07       	cpc	r20, r26
    251a:	5b 07       	cpc	r21, r27
    251c:	a8 f2       	brcs	.-86     	; 0x24c8 <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    251e:	29 96       	adiw	r28, 0x09	; 9
    2520:	0f b6       	in	r0, 0x3f	; 63
    2522:	f8 94       	cli
    2524:	de bf       	out	0x3e, r29	; 62
    2526:	0f be       	out	0x3f, r0	; 63
    2528:	cd bf       	out	0x3d, r28	; 61
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	0f 91       	pop	r16
    2530:	ef 90       	pop	r14
    2532:	08 95       	ret

00002534 <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2534:	ef 92       	push	r14
    2536:	0f 93       	push	r16
    2538:	df 93       	push	r29
    253a:	cf 93       	push	r28
    253c:	00 d0       	rcall	.+0      	; 0x253e <timer0SwPWM+0xa>
    253e:	00 d0       	rcall	.+0      	; 0x2540 <timer0SwPWM+0xc>
    2540:	cd b7       	in	r28, 0x3d	; 61
    2542:	de b7       	in	r29, 0x3e	; 62
    2544:	8b 83       	std	Y+3, r24	; 0x03
    2546:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    2548:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    254a:	8c 81       	ldd	r24, Y+4	; 0x04
    254c:	81 35       	cpi	r24, 0x51	; 81
    254e:	e8 f4       	brcc	.+58     	; 0x258a <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2554:	8c 81       	ldd	r24, Y+4	; 0x04
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	a0 e0       	ldi	r26, 0x00	; 0
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	39 e1       	ldi	r19, 0x19	; 25
    2562:	40 e0       	ldi	r20, 0x00	; 0
    2564:	50 e0       	ldi	r21, 0x00	; 0
    2566:	bc 01       	movw	r22, r24
    2568:	cd 01       	movw	r24, r26
    256a:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    256e:	9b 01       	movw	r18, r22
    2570:	ac 01       	movw	r20, r24
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	94 e2       	ldi	r25, 0x24	; 36
    2576:	a4 ef       	ldi	r26, 0xF4	; 244
    2578:	b0 e0       	ldi	r27, 0x00	; 0
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    2582:	da 01       	movw	r26, r20
    2584:	c9 01       	movw	r24, r18
    2586:	8a 83       	std	Y+2, r24	; 0x02
    2588:	1c c0       	rjmp	.+56     	; 0x25c2 <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	88 2f       	mov	r24, r24
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e0       	ldi	r27, 0x00	; 0
    2598:	20 e2       	ldi	r18, 0x20	; 32
    259a:	33 e0       	ldi	r19, 0x03	; 3
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	bc 01       	movw	r22, r24
    25a2:	cd 01       	movw	r24, r26
    25a4:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    25a8:	9b 01       	movw	r18, r22
    25aa:	ac 01       	movw	r20, r24
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	94 e2       	ldi	r25, 0x24	; 36
    25b0:	a4 ef       	ldi	r26, 0xF4	; 244
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    25bc:	da 01       	movw	r26, r20
    25be:	c9 01       	movw	r24, r18
    25c0:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    25c2:	88 e0       	ldi	r24, 0x08	; 8
    25c4:	60 e0       	ldi	r22, 0x00	; 0
    25c6:	49 81       	ldd	r20, Y+1	; 0x01
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	0a 81       	ldd	r16, Y+2	; 0x02
    25cc:	ee 24       	eor	r14, r14
    25ce:	68 94       	set
    25d0:	e1 f8       	bld	r14, 1
    25d2:	0e 94 7f 11 	call	0x22fe	; 0x22fe <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    25d6:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <timer0Start>
}
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	0f 91       	pop	r16
    25e8:	ef 90       	pop	r14
    25ea:	08 95       	ret

000025ec <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    25ec:	af 92       	push	r10
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	cd b7       	in	r28, 0x3d	; 61
    2600:	de b7       	in	r29, 0x3e	; 62
    2602:	2d 97       	sbiw	r28, 0x0d	; 13
    2604:	0f b6       	in	r0, 0x3f	; 63
    2606:	f8 94       	cli
    2608:	de bf       	out	0x3e, r29	; 62
    260a:	0f be       	out	0x3f, r0	; 63
    260c:	cd bf       	out	0x3d, r28	; 61
    260e:	89 83       	std	Y+1, r24	; 0x01
    2610:	7b 83       	std	Y+3, r23	; 0x03
    2612:	6a 83       	std	Y+2, r22	; 0x02
    2614:	4c 83       	std	Y+4, r20	; 0x04
    2616:	3e 83       	std	Y+6, r19	; 0x06
    2618:	2d 83       	std	Y+5, r18	; 0x05
    261a:	18 87       	std	Y+8, r17	; 0x08
    261c:	0f 83       	std	Y+7, r16	; 0x07
    261e:	fa 86       	std	Y+10, r15	; 0x0a
    2620:	e9 86       	std	Y+9, r14	; 0x09
    2622:	dc 86       	std	Y+12, r13	; 0x0c
    2624:	cb 86       	std	Y+11, r12	; 0x0b
    2626:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    2628:	af e4       	ldi	r26, 0x4F	; 79
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ef e4       	ldi	r30, 0x4F	; 79
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	88 60       	ori	r24, 0x08	; 8
    2634:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    2636:	af e4       	ldi	r26, 0x4F	; 79
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	ef e4       	ldi	r30, 0x4F	; 79
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	80 81       	ld	r24, Z
    2640:	84 60       	ori	r24, 0x04	; 4
    2642:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    2644:	ee e4       	ldi	r30, 0x4E	; 78
    2646:	f0 e0       	ldi	r31, 0x00	; 0
    2648:	11 82       	std	Z+1, r1	; 0x01
    264a:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    264c:	ee e4       	ldi	r30, 0x4E	; 78
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	89 81       	ldd	r24, Y+1	; 0x01
    2652:	28 2f       	mov	r18, r24
    2654:	30 e0       	ldi	r19, 0x00	; 0
    2656:	8a 81       	ldd	r24, Y+2	; 0x02
    2658:	9b 81       	ldd	r25, Y+3	; 0x03
    265a:	82 2b       	or	r24, r18
    265c:	93 2b       	or	r25, r19
    265e:	91 83       	std	Z+1, r25	; 0x01
    2660:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    2662:	8c 81       	ldd	r24, Y+4	; 0x04
    2664:	80 93 75 01 	sts	0x0175, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    2668:	ec e4       	ldi	r30, 0x4C	; 76
    266a:	f0 e0       	ldi	r31, 0x00	; 0
    266c:	8d 81       	ldd	r24, Y+5	; 0x05
    266e:	9e 81       	ldd	r25, Y+6	; 0x06
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    2674:	ea e4       	ldi	r30, 0x4A	; 74
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	8f 81       	ldd	r24, Y+7	; 0x07
    267a:	98 85       	ldd	r25, Y+8	; 0x08
    267c:	91 83       	std	Z+1, r25	; 0x01
    267e:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    2680:	e8 e4       	ldi	r30, 0x48	; 72
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	89 85       	ldd	r24, Y+9	; 0x09
    2686:	9a 85       	ldd	r25, Y+10	; 0x0a
    2688:	91 83       	std	Z+1, r25	; 0x01
    268a:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    268c:	a9 e5       	ldi	r26, 0x59	; 89
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e9 e5       	ldi	r30, 0x59	; 89
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 81       	ld	r24, Z
    2696:	98 2f       	mov	r25, r24
    2698:	93 7c       	andi	r25, 0xC3	; 195
    269a:	8d 85       	ldd	r24, Y+13	; 0x0d
    269c:	89 2b       	or	r24, r25
    269e:	8c 93       	st	X, r24
}
    26a0:	2d 96       	adiw	r28, 0x0d	; 13
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	ff 90       	pop	r15
    26b6:	ef 90       	pop	r14
    26b8:	df 90       	pop	r13
    26ba:	cf 90       	pop	r12
    26bc:	af 90       	pop	r10
    26be:	08 95       	ret

000026c0 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    26c0:	df 93       	push	r29
    26c2:	cf 93       	push	r28
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <timer1Set+0x6>
    26c6:	cd b7       	in	r28, 0x3d	; 61
    26c8:	de b7       	in	r29, 0x3e	; 62
    26ca:	9a 83       	std	Y+2, r25	; 0x02
    26cc:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    26ce:	ec e4       	ldi	r30, 0x4C	; 76
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	9a 81       	ldd	r25, Y+2	; 0x02
    26d6:	91 83       	std	Z+1, r25	; 0x01
    26d8:	80 83       	st	Z, r24
}
    26da:	0f 90       	pop	r0
    26dc:	0f 90       	pop	r0
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <timer1Read>:

uint16_t timer1Read(void)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    26ec:	ec e4       	ldi	r30, 0x4C	; 76
    26ee:	f0 e0       	ldi	r31, 0x00	; 0
    26f0:	80 81       	ld	r24, Z
    26f2:	91 81       	ldd	r25, Z+1	; 0x01
}
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <timer1Start>:

void timer1Start(void)
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    2702:	ae e4       	ldi	r26, 0x4E	; 78
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	ee e4       	ldi	r30, 0x4E	; 78
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	80 81       	ld	r24, Z
    270c:	98 2f       	mov	r25, r24
    270e:	98 7f       	andi	r25, 0xF8	; 248
    2710:	80 91 75 01 	lds	r24, 0x0175
    2714:	89 2b       	or	r24, r25
    2716:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    2718:	ec e4       	ldi	r30, 0x4C	; 76
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	11 82       	std	Z+1, r1	; 0x01
    271e:	10 82       	st	Z, r1
}
    2720:	cf 91       	pop	r28
    2722:	df 91       	pop	r29
    2724:	08 95       	ret

00002726 <timer1Stop>:

void timer1Stop(void)
{
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    272e:	ae e4       	ldi	r26, 0x4E	; 78
    2730:	b0 e0       	ldi	r27, 0x00	; 0
    2732:	ee e4       	ldi	r30, 0x4E	; 78
    2734:	f0 e0       	ldi	r31, 0x00	; 0
    2736:	80 81       	ld	r24, Z
    2738:	88 7f       	andi	r24, 0xF8	; 248
    273a:	8c 93       	st	X, r24
}
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    2742:	af 92       	push	r10
    2744:	cf 92       	push	r12
    2746:	df 92       	push	r13
    2748:	ef 92       	push	r14
    274a:	ff 92       	push	r15
    274c:	0f 93       	push	r16
    274e:	1f 93       	push	r17
    2750:	df 93       	push	r29
    2752:	cf 93       	push	r28
    2754:	00 d0       	rcall	.+0      	; 0x2756 <timer1DelayMs+0x14>
    2756:	00 d0       	rcall	.+0      	; 0x2758 <timer1DelayMs+0x16>
    2758:	00 d0       	rcall	.+0      	; 0x275a <timer1DelayMs+0x18>
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	9e 83       	std	Y+6, r25	; 0x06
    2760:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    2762:	1c 82       	std	Y+4, r1	; 0x04
    2764:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    2766:	8a ef       	ldi	r24, 0xFA	; 250
    2768:	90 e0       	ldi	r25, 0x00	; 0
    276a:	9a 83       	std	Y+2, r25	; 0x02
    276c:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	60 e0       	ldi	r22, 0x00	; 0
    2772:	70 e0       	ldi	r23, 0x00	; 0
    2774:	43 e0       	ldi	r20, 0x03	; 3
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	00 e0       	ldi	r16, 0x00	; 0
    277c:	10 e0       	ldi	r17, 0x00	; 0
    277e:	ee 24       	eor	r14, r14
    2780:	ff 24       	eor	r15, r15
    2782:	cc 24       	eor	r12, r12
    2784:	dd 24       	eor	r13, r13
    2786:	aa 24       	eor	r10, r10
    2788:	0e 94 f6 12 	call	0x25ec	; 0x25ec <timer1Init>
	timer1Start();
    278c:	0e 94 7d 13 	call	0x26fa	; 0x26fa <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    2790:	1c 82       	std	Y+4, r1	; 0x04
    2792:	1b 82       	std	Y+3, r1	; 0x03
    2794:	12 c0       	rjmp	.+36     	; 0x27ba <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    2796:	ec e4       	ldi	r30, 0x4C	; 76
    2798:	f0 e0       	ldi	r31, 0x00	; 0
    279a:	20 81       	ld	r18, Z
    279c:	31 81       	ldd	r19, Z+1	; 0x01
    279e:	89 81       	ldd	r24, Y+1	; 0x01
    27a0:	9a 81       	ldd	r25, Y+2	; 0x02
    27a2:	28 17       	cp	r18, r24
    27a4:	39 07       	cpc	r19, r25
    27a6:	b8 f3       	brcs	.-18     	; 0x2796 <timer1DelayMs+0x54>
		TCNT1 = 0;
    27a8:	ec e4       	ldi	r30, 0x4C	; 76
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	11 82       	std	Z+1, r1	; 0x01
    27ae:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    27b0:	8b 81       	ldd	r24, Y+3	; 0x03
    27b2:	9c 81       	ldd	r25, Y+4	; 0x04
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	9c 83       	std	Y+4, r25	; 0x04
    27b8:	8b 83       	std	Y+3, r24	; 0x03
    27ba:	2b 81       	ldd	r18, Y+3	; 0x03
    27bc:	3c 81       	ldd	r19, Y+4	; 0x04
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	28 17       	cp	r18, r24
    27c4:	39 07       	cpc	r19, r25
    27c6:	38 f3       	brcs	.-50     	; 0x2796 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    27c8:	26 96       	adiw	r28, 0x06	; 6
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	1f 91       	pop	r17
    27da:	0f 91       	pop	r16
    27dc:	ff 90       	pop	r15
    27de:	ef 90       	pop	r14
    27e0:	df 90       	pop	r13
    27e2:	cf 90       	pop	r12
    27e4:	af 90       	pop	r10
    27e6:	08 95       	ret

000027e8 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    27e8:	af 92       	push	r10
    27ea:	cf 92       	push	r12
    27ec:	df 92       	push	r13
    27ee:	ef 92       	push	r14
    27f0:	ff 92       	push	r15
    27f2:	0f 93       	push	r16
    27f4:	1f 93       	push	r17
    27f6:	df 93       	push	r29
    27f8:	cf 93       	push	r28
    27fa:	cd b7       	in	r28, 0x3d	; 61
    27fc:	de b7       	in	r29, 0x3e	; 62
    27fe:	2a 97       	sbiw	r28, 0x0a	; 10
    2800:	0f b6       	in	r0, 0x3f	; 63
    2802:	f8 94       	cli
    2804:	de bf       	out	0x3e, r29	; 62
    2806:	0f be       	out	0x3f, r0	; 63
    2808:	cd bf       	out	0x3d, r28	; 61
    280a:	6f 83       	std	Y+7, r22	; 0x07
    280c:	78 87       	std	Y+8, r23	; 0x08
    280e:	89 87       	std	Y+9, r24	; 0x09
    2810:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    2812:	1b 82       	std	Y+3, r1	; 0x03
    2814:	1c 82       	std	Y+4, r1	; 0x04
    2816:	1d 82       	std	Y+5, r1	; 0x05
    2818:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    281a:	80 e1       	ldi	r24, 0x10	; 16
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	9a 83       	std	Y+2, r25	; 0x02
    2820:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    2822:	e9 81       	ldd	r30, Y+1	; 0x01
    2824:	fa 81       	ldd	r31, Y+2	; 0x02
    2826:	88 e0       	ldi	r24, 0x08	; 8
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	70 e0       	ldi	r23, 0x00	; 0
    282c:	41 e0       	ldi	r20, 0x01	; 1
    282e:	20 e0       	ldi	r18, 0x00	; 0
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	8f 01       	movw	r16, r30
    2834:	ee 24       	eor	r14, r14
    2836:	ff 24       	eor	r15, r15
    2838:	cc 24       	eor	r12, r12
    283a:	dd 24       	eor	r13, r13
    283c:	aa 24       	eor	r10, r10
    283e:	0e 94 f6 12 	call	0x25ec	; 0x25ec <timer1Init>
	timer1Start();
    2842:	0e 94 7d 13 	call	0x26fa	; 0x26fa <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2846:	1b 82       	std	Y+3, r1	; 0x03
    2848:	1c 82       	std	Y+4, r1	; 0x04
    284a:	1d 82       	std	Y+5, r1	; 0x05
    284c:	1e 82       	std	Y+6, r1	; 0x06
    284e:	1f c0       	rjmp	.+62     	; 0x288e <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    2850:	e8 e5       	ldi	r30, 0x58	; 88
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	88 2f       	mov	r24, r24
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	80 71       	andi	r24, 0x10	; 16
    285c:	90 70       	andi	r25, 0x00	; 0
    285e:	00 97       	sbiw	r24, 0x00	; 0
    2860:	b9 f3       	breq	.-18     	; 0x2850 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    2862:	a8 e5       	ldi	r26, 0x58	; 88
    2864:	b0 e0       	ldi	r27, 0x00	; 0
    2866:	e8 e5       	ldi	r30, 0x58	; 88
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	80 61       	ori	r24, 0x10	; 16
    286e:	8c 93       	st	X, r24
		TCNT1 = 0;
    2870:	ec e4       	ldi	r30, 0x4C	; 76
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	11 82       	std	Z+1, r1	; 0x01
    2876:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	ad 81       	ldd	r26, Y+5	; 0x05
    287e:	be 81       	ldd	r27, Y+6	; 0x06
    2880:	01 96       	adiw	r24, 0x01	; 1
    2882:	a1 1d       	adc	r26, r1
    2884:	b1 1d       	adc	r27, r1
    2886:	8b 83       	std	Y+3, r24	; 0x03
    2888:	9c 83       	std	Y+4, r25	; 0x04
    288a:	ad 83       	std	Y+5, r26	; 0x05
    288c:	be 83       	std	Y+6, r27	; 0x06
    288e:	2b 81       	ldd	r18, Y+3	; 0x03
    2890:	3c 81       	ldd	r19, Y+4	; 0x04
    2892:	4d 81       	ldd	r20, Y+5	; 0x05
    2894:	5e 81       	ldd	r21, Y+6	; 0x06
    2896:	8f 81       	ldd	r24, Y+7	; 0x07
    2898:	98 85       	ldd	r25, Y+8	; 0x08
    289a:	a9 85       	ldd	r26, Y+9	; 0x09
    289c:	ba 85       	ldd	r27, Y+10	; 0x0a
    289e:	28 17       	cp	r18, r24
    28a0:	39 07       	cpc	r19, r25
    28a2:	4a 07       	cpc	r20, r26
    28a4:	5b 07       	cpc	r21, r27
    28a6:	a0 f2       	brcs	.-88     	; 0x2850 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    28a8:	2a 96       	adiw	r28, 0x0a	; 10
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	cf 91       	pop	r28
    28b6:	df 91       	pop	r29
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	df 90       	pop	r13
    28c2:	cf 90       	pop	r12
    28c4:	af 90       	pop	r10
    28c6:	08 95       	ret

000028c8 <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    28c8:	af 92       	push	r10
    28ca:	cf 92       	push	r12
    28cc:	df 92       	push	r13
    28ce:	ef 92       	push	r14
    28d0:	ff 92       	push	r15
    28d2:	0f 93       	push	r16
    28d4:	1f 93       	push	r17
    28d6:	df 93       	push	r29
    28d8:	cf 93       	push	r28
    28da:	00 d0       	rcall	.+0      	; 0x28dc <timer1SwPWM+0x14>
    28dc:	00 d0       	rcall	.+0      	; 0x28de <timer1SwPWM+0x16>
    28de:	cd b7       	in	r28, 0x3d	; 61
    28e0:	de b7       	in	r29, 0x3e	; 62
    28e2:	8b 83       	std	Y+3, r24	; 0x03
    28e4:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    28e6:	78 94       	sei

	if(u8_frequency <= 80)
    28e8:	8c 81       	ldd	r24, Y+4	; 0x04
    28ea:	81 35       	cpi	r24, 0x51	; 81
    28ec:	e8 f4       	brcc	.+58     	; 0x2928 <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    28ee:	83 e0       	ldi	r24, 0x03	; 3
    28f0:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    28f2:	8c 81       	ldd	r24, Y+4	; 0x04
    28f4:	88 2f       	mov	r24, r24
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	20 e0       	ldi	r18, 0x00	; 0
    28fe:	39 e1       	ldi	r19, 0x19	; 25
    2900:	40 e0       	ldi	r20, 0x00	; 0
    2902:	50 e0       	ldi	r21, 0x00	; 0
    2904:	bc 01       	movw	r22, r24
    2906:	cd 01       	movw	r24, r26
    2908:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    290c:	9b 01       	movw	r18, r22
    290e:	ac 01       	movw	r20, r24
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	94 e2       	ldi	r25, 0x24	; 36
    2914:	a4 ef       	ldi	r26, 0xF4	; 244
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	bc 01       	movw	r22, r24
    291a:	cd 01       	movw	r24, r26
    291c:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    2920:	da 01       	movw	r26, r20
    2922:	c9 01       	movw	r24, r18
    2924:	8a 83       	std	Y+2, r24	; 0x02
    2926:	1c c0       	rjmp	.+56     	; 0x2960 <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2928:	82 e0       	ldi	r24, 0x02	; 2
    292a:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    292c:	8c 81       	ldd	r24, Y+4	; 0x04
    292e:	88 2f       	mov	r24, r24
    2930:	90 e0       	ldi	r25, 0x00	; 0
    2932:	a0 e0       	ldi	r26, 0x00	; 0
    2934:	b0 e0       	ldi	r27, 0x00	; 0
    2936:	20 e2       	ldi	r18, 0x20	; 32
    2938:	33 e0       	ldi	r19, 0x03	; 3
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	bc 01       	movw	r22, r24
    2940:	cd 01       	movw	r24, r26
    2942:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    2946:	9b 01       	movw	r18, r22
    2948:	ac 01       	movw	r20, r24
    294a:	80 e0       	ldi	r24, 0x00	; 0
    294c:	94 e2       	ldi	r25, 0x24	; 36
    294e:	a4 ef       	ldi	r26, 0xF4	; 244
    2950:	b0 e0       	ldi	r27, 0x00	; 0
    2952:	bc 01       	movw	r22, r24
    2954:	cd 01       	movw	r24, r26
    2956:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    295a:	da 01       	movw	r26, r20
    295c:	c9 01       	movw	r24, r18
    295e:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    2960:	8a 81       	ldd	r24, Y+2	; 0x02
    2962:	e8 2f       	mov	r30, r24
    2964:	f0 e0       	ldi	r31, 0x00	; 0
    2966:	88 e0       	ldi	r24, 0x08	; 8
    2968:	60 e0       	ldi	r22, 0x00	; 0
    296a:	70 e0       	ldi	r23, 0x00	; 0
    296c:	49 81       	ldd	r20, Y+1	; 0x01
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	8f 01       	movw	r16, r30
    2974:	ee 24       	eor	r14, r14
    2976:	ff 24       	eor	r15, r15
    2978:	cc 24       	eor	r12, r12
    297a:	dd 24       	eor	r13, r13
    297c:	aa 24       	eor	r10, r10
    297e:	68 94       	set
    2980:	a4 f8       	bld	r10, 4
    2982:	0e 94 f6 12 	call	0x25ec	; 0x25ec <timer1Init>
	timer1Start();
    2986:	0e 94 7d 13 	call	0x26fa	; 0x26fa <timer1Start>
}
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	0f 90       	pop	r0
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	1f 91       	pop	r17
    2998:	0f 91       	pop	r16
    299a:	ff 90       	pop	r15
    299c:	ef 90       	pop	r14
    299e:	df 90       	pop	r13
    29a0:	cf 90       	pop	r12
    29a2:	af 90       	pop	r10
    29a4:	08 95       	ret

000029a6 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    29a6:	cf 92       	push	r12
    29a8:	ef 92       	push	r14
    29aa:	0f 93       	push	r16
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    29b4:	27 97       	sbiw	r28, 0x07	; 7
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	de bf       	out	0x3e, r29	; 62
    29bc:	0f be       	out	0x3f, r0	; 63
    29be:	cd bf       	out	0x3d, r28	; 61
    29c0:	89 83       	std	Y+1, r24	; 0x01
    29c2:	6a 83       	std	Y+2, r22	; 0x02
    29c4:	4b 83       	std	Y+3, r20	; 0x03
    29c6:	2c 83       	std	Y+4, r18	; 0x04
    29c8:	0d 83       	std	Y+5, r16	; 0x05
    29ca:	ee 82       	std	Y+6, r14	; 0x06
    29cc:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    29ce:	a5 e4       	ldi	r26, 0x45	; 69
    29d0:	b0 e0       	ldi	r27, 0x00	; 0
    29d2:	e5 e4       	ldi	r30, 0x45	; 69
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	80 81       	ld	r24, Z
    29d8:	80 68       	ori	r24, 0x80	; 128
    29da:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    29dc:	a5 e4       	ldi	r26, 0x45	; 69
    29de:	b0 e0       	ldi	r27, 0x00	; 0
    29e0:	e5 e4       	ldi	r30, 0x45	; 69
    29e2:	f0 e0       	ldi	r31, 0x00	; 0
    29e4:	80 81       	ld	r24, Z
    29e6:	98 2f       	mov	r25, r24
    29e8:	97 7b       	andi	r25, 0xB7	; 183
    29ea:	89 81       	ldd	r24, Y+1	; 0x01
    29ec:	89 2b       	or	r24, r25
    29ee:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    29f0:	a5 e4       	ldi	r26, 0x45	; 69
    29f2:	b0 e0       	ldi	r27, 0x00	; 0
    29f4:	e5 e4       	ldi	r30, 0x45	; 69
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	80 81       	ld	r24, Z
    29fa:	98 2f       	mov	r25, r24
    29fc:	9f 7c       	andi	r25, 0xCF	; 207
    29fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2a00:	89 2b       	or	r24, r25
    2a02:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    2a04:	8b 81       	ldd	r24, Y+3	; 0x03
    2a06:	80 93 76 01 	sts	0x0176, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    2a0a:	e4 e4       	ldi	r30, 0x44	; 68
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2a10:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    2a12:	e3 e4       	ldi	r30, 0x43	; 67
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	8d 81       	ldd	r24, Y+5	; 0x05
    2a18:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    2a1a:	a9 e5       	ldi	r26, 0x59	; 89
    2a1c:	b0 e0       	ldi	r27, 0x00	; 0
    2a1e:	e9 e5       	ldi	r30, 0x59	; 89
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	80 81       	ld	r24, Z
    2a24:	98 2f       	mov	r25, r24
    2a26:	9f 73       	andi	r25, 0x3F	; 63
    2a28:	8f 81       	ldd	r24, Y+7	; 0x07
    2a2a:	89 2b       	or	r24, r25
    2a2c:	8c 93       	st	X, r24
}
    2a2e:	27 96       	adiw	r28, 0x07	; 7
    2a30:	0f b6       	in	r0, 0x3f	; 63
    2a32:	f8 94       	cli
    2a34:	de bf       	out	0x3e, r29	; 62
    2a36:	0f be       	out	0x3f, r0	; 63
    2a38:	cd bf       	out	0x3d, r28	; 61
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	0f 91       	pop	r16
    2a40:	ef 90       	pop	r14
    2a42:	cf 90       	pop	r12
    2a44:	08 95       	ret

00002a46 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	0f 92       	push	r0
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    2a52:	e4 e4       	ldi	r30, 0x44	; 68
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	80 83       	st	Z, r24
}
    2a5a:	0f 90       	pop	r0
    2a5c:	cf 91       	pop	r28
    2a5e:	df 91       	pop	r29
    2a60:	08 95       	ret

00002a62 <timer2Read>:

uint8_t timer2Read(void)
{
    2a62:	df 93       	push	r29
    2a64:	cf 93       	push	r28
    2a66:	cd b7       	in	r28, 0x3d	; 61
    2a68:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    2a6a:	e4 e4       	ldi	r30, 0x44	; 68
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	80 81       	ld	r24, Z
}
    2a70:	cf 91       	pop	r28
    2a72:	df 91       	pop	r29
    2a74:	08 95       	ret

00002a76 <timer2Start>:

void timer2Start(void)
{
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    2a7e:	a5 e4       	ldi	r26, 0x45	; 69
    2a80:	b0 e0       	ldi	r27, 0x00	; 0
    2a82:	e5 e4       	ldi	r30, 0x45	; 69
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	80 81       	ld	r24, Z
    2a88:	98 2f       	mov	r25, r24
    2a8a:	98 7f       	andi	r25, 0xF8	; 248
    2a8c:	80 91 76 01 	lds	r24, 0x0176
    2a90:	89 2b       	or	r24, r25
    2a92:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    2a94:	e4 e4       	ldi	r30, 0x44	; 68
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	10 82       	st	Z, r1
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <timer2Stop>:

void timer2Stop(void)
{
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    2aa8:	a5 e4       	ldi	r26, 0x45	; 69
    2aaa:	b0 e0       	ldi	r27, 0x00	; 0
    2aac:	e5 e4       	ldi	r30, 0x45	; 69
    2aae:	f0 e0       	ldi	r31, 0x00	; 0
    2ab0:	80 81       	ld	r24, Z
    2ab2:	88 7f       	andi	r24, 0xF8	; 248
    2ab4:	8c 93       	st	X, r24
}
    2ab6:	cf 91       	pop	r28
    2ab8:	df 91       	pop	r29
    2aba:	08 95       	ret

00002abc <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    2abc:	cf 92       	push	r12
    2abe:	ef 92       	push	r14
    2ac0:	0f 93       	push	r16
    2ac2:	df 93       	push	r29
    2ac4:	cf 93       	push	r28
    2ac6:	00 d0       	rcall	.+0      	; 0x2ac8 <timer2DelayMs+0xc>
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <timer2DelayMs+0xe>
    2aca:	0f 92       	push	r0
    2acc:	cd b7       	in	r28, 0x3d	; 61
    2ace:	de b7       	in	r29, 0x3e	; 62
    2ad0:	9d 83       	std	Y+5, r25	; 0x05
    2ad2:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    2ad4:	1b 82       	std	Y+3, r1	; 0x03
    2ad6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    2ad8:	8a ef       	ldi	r24, 0xFA	; 250
    2ada:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	60 e0       	ldi	r22, 0x00	; 0
    2ae0:	44 e0       	ldi	r20, 0x04	; 4
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	00 e0       	ldi	r16, 0x00	; 0
    2ae6:	ee 24       	eor	r14, r14
    2ae8:	cc 24       	eor	r12, r12
    2aea:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <timer2Init>
	timer2Start();
    2aee:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    2af2:	1b 82       	std	Y+3, r1	; 0x03
    2af4:	1a 82       	std	Y+2, r1	; 0x02
    2af6:	0e c0       	rjmp	.+28     	; 0x2b14 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    2af8:	e4 e4       	ldi	r30, 0x44	; 68
    2afa:	f0 e0       	ldi	r31, 0x00	; 0
    2afc:	90 81       	ld	r25, Z
    2afe:	89 81       	ldd	r24, Y+1	; 0x01
    2b00:	98 17       	cp	r25, r24
    2b02:	d0 f3       	brcs	.-12     	; 0x2af8 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    2b04:	e4 e4       	ldi	r30, 0x44	; 68
    2b06:	f0 e0       	ldi	r31, 0x00	; 0
    2b08:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    2b0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0e:	01 96       	adiw	r24, 0x01	; 1
    2b10:	9b 83       	std	Y+3, r25	; 0x03
    2b12:	8a 83       	std	Y+2, r24	; 0x02
    2b14:	2a 81       	ldd	r18, Y+2	; 0x02
    2b16:	3b 81       	ldd	r19, Y+3	; 0x03
    2b18:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b1c:	28 17       	cp	r18, r24
    2b1e:	39 07       	cpc	r19, r25
    2b20:	58 f3       	brcs	.-42     	; 0x2af8 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	0f 90       	pop	r0
    2b2c:	cf 91       	pop	r28
    2b2e:	df 91       	pop	r29
    2b30:	0f 91       	pop	r16
    2b32:	ef 90       	pop	r14
    2b34:	cf 90       	pop	r12
    2b36:	08 95       	ret

00002b38 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    2b38:	cf 92       	push	r12
    2b3a:	ef 92       	push	r14
    2b3c:	0f 93       	push	r16
    2b3e:	df 93       	push	r29
    2b40:	cf 93       	push	r28
    2b42:	cd b7       	in	r28, 0x3d	; 61
    2b44:	de b7       	in	r29, 0x3e	; 62
    2b46:	29 97       	sbiw	r28, 0x09	; 9
    2b48:	0f b6       	in	r0, 0x3f	; 63
    2b4a:	f8 94       	cli
    2b4c:	de bf       	out	0x3e, r29	; 62
    2b4e:	0f be       	out	0x3f, r0	; 63
    2b50:	cd bf       	out	0x3d, r28	; 61
    2b52:	6e 83       	std	Y+6, r22	; 0x06
    2b54:	7f 83       	std	Y+7, r23	; 0x07
    2b56:	88 87       	std	Y+8, r24	; 0x08
    2b58:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    2b5a:	1a 82       	std	Y+2, r1	; 0x02
    2b5c:	1b 82       	std	Y+3, r1	; 0x03
    2b5e:	1c 82       	std	Y+4, r1	; 0x04
    2b60:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    2b62:	80 e1       	ldi	r24, 0x10	; 16
    2b64:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    2b66:	88 e0       	ldi	r24, 0x08	; 8
    2b68:	60 e0       	ldi	r22, 0x00	; 0
    2b6a:	41 e0       	ldi	r20, 0x01	; 1
    2b6c:	20 e0       	ldi	r18, 0x00	; 0
    2b6e:	09 81       	ldd	r16, Y+1	; 0x01
    2b70:	ee 24       	eor	r14, r14
    2b72:	cc 24       	eor	r12, r12
    2b74:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <timer2Init>
	timer2Start();
    2b78:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2b7c:	1a 82       	std	Y+2, r1	; 0x02
    2b7e:	1b 82       	std	Y+3, r1	; 0x03
    2b80:	1c 82       	std	Y+4, r1	; 0x04
    2b82:	1d 82       	std	Y+5, r1	; 0x05
    2b84:	1a c0       	rjmp	.+52     	; 0x2bba <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    2b86:	e8 e5       	ldi	r30, 0x58	; 88
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	80 81       	ld	r24, Z
    2b8c:	88 23       	and	r24, r24
    2b8e:	dc f7       	brge	.-10     	; 0x2b86 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    2b90:	a8 e5       	ldi	r26, 0x58	; 88
    2b92:	b0 e0       	ldi	r27, 0x00	; 0
    2b94:	e8 e5       	ldi	r30, 0x58	; 88
    2b96:	f0 e0       	ldi	r31, 0x00	; 0
    2b98:	80 81       	ld	r24, Z
    2b9a:	80 68       	ori	r24, 0x80	; 128
    2b9c:	8c 93       	st	X, r24
		TCNT2 = 0;
    2b9e:	e4 e4       	ldi	r30, 0x44	; 68
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	ac 81       	ldd	r26, Y+4	; 0x04
    2baa:	bd 81       	ldd	r27, Y+5	; 0x05
    2bac:	01 96       	adiw	r24, 0x01	; 1
    2bae:	a1 1d       	adc	r26, r1
    2bb0:	b1 1d       	adc	r27, r1
    2bb2:	8a 83       	std	Y+2, r24	; 0x02
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	ac 83       	std	Y+4, r26	; 0x04
    2bb8:	bd 83       	std	Y+5, r27	; 0x05
    2bba:	2a 81       	ldd	r18, Y+2	; 0x02
    2bbc:	3b 81       	ldd	r19, Y+3	; 0x03
    2bbe:	4c 81       	ldd	r20, Y+4	; 0x04
    2bc0:	5d 81       	ldd	r21, Y+5	; 0x05
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	a8 85       	ldd	r26, Y+8	; 0x08
    2bc8:	b9 85       	ldd	r27, Y+9	; 0x09
    2bca:	28 17       	cp	r18, r24
    2bcc:	39 07       	cpc	r19, r25
    2bce:	4a 07       	cpc	r20, r26
    2bd0:	5b 07       	cpc	r21, r27
    2bd2:	c8 f2       	brcs	.-78     	; 0x2b86 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    2bd4:	29 96       	adiw	r28, 0x09	; 9
    2bd6:	0f b6       	in	r0, 0x3f	; 63
    2bd8:	f8 94       	cli
    2bda:	de bf       	out	0x3e, r29	; 62
    2bdc:	0f be       	out	0x3f, r0	; 63
    2bde:	cd bf       	out	0x3d, r28	; 61
    2be0:	cf 91       	pop	r28
    2be2:	df 91       	pop	r29
    2be4:	0f 91       	pop	r16
    2be6:	ef 90       	pop	r14
    2be8:	cf 90       	pop	r12
    2bea:	08 95       	ret

00002bec <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    2bec:	cf 92       	push	r12
    2bee:	ef 92       	push	r14
    2bf0:	0f 93       	push	r16
    2bf2:	df 93       	push	r29
    2bf4:	cf 93       	push	r28
    2bf6:	00 d0       	rcall	.+0      	; 0x2bf8 <timer2SwPWM+0xc>
    2bf8:	00 d0       	rcall	.+0      	; 0x2bfa <timer2SwPWM+0xe>
    2bfa:	cd b7       	in	r28, 0x3d	; 61
    2bfc:	de b7       	in	r29, 0x3e	; 62
    2bfe:	8b 83       	std	Y+3, r24	; 0x03
    2c00:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    2c02:	78 94       	sei

	if(u8_frequency <= 80)
    2c04:	8c 81       	ldd	r24, Y+4	; 0x04
    2c06:	81 35       	cpi	r24, 0x51	; 81
    2c08:	e8 f4       	brcc	.+58     	; 0x2c44 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    2c0a:	83 e0       	ldi	r24, 0x03	; 3
    2c0c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2c0e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c10:	88 2f       	mov	r24, r24
    2c12:	90 e0       	ldi	r25, 0x00	; 0
    2c14:	a0 e0       	ldi	r26, 0x00	; 0
    2c16:	b0 e0       	ldi	r27, 0x00	; 0
    2c18:	20 e0       	ldi	r18, 0x00	; 0
    2c1a:	39 e1       	ldi	r19, 0x19	; 25
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	50 e0       	ldi	r21, 0x00	; 0
    2c20:	bc 01       	movw	r22, r24
    2c22:	cd 01       	movw	r24, r26
    2c24:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    2c28:	9b 01       	movw	r18, r22
    2c2a:	ac 01       	movw	r20, r24
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	94 e2       	ldi	r25, 0x24	; 36
    2c30:	a4 ef       	ldi	r26, 0xF4	; 244
    2c32:	b0 e0       	ldi	r27, 0x00	; 0
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    2c3c:	da 01       	movw	r26, r20
    2c3e:	c9 01       	movw	r24, r18
    2c40:	8a 83       	std	Y+2, r24	; 0x02
    2c42:	1c c0       	rjmp	.+56     	; 0x2c7c <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    2c44:	82 e0       	ldi	r24, 0x02	; 2
    2c46:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    2c48:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4a:	88 2f       	mov	r24, r24
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e0       	ldi	r26, 0x00	; 0
    2c50:	b0 e0       	ldi	r27, 0x00	; 0
    2c52:	20 e2       	ldi	r18, 0x20	; 32
    2c54:	33 e0       	ldi	r19, 0x03	; 3
    2c56:	40 e0       	ldi	r20, 0x00	; 0
    2c58:	50 e0       	ldi	r21, 0x00	; 0
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	cd 01       	movw	r24, r26
    2c5e:	0e 94 56 16 	call	0x2cac	; 0x2cac <__mulsi3>
    2c62:	9b 01       	movw	r18, r22
    2c64:	ac 01       	movw	r20, r24
    2c66:	80 e0       	ldi	r24, 0x00	; 0
    2c68:	94 e2       	ldi	r25, 0x24	; 36
    2c6a:	a4 ef       	ldi	r26, 0xF4	; 244
    2c6c:	b0 e0       	ldi	r27, 0x00	; 0
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <__udivmodsi4>
    2c76:	da 01       	movw	r26, r20
    2c78:	c9 01       	movw	r24, r18
    2c7a:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    2c7c:	88 e0       	ldi	r24, 0x08	; 8
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	49 81       	ldd	r20, Y+1	; 0x01
    2c82:	20 e0       	ldi	r18, 0x00	; 0
    2c84:	0a 81       	ldd	r16, Y+2	; 0x02
    2c86:	ee 24       	eor	r14, r14
    2c88:	0f 2e       	mov	r0, r31
    2c8a:	f0 e8       	ldi	r31, 0x80	; 128
    2c8c:	cf 2e       	mov	r12, r31
    2c8e:	f0 2d       	mov	r31, r0
    2c90:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <timer2Init>
	timer2Start();
    2c94:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <timer2Start>
}
    2c98:	0f 90       	pop	r0
    2c9a:	0f 90       	pop	r0
    2c9c:	0f 90       	pop	r0
    2c9e:	0f 90       	pop	r0
    2ca0:	cf 91       	pop	r28
    2ca2:	df 91       	pop	r29
    2ca4:	0f 91       	pop	r16
    2ca6:	ef 90       	pop	r14
    2ca8:	cf 90       	pop	r12
    2caa:	08 95       	ret

00002cac <__mulsi3>:
    2cac:	62 9f       	mul	r22, r18
    2cae:	d0 01       	movw	r26, r0
    2cb0:	73 9f       	mul	r23, r19
    2cb2:	f0 01       	movw	r30, r0
    2cb4:	82 9f       	mul	r24, r18
    2cb6:	e0 0d       	add	r30, r0
    2cb8:	f1 1d       	adc	r31, r1
    2cba:	64 9f       	mul	r22, r20
    2cbc:	e0 0d       	add	r30, r0
    2cbe:	f1 1d       	adc	r31, r1
    2cc0:	92 9f       	mul	r25, r18
    2cc2:	f0 0d       	add	r31, r0
    2cc4:	83 9f       	mul	r24, r19
    2cc6:	f0 0d       	add	r31, r0
    2cc8:	74 9f       	mul	r23, r20
    2cca:	f0 0d       	add	r31, r0
    2ccc:	65 9f       	mul	r22, r21
    2cce:	f0 0d       	add	r31, r0
    2cd0:	99 27       	eor	r25, r25
    2cd2:	72 9f       	mul	r23, r18
    2cd4:	b0 0d       	add	r27, r0
    2cd6:	e1 1d       	adc	r30, r1
    2cd8:	f9 1f       	adc	r31, r25
    2cda:	63 9f       	mul	r22, r19
    2cdc:	b0 0d       	add	r27, r0
    2cde:	e1 1d       	adc	r30, r1
    2ce0:	f9 1f       	adc	r31, r25
    2ce2:	bd 01       	movw	r22, r26
    2ce4:	cf 01       	movw	r24, r30
    2ce6:	11 24       	eor	r1, r1
    2ce8:	08 95       	ret

00002cea <__udivmodqi4>:
    2cea:	99 1b       	sub	r25, r25
    2cec:	79 e0       	ldi	r23, 0x09	; 9
    2cee:	04 c0       	rjmp	.+8      	; 0x2cf8 <__udivmodqi4_ep>

00002cf0 <__udivmodqi4_loop>:
    2cf0:	99 1f       	adc	r25, r25
    2cf2:	96 17       	cp	r25, r22
    2cf4:	08 f0       	brcs	.+2      	; 0x2cf8 <__udivmodqi4_ep>
    2cf6:	96 1b       	sub	r25, r22

00002cf8 <__udivmodqi4_ep>:
    2cf8:	88 1f       	adc	r24, r24
    2cfa:	7a 95       	dec	r23
    2cfc:	c9 f7       	brne	.-14     	; 0x2cf0 <__udivmodqi4_loop>
    2cfe:	80 95       	com	r24
    2d00:	08 95       	ret

00002d02 <__udivmodhi4>:
    2d02:	aa 1b       	sub	r26, r26
    2d04:	bb 1b       	sub	r27, r27
    2d06:	51 e1       	ldi	r21, 0x11	; 17
    2d08:	07 c0       	rjmp	.+14     	; 0x2d18 <__udivmodhi4_ep>

00002d0a <__udivmodhi4_loop>:
    2d0a:	aa 1f       	adc	r26, r26
    2d0c:	bb 1f       	adc	r27, r27
    2d0e:	a6 17       	cp	r26, r22
    2d10:	b7 07       	cpc	r27, r23
    2d12:	10 f0       	brcs	.+4      	; 0x2d18 <__udivmodhi4_ep>
    2d14:	a6 1b       	sub	r26, r22
    2d16:	b7 0b       	sbc	r27, r23

00002d18 <__udivmodhi4_ep>:
    2d18:	88 1f       	adc	r24, r24
    2d1a:	99 1f       	adc	r25, r25
    2d1c:	5a 95       	dec	r21
    2d1e:	a9 f7       	brne	.-22     	; 0x2d0a <__udivmodhi4_loop>
    2d20:	80 95       	com	r24
    2d22:	90 95       	com	r25
    2d24:	bc 01       	movw	r22, r24
    2d26:	cd 01       	movw	r24, r26
    2d28:	08 95       	ret

00002d2a <__udivmodsi4>:
    2d2a:	a1 e2       	ldi	r26, 0x21	; 33
    2d2c:	1a 2e       	mov	r1, r26
    2d2e:	aa 1b       	sub	r26, r26
    2d30:	bb 1b       	sub	r27, r27
    2d32:	fd 01       	movw	r30, r26
    2d34:	0d c0       	rjmp	.+26     	; 0x2d50 <__udivmodsi4_ep>

00002d36 <__udivmodsi4_loop>:
    2d36:	aa 1f       	adc	r26, r26
    2d38:	bb 1f       	adc	r27, r27
    2d3a:	ee 1f       	adc	r30, r30
    2d3c:	ff 1f       	adc	r31, r31
    2d3e:	a2 17       	cp	r26, r18
    2d40:	b3 07       	cpc	r27, r19
    2d42:	e4 07       	cpc	r30, r20
    2d44:	f5 07       	cpc	r31, r21
    2d46:	20 f0       	brcs	.+8      	; 0x2d50 <__udivmodsi4_ep>
    2d48:	a2 1b       	sub	r26, r18
    2d4a:	b3 0b       	sbc	r27, r19
    2d4c:	e4 0b       	sbc	r30, r20
    2d4e:	f5 0b       	sbc	r31, r21

00002d50 <__udivmodsi4_ep>:
    2d50:	66 1f       	adc	r22, r22
    2d52:	77 1f       	adc	r23, r23
    2d54:	88 1f       	adc	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	1a 94       	dec	r1
    2d5a:	69 f7       	brne	.-38     	; 0x2d36 <__udivmodsi4_loop>
    2d5c:	60 95       	com	r22
    2d5e:	70 95       	com	r23
    2d60:	80 95       	com	r24
    2d62:	90 95       	com	r25
    2d64:	9b 01       	movw	r18, r22
    2d66:	ac 01       	movw	r20, r24
    2d68:	bd 01       	movw	r22, r26
    2d6a:	cf 01       	movw	r24, r30
    2d6c:	08 95       	ret

00002d6e <__prologue_saves__>:
    2d6e:	2f 92       	push	r2
    2d70:	3f 92       	push	r3
    2d72:	4f 92       	push	r4
    2d74:	5f 92       	push	r5
    2d76:	6f 92       	push	r6
    2d78:	7f 92       	push	r7
    2d7a:	8f 92       	push	r8
    2d7c:	9f 92       	push	r9
    2d7e:	af 92       	push	r10
    2d80:	bf 92       	push	r11
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	0f 93       	push	r16
    2d8c:	1f 93       	push	r17
    2d8e:	cf 93       	push	r28
    2d90:	df 93       	push	r29
    2d92:	cd b7       	in	r28, 0x3d	; 61
    2d94:	de b7       	in	r29, 0x3e	; 62
    2d96:	ca 1b       	sub	r28, r26
    2d98:	db 0b       	sbc	r29, r27
    2d9a:	0f b6       	in	r0, 0x3f	; 63
    2d9c:	f8 94       	cli
    2d9e:	de bf       	out	0x3e, r29	; 62
    2da0:	0f be       	out	0x3f, r0	; 63
    2da2:	cd bf       	out	0x3d, r28	; 61
    2da4:	09 94       	ijmp

00002da6 <__epilogue_restores__>:
    2da6:	2a 88       	ldd	r2, Y+18	; 0x12
    2da8:	39 88       	ldd	r3, Y+17	; 0x11
    2daa:	48 88       	ldd	r4, Y+16	; 0x10
    2dac:	5f 84       	ldd	r5, Y+15	; 0x0f
    2dae:	6e 84       	ldd	r6, Y+14	; 0x0e
    2db0:	7d 84       	ldd	r7, Y+13	; 0x0d
    2db2:	8c 84       	ldd	r8, Y+12	; 0x0c
    2db4:	9b 84       	ldd	r9, Y+11	; 0x0b
    2db6:	aa 84       	ldd	r10, Y+10	; 0x0a
    2db8:	b9 84       	ldd	r11, Y+9	; 0x09
    2dba:	c8 84       	ldd	r12, Y+8	; 0x08
    2dbc:	df 80       	ldd	r13, Y+7	; 0x07
    2dbe:	ee 80       	ldd	r14, Y+6	; 0x06
    2dc0:	fd 80       	ldd	r15, Y+5	; 0x05
    2dc2:	0c 81       	ldd	r16, Y+4	; 0x04
    2dc4:	1b 81       	ldd	r17, Y+3	; 0x03
    2dc6:	aa 81       	ldd	r26, Y+2	; 0x02
    2dc8:	b9 81       	ldd	r27, Y+1	; 0x01
    2dca:	ce 0f       	add	r28, r30
    2dcc:	d1 1d       	adc	r29, r1
    2dce:	0f b6       	in	r0, 0x3f	; 63
    2dd0:	f8 94       	cli
    2dd2:	de bf       	out	0x3e, r29	; 62
    2dd4:	0f be       	out	0x3f, r0	; 63
    2dd6:	cd bf       	out	0x3d, r28	; 61
    2dd8:	ed 01       	movw	r28, r26
    2dda:	08 95       	ret

00002ddc <_exit>:
    2ddc:	f8 94       	cli

00002dde <__stop_program>:
    2dde:	ff cf       	rjmp	.-2      	; 0x2dde <__stop_program>
