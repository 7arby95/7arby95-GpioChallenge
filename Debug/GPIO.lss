
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001fb2  00002046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  00002048  2**0
                  ALLOC
  3 .stab         00002ca0  00000000  00000000  00002048  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001790  00000000  00000000  00004ce8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f3 03 	jmp	0x7e6	; 0x7e6 <__vector_1>
       8:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_2>
       c:	0c 94 15 04 	jmp	0x82a	; 0x82a <__vector_3>
      10:	0c 94 3a 06 	jmp	0xc74	; 0xc74 <__vector_4>
      14:	0c 94 26 07 	jmp	0xe4c	; 0xe4c <__vector_5>
      18:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__vector_6>
      1c:	0c 94 30 05 	jmp	0xa60	; 0xa60 <__vector_7>
      20:	0c 94 18 06 	jmp	0xc30	; 0xc30 <__vector_8>
      24:	0c 94 29 06 	jmp	0xc52	; 0xc52 <__vector_9>
      28:	0c 94 26 04 	jmp	0x84c	; 0x84c <__vector_10>
      2c:	0c 94 0e 05 	jmp	0xa1c	; 0xa1c <__vector_11>
      30:	0c 94 37 07 	jmp	0xe6e	; 0xe6e <__vector_12>
      34:	0c 94 48 07 	jmp	0xe90	; 0xe90 <__vector_13>
      38:	0c 94 59 07 	jmp	0xeb2	; 0xeb2 <__vector_14>
      3c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__vector_15>
      40:	0c 94 7b 07 	jmp	0xef6	; 0xef6 <__vector_16>
      44:	0c 94 8c 07 	jmp	0xf18	; 0xf18 <__vector_17>
      48:	0c 94 9d 07 	jmp	0xf3a	; 0xf3a <__vector_18>
      4c:	0c 94 ae 07 	jmp	0xf5c	; 0xf5c <__vector_19>
      50:	0c 94 bf 07 	jmp	0xf7e	; 0xf7e <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	ff e1       	ldi	r31, 0x1F	; 31
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 d7 0f 	jmp	0x1fae	; 0x1fae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
	}
}
*/

int main(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	cd b7       	in	r28, 0x3d	; 61
      98:	de b7       	in	r29, 0x3e	; 62
	MotorDC_Init(MOT_1);
      9a:	80 e0       	ldi	r24, 0x00	; 0
      9c:	0e 94 6c 00 	call	0xd8	; 0xd8 <MotorDC_Init>
	MotorDC_Init(MOT_2);
      a0:	81 e0       	ldi	r24, 0x01	; 1
      a2:	0e 94 6c 00 	call	0xd8	; 0xd8 <MotorDC_Init>
	
	gu8_dutyCycle = 0;
      a6:	10 92 63 00 	sts	0x0063, r1

	MotorDC_Speed_PollingWithT0(gu8_dutyCycle);
      aa:	80 91 63 00 	lds	r24, 0x0063
      ae:	0e 94 32 01 	call	0x264	; 0x264 <MotorDC_Speed_PollingWithT0>

	while(1)
	{
		if(gu8_completionFlag == 1)
      b2:	80 91 62 00 	lds	r24, 0x0062
      b6:	81 30       	cpi	r24, 0x01	; 1
      b8:	e1 f7       	brne	.-8      	; 0xb2 <main+0x20>
		{
			softwareDelayMs(500);
      ba:	64 ef       	ldi	r22, 0xF4	; 244
      bc:	71 e0       	ldi	r23, 0x01	; 1
      be:	80 e0       	ldi	r24, 0x00	; 0
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 46 0a 	call	0x148c	; 0x148c <softwareDelayMs>
			MotorDC_Dir(MOT_1, STOP);
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	60 e0       	ldi	r22, 0x00	; 0
      ca:	0e 94 b1 00 	call	0x162	; 0x162 <MotorDC_Dir>
			MotorDC_Dir(MOT_2, STOP);
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	60 e0       	ldi	r22, 0x00	; 0
      d2:	0e 94 b1 00 	call	0x162	; 0x162 <MotorDC_Dir>
      d6:	ed cf       	rjmp	.-38     	; 0xb2 <main+0x20>

000000d8 <MotorDC_Init>:
#define MOTOR_FREQUENCY 200

/*- APIs IMPLEMENTATION ------------------------------------*/

void MotorDC_Init(En_motorType_t en_motor_number)
{
      d8:	df 93       	push	r29
      da:	cf 93       	push	r28
      dc:	00 d0       	rcall	.+0      	; 0xde <MotorDC_Init+0x6>
      de:	0f 92       	push	r0
      e0:	cd b7       	in	r28, 0x3d	; 61
      e2:	de b7       	in	r29, 0x3e	; 62
      e4:	89 83       	std	Y+1, r24	; 0x01
	switch(en_motor_number)
      e6:	89 81       	ldd	r24, Y+1	; 0x01
      e8:	28 2f       	mov	r18, r24
      ea:	30 e0       	ldi	r19, 0x00	; 0
      ec:	3b 83       	std	Y+3, r19	; 0x03
      ee:	2a 83       	std	Y+2, r18	; 0x02
      f0:	8a 81       	ldd	r24, Y+2	; 0x02
      f2:	9b 81       	ldd	r25, Y+3	; 0x03
      f4:	00 97       	sbiw	r24, 0x00	; 0
      f6:	31 f0       	breq	.+12     	; 0x104 <MotorDC_Init+0x2c>
      f8:	2a 81       	ldd	r18, Y+2	; 0x02
      fa:	3b 81       	ldd	r19, Y+3	; 0x03
      fc:	21 30       	cpi	r18, 0x01	; 1
      fe:	31 05       	cpc	r19, r1
     100:	b1 f0       	breq	.+44     	; 0x12e <MotorDC_Init+0x56>
     102:	29 c0       	rjmp	.+82     	; 0x156 <MotorDC_Init+0x7e>
	{
		case MOT_1:
			gpioPinDirection(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, OUTPUT);
     104:	83 e0       	ldi	r24, 0x03	; 3
     106:	60 e1       	ldi	r22, 0x10	; 16
     108:	4f ef       	ldi	r20, 0xFF	; 255
     10a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1A_GPIO, MOTOR_OUT_1A_BIT, OUTPUT);
     10e:	83 e0       	ldi	r24, 0x03	; 3
     110:	64 e0       	ldi	r22, 0x04	; 4
     112:	4f ef       	ldi	r20, 0xFF	; 255
     114:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_1B_GPIO, MOTOR_OUT_1B_BIT, OUTPUT);
     118:	83 e0       	ldi	r24, 0x03	; 3
     11a:	68 e0       	ldi	r22, 0x08	; 8
     11c:	4f ef       	ldi	r20, 0xFF	; 255
     11e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_1_GPIO, MOTOR_EN_1_BIT, HIGH);
     122:	83 e0       	ldi	r24, 0x03	; 3
     124:	60 e1       	ldi	r22, 0x10	; 16
     126:	4f ef       	ldi	r20, 0xFF	; 255
     128:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     12c:	14 c0       	rjmp	.+40     	; 0x156 <MotorDC_Init+0x7e>
			break;
		case MOT_2:
			gpioPinDirection(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, OUTPUT);
     12e:	83 e0       	ldi	r24, 0x03	; 3
     130:	60 e2       	ldi	r22, 0x20	; 32
     132:	4f ef       	ldi	r20, 0xFF	; 255
     134:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2A_GPIO, MOTOR_OUT_2A_BIT, OUTPUT);
     138:	83 e0       	ldi	r24, 0x03	; 3
     13a:	60 e4       	ldi	r22, 0x40	; 64
     13c:	4f ef       	ldi	r20, 0xFF	; 255
     13e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinDirection(MOTOR_OUT_2B_GPIO, MOTOR_OUT_2B_BIT, OUTPUT);
     142:	83 e0       	ldi	r24, 0x03	; 3
     144:	60 e8       	ldi	r22, 0x80	; 128
     146:	4f ef       	ldi	r20, 0xFF	; 255
     148:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
			gpioPinWrite(MOTOR_EN_2_GPIO, MOTOR_EN_2_BIT, HIGH);
     14c:	83 e0       	ldi	r24, 0x03	; 3
     14e:	60 e2       	ldi	r22, 0x20	; 32
     150:	4f ef       	ldi	r20, 0xFF	; 255
     152:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
			break;
	}
}
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	cf 91       	pop	r28
     15e:	df 91       	pop	r29
     160:	08 95       	ret

00000162 <MotorDC_Dir>:

void MotorDC_Dir(En_motorType_t en_motor_number, En_motorDir_t en_motor_dir)
{
     162:	df 93       	push	r29
     164:	cf 93       	push	r28
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	2b 97       	sbiw	r28, 0x0b	; 11
     16c:	0f b6       	in	r0, 0x3f	; 63
     16e:	f8 94       	cli
     170:	de bf       	out	0x3e, r29	; 62
     172:	0f be       	out	0x3f, r0	; 63
     174:	cd bf       	out	0x3d, r28	; 61
     176:	8c 83       	std	Y+4, r24	; 0x04
     178:	6d 83       	std	Y+5, r22	; 0x05
	uint8_t motorGpio = 0;
     17a:	1b 82       	std	Y+3, r1	; 0x03
	uint8_t motorBitA = 0;
     17c:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t motorBitB = 0;
     17e:	19 82       	std	Y+1, r1	; 0x01
	
	switch(en_motor_number)
     180:	8c 81       	ldd	r24, Y+4	; 0x04
     182:	28 2f       	mov	r18, r24
     184:	30 e0       	ldi	r19, 0x00	; 0
     186:	3b 87       	std	Y+11, r19	; 0x0b
     188:	2a 87       	std	Y+10, r18	; 0x0a
     18a:	8a 85       	ldd	r24, Y+10	; 0x0a
     18c:	9b 85       	ldd	r25, Y+11	; 0x0b
     18e:	00 97       	sbiw	r24, 0x00	; 0
     190:	31 f0       	breq	.+12     	; 0x19e <MotorDC_Dir+0x3c>
     192:	2a 85       	ldd	r18, Y+10	; 0x0a
     194:	3b 85       	ldd	r19, Y+11	; 0x0b
     196:	21 30       	cpi	r18, 0x01	; 1
     198:	31 05       	cpc	r19, r1
     19a:	41 f0       	breq	.+16     	; 0x1ac <MotorDC_Dir+0x4a>
     19c:	0d c0       	rjmp	.+26     	; 0x1b8 <MotorDC_Dir+0x56>
	{
		case MOT_1:
			motorGpio = MOTOR_OUT_1A_GPIO;
     19e:	83 e0       	ldi	r24, 0x03	; 3
     1a0:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_1A_BIT;
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_1B_BIT;
     1a6:	88 e0       	ldi	r24, 0x08	; 8
     1a8:	89 83       	std	Y+1, r24	; 0x01
     1aa:	06 c0       	rjmp	.+12     	; 0x1b8 <MotorDC_Dir+0x56>
			break;
		case MOT_2:
			motorGpio = MOTOR_OUT_2A_GPIO;
     1ac:	83 e0       	ldi	r24, 0x03	; 3
     1ae:	8b 83       	std	Y+3, r24	; 0x03
			motorBitA = MOTOR_OUT_2A_BIT;
     1b0:	80 e4       	ldi	r24, 0x40	; 64
     1b2:	8a 83       	std	Y+2, r24	; 0x02
			motorBitB = MOTOR_OUT_2B_BIT;
     1b4:	80 e8       	ldi	r24, 0x80	; 128
     1b6:	89 83       	std	Y+1, r24	; 0x01
			break;
	}
	
	switch(en_motor_dir)
     1b8:	8d 81       	ldd	r24, Y+5	; 0x05
     1ba:	28 2f       	mov	r18, r24
     1bc:	30 e0       	ldi	r19, 0x00	; 0
     1be:	39 87       	std	Y+9, r19	; 0x09
     1c0:	28 87       	std	Y+8, r18	; 0x08
     1c2:	88 85       	ldd	r24, Y+8	; 0x08
     1c4:	99 85       	ldd	r25, Y+9	; 0x09
     1c6:	81 30       	cpi	r24, 0x01	; 1
     1c8:	91 05       	cpc	r25, r1
     1ca:	71 f1       	breq	.+92     	; 0x228 <MotorDC_Dir+0xc6>
     1cc:	28 85       	ldd	r18, Y+8	; 0x08
     1ce:	39 85       	ldd	r19, Y+9	; 0x09
     1d0:	22 30       	cpi	r18, 0x02	; 2
     1d2:	31 05       	cpc	r19, r1
     1d4:	a1 f1       	breq	.+104    	; 0x23e <MotorDC_Dir+0xdc>
     1d6:	88 85       	ldd	r24, Y+8	; 0x08
     1d8:	99 85       	ldd	r25, Y+9	; 0x09
     1da:	00 97       	sbiw	r24, 0x00	; 0
     1dc:	d1 f5       	brne	.+116    	; 0x252 <MotorDC_Dir+0xf0>
	{
		case STOP:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     1de:	8b 81       	ldd	r24, Y+3	; 0x03
     1e0:	6a 81       	ldd	r22, Y+2	; 0x02
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	69 81       	ldd	r22, Y+1	; 0x01
     1ec:	40 e0       	ldi	r20, 0x00	; 0
     1ee:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		switch(en_motor_number)
     1f2:	8c 81       	ldd	r24, Y+4	; 0x04
     1f4:	28 2f       	mov	r18, r24
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	3f 83       	std	Y+7, r19	; 0x07
     1fa:	2e 83       	std	Y+6, r18	; 0x06
     1fc:	8e 81       	ldd	r24, Y+6	; 0x06
     1fe:	9f 81       	ldd	r25, Y+7	; 0x07
     200:	00 97       	sbiw	r24, 0x00	; 0
     202:	31 f0       	breq	.+12     	; 0x210 <MotorDC_Dir+0xae>
     204:	2e 81       	ldd	r18, Y+6	; 0x06
     206:	3f 81       	ldd	r19, Y+7	; 0x07
     208:	21 30       	cpi	r18, 0x01	; 1
     20a:	31 05       	cpc	r19, r1
     20c:	39 f0       	breq	.+14     	; 0x21c <MotorDC_Dir+0xba>
     20e:	21 c0       	rjmp	.+66     	; 0x252 <MotorDC_Dir+0xf0>
		{
			case MOT_1:
				gpioPinWrite(motorGpio, MOTOR_EN_1_BIT, LOW);
     210:	8b 81       	ldd	r24, Y+3	; 0x03
     212:	60 e1       	ldi	r22, 0x10	; 16
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     21a:	1b c0       	rjmp	.+54     	; 0x252 <MotorDC_Dir+0xf0>
				break;
			case MOT_2:
				gpioPinWrite(motorGpio, MOTOR_EN_2_BIT, LOW);
     21c:	8b 81       	ldd	r24, Y+3	; 0x03
     21e:	60 e2       	ldi	r22, 0x20	; 32
     220:	40 e0       	ldi	r20, 0x00	; 0
     222:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     226:	15 c0       	rjmp	.+42     	; 0x252 <MotorDC_Dir+0xf0>
				break;
		}
		break;
		
		case FORWARD:
		gpioPinWrite(motorGpio, motorBitA, LOW);
     228:	8b 81       	ldd	r24, Y+3	; 0x03
     22a:	6a 81       	ldd	r22, Y+2	; 0x02
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, HIGH);
     232:	8b 81       	ldd	r24, Y+3	; 0x03
     234:	69 81       	ldd	r22, Y+1	; 0x01
     236:	4f ef       	ldi	r20, 0xFF	; 255
     238:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     23c:	0a c0       	rjmp	.+20     	; 0x252 <MotorDC_Dir+0xf0>
		break;
		
		case BACKWARD:
		gpioPinWrite(motorGpio, motorBitA, HIGH);
     23e:	8b 81       	ldd	r24, Y+3	; 0x03
     240:	6a 81       	ldd	r22, Y+2	; 0x02
     242:	4f ef       	ldi	r20, 0xFF	; 255
     244:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gpioPinWrite(motorGpio, motorBitB, LOW);
     248:	8b 81       	ldd	r24, Y+3	; 0x03
     24a:	69 81       	ldd	r22, Y+1	; 0x01
     24c:	40 e0       	ldi	r20, 0x00	; 0
     24e:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		break;
	}
}
     252:	2b 96       	adiw	r28, 0x0b	; 11
     254:	0f b6       	in	r0, 0x3f	; 63
     256:	f8 94       	cli
     258:	de bf       	out	0x3e, r29	; 62
     25a:	0f be       	out	0x3f, r0	; 63
     25c:	cd bf       	out	0x3d, r28	; 61
     25e:	cf 91       	pop	r28
     260:	df 91       	pop	r29
     262:	08 95       	ret

00000264 <MotorDC_Speed_PollingWithT0>:

void MotorDC_Speed_PollingWithT0(uint8_t u8_motor_speed)
{
     264:	df 93       	push	r29
     266:	cf 93       	push	r28
     268:	0f 92       	push	r0
     26a:	cd b7       	in	r28, 0x3d	; 61
     26c:	de b7       	in	r29, 0x3e	; 62
     26e:	89 83       	std	Y+1, r24	; 0x01
	timer0SwPWM(u8_motor_speed, MOTOR_FREQUENCY);
     270:	89 81       	ldd	r24, Y+1	; 0x01
     272:	68 ec       	ldi	r22, 0xC8	; 200
     274:	0e 94 ba 0b 	call	0x1774	; 0x1774 <timer0SwPWM>
}
     278:	0f 90       	pop	r0
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <MotorDC_Speed_HwPWM>:

void MotorDC_Speed_HwPWM(uint8_t u8_motor_speed)
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	0f 92       	push	r0
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62
     28a:	89 83       	std	Y+1, r24	; 0x01
	
     28c:	0f 90       	pop	r0
     28e:	cf 91       	pop	r28
     290:	df 91       	pop	r29
     292:	08 95       	ret

00000294 <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	00 d0       	rcall	.+0      	; 0x29a <gpioPortDirection+0x6>
     29a:	00 d0       	rcall	.+0      	; 0x29c <gpioPortDirection+0x8>
     29c:	cd b7       	in	r28, 0x3d	; 61
     29e:	de b7       	in	r29, 0x3e	; 62
     2a0:	89 83       	std	Y+1, r24	; 0x01
     2a2:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
     2a4:	89 81       	ldd	r24, Y+1	; 0x01
     2a6:	28 2f       	mov	r18, r24
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	3c 83       	std	Y+4, r19	; 0x04
     2ac:	2b 83       	std	Y+3, r18	; 0x03
     2ae:	8b 81       	ldd	r24, Y+3	; 0x03
     2b0:	9c 81       	ldd	r25, Y+4	; 0x04
     2b2:	81 30       	cpi	r24, 0x01	; 1
     2b4:	91 05       	cpc	r25, r1
     2b6:	d1 f0       	breq	.+52     	; 0x2ec <gpioPortDirection+0x58>
     2b8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ba:	3c 81       	ldd	r19, Y+4	; 0x04
     2bc:	22 30       	cpi	r18, 0x02	; 2
     2be:	31 05       	cpc	r19, r1
     2c0:	2c f4       	brge	.+10     	; 0x2cc <gpioPortDirection+0x38>
     2c2:	8b 81       	ldd	r24, Y+3	; 0x03
     2c4:	9c 81       	ldd	r25, Y+4	; 0x04
     2c6:	00 97       	sbiw	r24, 0x00	; 0
     2c8:	61 f0       	breq	.+24     	; 0x2e2 <gpioPortDirection+0x4e>
     2ca:	1e c0       	rjmp	.+60     	; 0x308 <gpioPortDirection+0x74>
     2cc:	2b 81       	ldd	r18, Y+3	; 0x03
     2ce:	3c 81       	ldd	r19, Y+4	; 0x04
     2d0:	22 30       	cpi	r18, 0x02	; 2
     2d2:	31 05       	cpc	r19, r1
     2d4:	81 f0       	breq	.+32     	; 0x2f6 <gpioPortDirection+0x62>
     2d6:	8b 81       	ldd	r24, Y+3	; 0x03
     2d8:	9c 81       	ldd	r25, Y+4	; 0x04
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	81 f0       	breq	.+32     	; 0x300 <gpioPortDirection+0x6c>
     2e0:	13 c0       	rjmp	.+38     	; 0x308 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
     2e2:	ea e3       	ldi	r30, 0x3A	; 58
     2e4:	f0 e0       	ldi	r31, 0x00	; 0
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	80 83       	st	Z, r24
     2ea:	0e c0       	rjmp	.+28     	; 0x308 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
     2ec:	e7 e3       	ldi	r30, 0x37	; 55
     2ee:	f0 e0       	ldi	r31, 0x00	; 0
     2f0:	8a 81       	ldd	r24, Y+2	; 0x02
     2f2:	80 83       	st	Z, r24
     2f4:	09 c0       	rjmp	.+18     	; 0x308 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
     2f6:	e4 e3       	ldi	r30, 0x34	; 52
     2f8:	f0 e0       	ldi	r31, 0x00	; 0
     2fa:	8a 81       	ldd	r24, Y+2	; 0x02
     2fc:	80 83       	st	Z, r24
     2fe:	04 c0       	rjmp	.+8      	; 0x308 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
     300:	e1 e3       	ldi	r30, 0x31	; 49
     302:	f0 e0       	ldi	r31, 0x00	; 0
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	cf 91       	pop	r28
     312:	df 91       	pop	r29
     314:	08 95       	ret

00000316 <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     316:	df 93       	push	r29
     318:	cf 93       	push	r28
     31a:	00 d0       	rcall	.+0      	; 0x31c <gpioPortWrite+0x6>
     31c:	00 d0       	rcall	.+0      	; 0x31e <gpioPortWrite+0x8>
     31e:	cd b7       	in	r28, 0x3d	; 61
     320:	de b7       	in	r29, 0x3e	; 62
     322:	89 83       	std	Y+1, r24	; 0x01
     324:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
     326:	89 81       	ldd	r24, Y+1	; 0x01
     328:	28 2f       	mov	r18, r24
     32a:	30 e0       	ldi	r19, 0x00	; 0
     32c:	3c 83       	std	Y+4, r19	; 0x04
     32e:	2b 83       	std	Y+3, r18	; 0x03
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	81 30       	cpi	r24, 0x01	; 1
     336:	91 05       	cpc	r25, r1
     338:	d1 f0       	breq	.+52     	; 0x36e <gpioPortWrite+0x58>
     33a:	2b 81       	ldd	r18, Y+3	; 0x03
     33c:	3c 81       	ldd	r19, Y+4	; 0x04
     33e:	22 30       	cpi	r18, 0x02	; 2
     340:	31 05       	cpc	r19, r1
     342:	2c f4       	brge	.+10     	; 0x34e <gpioPortWrite+0x38>
     344:	8b 81       	ldd	r24, Y+3	; 0x03
     346:	9c 81       	ldd	r25, Y+4	; 0x04
     348:	00 97       	sbiw	r24, 0x00	; 0
     34a:	61 f0       	breq	.+24     	; 0x364 <gpioPortWrite+0x4e>
     34c:	1e c0       	rjmp	.+60     	; 0x38a <gpioPortWrite+0x74>
     34e:	2b 81       	ldd	r18, Y+3	; 0x03
     350:	3c 81       	ldd	r19, Y+4	; 0x04
     352:	22 30       	cpi	r18, 0x02	; 2
     354:	31 05       	cpc	r19, r1
     356:	81 f0       	breq	.+32     	; 0x378 <gpioPortWrite+0x62>
     358:	8b 81       	ldd	r24, Y+3	; 0x03
     35a:	9c 81       	ldd	r25, Y+4	; 0x04
     35c:	83 30       	cpi	r24, 0x03	; 3
     35e:	91 05       	cpc	r25, r1
     360:	81 f0       	breq	.+32     	; 0x382 <gpioPortWrite+0x6c>
     362:	13 c0       	rjmp	.+38     	; 0x38a <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
     364:	eb e3       	ldi	r30, 0x3B	; 59
     366:	f0 e0       	ldi	r31, 0x00	; 0
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	80 83       	st	Z, r24
     36c:	0e c0       	rjmp	.+28     	; 0x38a <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
     36e:	e8 e3       	ldi	r30, 0x38	; 56
     370:	f0 e0       	ldi	r31, 0x00	; 0
     372:	8a 81       	ldd	r24, Y+2	; 0x02
     374:	80 83       	st	Z, r24
     376:	09 c0       	rjmp	.+18     	; 0x38a <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
     378:	e5 e3       	ldi	r30, 0x35	; 53
     37a:	f0 e0       	ldi	r31, 0x00	; 0
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	80 83       	st	Z, r24
     380:	04 c0       	rjmp	.+8      	; 0x38a <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
     382:	e2 e3       	ldi	r30, 0x32	; 50
     384:	f0 e0       	ldi	r31, 0x00	; 0
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     38a:	0f 90       	pop	r0
     38c:	0f 90       	pop	r0
     38e:	0f 90       	pop	r0
     390:	0f 90       	pop	r0
     392:	cf 91       	pop	r28
     394:	df 91       	pop	r29
     396:	08 95       	ret

00000398 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
     398:	df 93       	push	r29
     39a:	cf 93       	push	r28
     39c:	00 d0       	rcall	.+0      	; 0x39e <gpioPortToggle+0x6>
     39e:	0f 92       	push	r0
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	28 2f       	mov	r18, r24
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	3b 83       	std	Y+3, r19	; 0x03
     3ae:	2a 83       	std	Y+2, r18	; 0x02
     3b0:	8a 81       	ldd	r24, Y+2	; 0x02
     3b2:	9b 81       	ldd	r25, Y+3	; 0x03
     3b4:	81 30       	cpi	r24, 0x01	; 1
     3b6:	91 05       	cpc	r25, r1
     3b8:	e9 f0       	breq	.+58     	; 0x3f4 <gpioPortToggle+0x5c>
     3ba:	2a 81       	ldd	r18, Y+2	; 0x02
     3bc:	3b 81       	ldd	r19, Y+3	; 0x03
     3be:	22 30       	cpi	r18, 0x02	; 2
     3c0:	31 05       	cpc	r19, r1
     3c2:	2c f4       	brge	.+10     	; 0x3ce <gpioPortToggle+0x36>
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	9b 81       	ldd	r25, Y+3	; 0x03
     3c8:	00 97       	sbiw	r24, 0x00	; 0
     3ca:	61 f0       	breq	.+24     	; 0x3e4 <gpioPortToggle+0x4c>
     3cc:	2a c0       	rjmp	.+84     	; 0x422 <gpioPortToggle+0x8a>
     3ce:	2a 81       	ldd	r18, Y+2	; 0x02
     3d0:	3b 81       	ldd	r19, Y+3	; 0x03
     3d2:	22 30       	cpi	r18, 0x02	; 2
     3d4:	31 05       	cpc	r19, r1
     3d6:	b1 f0       	breq	.+44     	; 0x404 <gpioPortToggle+0x6c>
     3d8:	8a 81       	ldd	r24, Y+2	; 0x02
     3da:	9b 81       	ldd	r25, Y+3	; 0x03
     3dc:	83 30       	cpi	r24, 0x03	; 3
     3de:	91 05       	cpc	r25, r1
     3e0:	c9 f0       	breq	.+50     	; 0x414 <gpioPortToggle+0x7c>
     3e2:	1f c0       	rjmp	.+62     	; 0x422 <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
     3e4:	ab e3       	ldi	r26, 0x3B	; 59
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	eb e3       	ldi	r30, 0x3B	; 59
     3ea:	f0 e0       	ldi	r31, 0x00	; 0
     3ec:	80 81       	ld	r24, Z
     3ee:	80 95       	com	r24
     3f0:	8c 93       	st	X, r24
     3f2:	17 c0       	rjmp	.+46     	; 0x422 <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
     3f4:	a8 e3       	ldi	r26, 0x38	; 56
     3f6:	b0 e0       	ldi	r27, 0x00	; 0
     3f8:	e8 e3       	ldi	r30, 0x38	; 56
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	80 81       	ld	r24, Z
     3fe:	80 95       	com	r24
     400:	8c 93       	st	X, r24
     402:	0f c0       	rjmp	.+30     	; 0x422 <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
     404:	a5 e3       	ldi	r26, 0x35	; 53
     406:	b0 e0       	ldi	r27, 0x00	; 0
     408:	e5 e3       	ldi	r30, 0x35	; 53
     40a:	f0 e0       	ldi	r31, 0x00	; 0
     40c:	80 81       	ld	r24, Z
     40e:	80 95       	com	r24
     410:	8c 93       	st	X, r24
     412:	07 c0       	rjmp	.+14     	; 0x422 <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
     414:	a2 e3       	ldi	r26, 0x32	; 50
     416:	b0 e0       	ldi	r27, 0x00	; 0
     418:	e2 e3       	ldi	r30, 0x32	; 50
     41a:	f0 e0       	ldi	r31, 0x00	; 0
     41c:	80 81       	ld	r24, Z
     41e:	80 95       	com	r24
     420:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     422:	0f 90       	pop	r0
     424:	0f 90       	pop	r0
     426:	0f 90       	pop	r0
     428:	cf 91       	pop	r28
     42a:	df 91       	pop	r29
     42c:	08 95       	ret

0000042e <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
     42e:	df 93       	push	r29
     430:	cf 93       	push	r28
     432:	00 d0       	rcall	.+0      	; 0x434 <gpioPortRead+0x6>
     434:	00 d0       	rcall	.+0      	; 0x436 <gpioPortRead+0x8>
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
     43a:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
     43c:	89 81       	ldd	r24, Y+1	; 0x01
     43e:	28 2f       	mov	r18, r24
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	3c 83       	std	Y+4, r19	; 0x04
     444:	2b 83       	std	Y+3, r18	; 0x03
     446:	8b 81       	ldd	r24, Y+3	; 0x03
     448:	9c 81       	ldd	r25, Y+4	; 0x04
     44a:	81 30       	cpi	r24, 0x01	; 1
     44c:	91 05       	cpc	r25, r1
     44e:	d1 f0       	breq	.+52     	; 0x484 <gpioPortRead+0x56>
     450:	2b 81       	ldd	r18, Y+3	; 0x03
     452:	3c 81       	ldd	r19, Y+4	; 0x04
     454:	22 30       	cpi	r18, 0x02	; 2
     456:	31 05       	cpc	r19, r1
     458:	2c f4       	brge	.+10     	; 0x464 <gpioPortRead+0x36>
     45a:	8b 81       	ldd	r24, Y+3	; 0x03
     45c:	9c 81       	ldd	r25, Y+4	; 0x04
     45e:	00 97       	sbiw	r24, 0x00	; 0
     460:	61 f0       	breq	.+24     	; 0x47a <gpioPortRead+0x4c>
     462:	1f c0       	rjmp	.+62     	; 0x4a2 <gpioPortRead+0x74>
     464:	2b 81       	ldd	r18, Y+3	; 0x03
     466:	3c 81       	ldd	r19, Y+4	; 0x04
     468:	22 30       	cpi	r18, 0x02	; 2
     46a:	31 05       	cpc	r19, r1
     46c:	81 f0       	breq	.+32     	; 0x48e <gpioPortRead+0x60>
     46e:	8b 81       	ldd	r24, Y+3	; 0x03
     470:	9c 81       	ldd	r25, Y+4	; 0x04
     472:	83 30       	cpi	r24, 0x03	; 3
     474:	91 05       	cpc	r25, r1
     476:	81 f0       	breq	.+32     	; 0x498 <gpioPortRead+0x6a>
     478:	14 c0       	rjmp	.+40     	; 0x4a2 <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
     47a:	e9 e3       	ldi	r30, 0x39	; 57
     47c:	f0 e0       	ldi	r31, 0x00	; 0
     47e:	90 81       	ld	r25, Z
     480:	9a 83       	std	Y+2, r25	; 0x02
     482:	11 c0       	rjmp	.+34     	; 0x4a6 <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
     484:	e6 e3       	ldi	r30, 0x36	; 54
     486:	f0 e0       	ldi	r31, 0x00	; 0
     488:	20 81       	ld	r18, Z
     48a:	2a 83       	std	Y+2, r18	; 0x02
     48c:	0c c0       	rjmp	.+24     	; 0x4a6 <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
     48e:	e3 e3       	ldi	r30, 0x33	; 51
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	30 81       	ld	r19, Z
     494:	3a 83       	std	Y+2, r19	; 0x02
     496:	07 c0       	rjmp	.+14     	; 0x4a6 <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
     498:	e0 e3       	ldi	r30, 0x30	; 48
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	80 81       	ld	r24, Z
     49e:	8a 83       	std	Y+2, r24	; 0x02
     4a0:	02 c0       	rjmp	.+4      	; 0x4a6 <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
     4a2:	9f ef       	ldi	r25, 0xFF	; 255
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     4a8:	0f 90       	pop	r0
     4aa:	0f 90       	pop	r0
     4ac:	0f 90       	pop	r0
     4ae:	0f 90       	pop	r0
     4b0:	cf 91       	pop	r28
     4b2:	df 91       	pop	r29
     4b4:	08 95       	ret

000004b6 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
     4b6:	df 93       	push	r29
     4b8:	cf 93       	push	r28
     4ba:	cd b7       	in	r28, 0x3d	; 61
     4bc:	de b7       	in	r29, 0x3e	; 62
     4be:	29 97       	sbiw	r28, 0x09	; 9
     4c0:	0f b6       	in	r0, 0x3f	; 63
     4c2:	f8 94       	cli
     4c4:	de bf       	out	0x3e, r29	; 62
     4c6:	0f be       	out	0x3f, r0	; 63
     4c8:	cd bf       	out	0x3d, r28	; 61
     4ca:	8b 83       	std	Y+3, r24	; 0x03
     4cc:	6c 83       	std	Y+4, r22	; 0x04
     4ce:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
     4d0:	1a 82       	std	Y+2, r1	; 0x02
     4d2:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     4d4:	8b 81       	ldd	r24, Y+3	; 0x03
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	39 87       	std	Y+9, r19	; 0x09
     4dc:	28 87       	std	Y+8, r18	; 0x08
     4de:	88 85       	ldd	r24, Y+8	; 0x08
     4e0:	99 85       	ldd	r25, Y+9	; 0x09
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	91 05       	cpc	r25, r1
     4e6:	d1 f0       	breq	.+52     	; 0x51c <gpioPinDirection+0x66>
     4e8:	28 85       	ldd	r18, Y+8	; 0x08
     4ea:	39 85       	ldd	r19, Y+9	; 0x09
     4ec:	22 30       	cpi	r18, 0x02	; 2
     4ee:	31 05       	cpc	r19, r1
     4f0:	2c f4       	brge	.+10     	; 0x4fc <gpioPinDirection+0x46>
     4f2:	88 85       	ldd	r24, Y+8	; 0x08
     4f4:	99 85       	ldd	r25, Y+9	; 0x09
     4f6:	00 97       	sbiw	r24, 0x00	; 0
     4f8:	61 f0       	breq	.+24     	; 0x512 <gpioPinDirection+0x5c>
     4fa:	1e c0       	rjmp	.+60     	; 0x538 <gpioPinDirection+0x82>
     4fc:	28 85       	ldd	r18, Y+8	; 0x08
     4fe:	39 85       	ldd	r19, Y+9	; 0x09
     500:	22 30       	cpi	r18, 0x02	; 2
     502:	31 05       	cpc	r19, r1
     504:	81 f0       	breq	.+32     	; 0x526 <gpioPinDirection+0x70>
     506:	88 85       	ldd	r24, Y+8	; 0x08
     508:	99 85       	ldd	r25, Y+9	; 0x09
     50a:	83 30       	cpi	r24, 0x03	; 3
     50c:	91 05       	cpc	r25, r1
     50e:	81 f0       	breq	.+32     	; 0x530 <gpioPinDirection+0x7a>
     510:	13 c0       	rjmp	.+38     	; 0x538 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
     512:	8a e3       	ldi	r24, 0x3A	; 58
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	9a 83       	std	Y+2, r25	; 0x02
     518:	89 83       	std	Y+1, r24	; 0x01
     51a:	0e c0       	rjmp	.+28     	; 0x538 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
     51c:	87 e3       	ldi	r24, 0x37	; 55
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	9a 83       	std	Y+2, r25	; 0x02
     522:	89 83       	std	Y+1, r24	; 0x01
     524:	09 c0       	rjmp	.+18     	; 0x538 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
     526:	84 e3       	ldi	r24, 0x34	; 52
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	9a 83       	std	Y+2, r25	; 0x02
     52c:	89 83       	std	Y+1, r24	; 0x01
     52e:	04 c0       	rjmp	.+8      	; 0x538 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
     530:	81 e3       	ldi	r24, 0x31	; 49
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	9a 83       	std	Y+2, r25	; 0x02
     536:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	28 2f       	mov	r18, r24
     53c:	30 e0       	ldi	r19, 0x00	; 0
     53e:	3f 83       	std	Y+7, r19	; 0x07
     540:	2e 83       	std	Y+6, r18	; 0x06
     542:	8e 81       	ldd	r24, Y+6	; 0x06
     544:	9f 81       	ldd	r25, Y+7	; 0x07
     546:	00 97       	sbiw	r24, 0x00	; 0
     548:	31 f0       	breq	.+12     	; 0x556 <gpioPinDirection+0xa0>
     54a:	2e 81       	ldd	r18, Y+6	; 0x06
     54c:	3f 81       	ldd	r19, Y+7	; 0x07
     54e:	2f 3f       	cpi	r18, 0xFF	; 255
     550:	31 05       	cpc	r19, r1
     552:	61 f0       	breq	.+24     	; 0x56c <gpioPinDirection+0xb6>
     554:	13 c0       	rjmp	.+38     	; 0x57c <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
     556:	e9 81       	ldd	r30, Y+1	; 0x01
     558:	fa 81       	ldd	r31, Y+2	; 0x02
     55a:	80 81       	ld	r24, Z
     55c:	98 2f       	mov	r25, r24
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	80 95       	com	r24
     562:	89 23       	and	r24, r25
     564:	e9 81       	ldd	r30, Y+1	; 0x01
     566:	fa 81       	ldd	r31, Y+2	; 0x02
     568:	80 83       	st	Z, r24
     56a:	08 c0       	rjmp	.+16     	; 0x57c <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
     56c:	e9 81       	ldd	r30, Y+1	; 0x01
     56e:	fa 81       	ldd	r31, Y+2	; 0x02
     570:	90 81       	ld	r25, Z
     572:	8c 81       	ldd	r24, Y+4	; 0x04
     574:	89 2b       	or	r24, r25
     576:	e9 81       	ldd	r30, Y+1	; 0x01
     578:	fa 81       	ldd	r31, Y+2	; 0x02
     57a:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     57c:	29 96       	adiw	r28, 0x09	; 9
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	cf 91       	pop	r28
     58a:	df 91       	pop	r29
     58c:	08 95       	ret

0000058e <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	cd b7       	in	r28, 0x3d	; 61
     594:	de b7       	in	r29, 0x3e	; 62
     596:	29 97       	sbiw	r28, 0x09	; 9
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	8b 83       	std	Y+3, r24	; 0x03
     5a4:	6c 83       	std	Y+4, r22	; 0x04
     5a6:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
     5a8:	1a 82       	std	Y+2, r1	; 0x02
     5aa:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     5ac:	8b 81       	ldd	r24, Y+3	; 0x03
     5ae:	28 2f       	mov	r18, r24
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	39 87       	std	Y+9, r19	; 0x09
     5b4:	28 87       	std	Y+8, r18	; 0x08
     5b6:	88 85       	ldd	r24, Y+8	; 0x08
     5b8:	99 85       	ldd	r25, Y+9	; 0x09
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	91 05       	cpc	r25, r1
     5be:	d1 f0       	breq	.+52     	; 0x5f4 <gpioPinWrite+0x66>
     5c0:	28 85       	ldd	r18, Y+8	; 0x08
     5c2:	39 85       	ldd	r19, Y+9	; 0x09
     5c4:	22 30       	cpi	r18, 0x02	; 2
     5c6:	31 05       	cpc	r19, r1
     5c8:	2c f4       	brge	.+10     	; 0x5d4 <gpioPinWrite+0x46>
     5ca:	88 85       	ldd	r24, Y+8	; 0x08
     5cc:	99 85       	ldd	r25, Y+9	; 0x09
     5ce:	00 97       	sbiw	r24, 0x00	; 0
     5d0:	61 f0       	breq	.+24     	; 0x5ea <gpioPinWrite+0x5c>
     5d2:	1e c0       	rjmp	.+60     	; 0x610 <gpioPinWrite+0x82>
     5d4:	28 85       	ldd	r18, Y+8	; 0x08
     5d6:	39 85       	ldd	r19, Y+9	; 0x09
     5d8:	22 30       	cpi	r18, 0x02	; 2
     5da:	31 05       	cpc	r19, r1
     5dc:	81 f0       	breq	.+32     	; 0x5fe <gpioPinWrite+0x70>
     5de:	88 85       	ldd	r24, Y+8	; 0x08
     5e0:	99 85       	ldd	r25, Y+9	; 0x09
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	91 05       	cpc	r25, r1
     5e6:	81 f0       	breq	.+32     	; 0x608 <gpioPinWrite+0x7a>
     5e8:	13 c0       	rjmp	.+38     	; 0x610 <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
     5ea:	8b e3       	ldi	r24, 0x3B	; 59
     5ec:	90 e0       	ldi	r25, 0x00	; 0
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01
     5f2:	0e c0       	rjmp	.+28     	; 0x610 <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
     5f4:	88 e3       	ldi	r24, 0x38	; 56
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	9a 83       	std	Y+2, r25	; 0x02
     5fa:	89 83       	std	Y+1, r24	; 0x01
     5fc:	09 c0       	rjmp	.+18     	; 0x610 <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
     5fe:	85 e3       	ldi	r24, 0x35	; 53
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	9a 83       	std	Y+2, r25	; 0x02
     604:	89 83       	std	Y+1, r24	; 0x01
     606:	04 c0       	rjmp	.+8      	; 0x610 <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
     608:	82 e3       	ldi	r24, 0x32	; 50
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	9a 83       	std	Y+2, r25	; 0x02
     60e:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
     610:	8d 81       	ldd	r24, Y+5	; 0x05
     612:	28 2f       	mov	r18, r24
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	3f 83       	std	Y+7, r19	; 0x07
     618:	2e 83       	std	Y+6, r18	; 0x06
     61a:	8e 81       	ldd	r24, Y+6	; 0x06
     61c:	9f 81       	ldd	r25, Y+7	; 0x07
     61e:	00 97       	sbiw	r24, 0x00	; 0
     620:	31 f0       	breq	.+12     	; 0x62e <gpioPinWrite+0xa0>
     622:	2e 81       	ldd	r18, Y+6	; 0x06
     624:	3f 81       	ldd	r19, Y+7	; 0x07
     626:	2f 3f       	cpi	r18, 0xFF	; 255
     628:	31 05       	cpc	r19, r1
     62a:	61 f0       	breq	.+24     	; 0x644 <gpioPinWrite+0xb6>
     62c:	13 c0       	rjmp	.+38     	; 0x654 <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
     62e:	e9 81       	ldd	r30, Y+1	; 0x01
     630:	fa 81       	ldd	r31, Y+2	; 0x02
     632:	80 81       	ld	r24, Z
     634:	98 2f       	mov	r25, r24
     636:	8c 81       	ldd	r24, Y+4	; 0x04
     638:	80 95       	com	r24
     63a:	89 23       	and	r24, r25
     63c:	e9 81       	ldd	r30, Y+1	; 0x01
     63e:	fa 81       	ldd	r31, Y+2	; 0x02
     640:	80 83       	st	Z, r24
     642:	08 c0       	rjmp	.+16     	; 0x654 <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
     644:	e9 81       	ldd	r30, Y+1	; 0x01
     646:	fa 81       	ldd	r31, Y+2	; 0x02
     648:	90 81       	ld	r25, Z
     64a:	8c 81       	ldd	r24, Y+4	; 0x04
     64c:	89 2b       	or	r24, r25
     64e:	e9 81       	ldd	r30, Y+1	; 0x01
     650:	fa 81       	ldd	r31, Y+2	; 0x02
     652:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     654:	29 96       	adiw	r28, 0x09	; 9
     656:	0f b6       	in	r0, 0x3f	; 63
     658:	f8 94       	cli
     65a:	de bf       	out	0x3e, r29	; 62
     65c:	0f be       	out	0x3f, r0	; 63
     65e:	cd bf       	out	0x3d, r28	; 61
     660:	cf 91       	pop	r28
     662:	df 91       	pop	r29
     664:	08 95       	ret

00000666 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
     666:	df 93       	push	r29
     668:	cf 93       	push	r28
     66a:	00 d0       	rcall	.+0      	; 0x66c <gpioPinToggle+0x6>
     66c:	00 d0       	rcall	.+0      	; 0x66e <gpioPinToggle+0x8>
     66e:	cd b7       	in	r28, 0x3d	; 61
     670:	de b7       	in	r29, 0x3e	; 62
     672:	89 83       	std	Y+1, r24	; 0x01
     674:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
     676:	89 81       	ldd	r24, Y+1	; 0x01
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	3c 83       	std	Y+4, r19	; 0x04
     67e:	2b 83       	std	Y+3, r18	; 0x03
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	9c 81       	ldd	r25, Y+4	; 0x04
     684:	81 30       	cpi	r24, 0x01	; 1
     686:	91 05       	cpc	r25, r1
     688:	f1 f0       	breq	.+60     	; 0x6c6 <gpioPinToggle+0x60>
     68a:	2b 81       	ldd	r18, Y+3	; 0x03
     68c:	3c 81       	ldd	r19, Y+4	; 0x04
     68e:	22 30       	cpi	r18, 0x02	; 2
     690:	31 05       	cpc	r19, r1
     692:	2c f4       	brge	.+10     	; 0x69e <gpioPinToggle+0x38>
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	00 97       	sbiw	r24, 0x00	; 0
     69a:	61 f0       	breq	.+24     	; 0x6b4 <gpioPinToggle+0x4e>
     69c:	2e c0       	rjmp	.+92     	; 0x6fa <gpioPinToggle+0x94>
     69e:	2b 81       	ldd	r18, Y+3	; 0x03
     6a0:	3c 81       	ldd	r19, Y+4	; 0x04
     6a2:	22 30       	cpi	r18, 0x02	; 2
     6a4:	31 05       	cpc	r19, r1
     6a6:	c1 f0       	breq	.+48     	; 0x6d8 <gpioPinToggle+0x72>
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	83 30       	cpi	r24, 0x03	; 3
     6ae:	91 05       	cpc	r25, r1
     6b0:	e1 f0       	breq	.+56     	; 0x6ea <gpioPinToggle+0x84>
     6b2:	23 c0       	rjmp	.+70     	; 0x6fa <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
     6b4:	ab e3       	ldi	r26, 0x3B	; 59
     6b6:	b0 e0       	ldi	r27, 0x00	; 0
     6b8:	eb e3       	ldi	r30, 0x3B	; 59
     6ba:	f0 e0       	ldi	r31, 0x00	; 0
     6bc:	90 81       	ld	r25, Z
     6be:	8a 81       	ldd	r24, Y+2	; 0x02
     6c0:	89 27       	eor	r24, r25
     6c2:	8c 93       	st	X, r24
     6c4:	1a c0       	rjmp	.+52     	; 0x6fa <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
     6c6:	a8 e3       	ldi	r26, 0x38	; 56
     6c8:	b0 e0       	ldi	r27, 0x00	; 0
     6ca:	e8 e3       	ldi	r30, 0x38	; 56
     6cc:	f0 e0       	ldi	r31, 0x00	; 0
     6ce:	90 81       	ld	r25, Z
     6d0:	8a 81       	ldd	r24, Y+2	; 0x02
     6d2:	89 27       	eor	r24, r25
     6d4:	8c 93       	st	X, r24
     6d6:	11 c0       	rjmp	.+34     	; 0x6fa <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
     6d8:	a5 e3       	ldi	r26, 0x35	; 53
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	e5 e3       	ldi	r30, 0x35	; 53
     6de:	f0 e0       	ldi	r31, 0x00	; 0
     6e0:	90 81       	ld	r25, Z
     6e2:	8a 81       	ldd	r24, Y+2	; 0x02
     6e4:	89 27       	eor	r24, r25
     6e6:	8c 93       	st	X, r24
     6e8:	08 c0       	rjmp	.+16     	; 0x6fa <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
     6ea:	a2 e3       	ldi	r26, 0x32	; 50
     6ec:	b0 e0       	ldi	r27, 0x00	; 0
     6ee:	e2 e3       	ldi	r30, 0x32	; 50
     6f0:	f0 e0       	ldi	r31, 0x00	; 0
     6f2:	90 81       	ld	r25, Z
     6f4:	8a 81       	ldd	r24, Y+2	; 0x02
     6f6:	89 27       	eor	r24, r25
     6f8:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
     702:	cf 91       	pop	r28
     704:	df 91       	pop	r29
     706:	08 95       	ret

00000708 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
     708:	df 93       	push	r29
     70a:	cf 93       	push	r28
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	29 97       	sbiw	r28, 0x09	; 9
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	89 83       	std	Y+1, r24	; 0x01
     71e:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
     720:	89 81       	ldd	r24, Y+1	; 0x01
     722:	28 2f       	mov	r18, r24
     724:	30 e0       	ldi	r19, 0x00	; 0
     726:	3d 83       	std	Y+5, r19	; 0x05
     728:	2c 83       	std	Y+4, r18	; 0x04
     72a:	8c 81       	ldd	r24, Y+4	; 0x04
     72c:	9d 81       	ldd	r25, Y+5	; 0x05
     72e:	81 30       	cpi	r24, 0x01	; 1
     730:	91 05       	cpc	r25, r1
     732:	19 f1       	breq	.+70     	; 0x77a <gpioPinRead+0x72>
     734:	2c 81       	ldd	r18, Y+4	; 0x04
     736:	3d 81       	ldd	r19, Y+5	; 0x05
     738:	22 30       	cpi	r18, 0x02	; 2
     73a:	31 05       	cpc	r19, r1
     73c:	2c f4       	brge	.+10     	; 0x748 <gpioPinRead+0x40>
     73e:	8c 81       	ldd	r24, Y+4	; 0x04
     740:	9d 81       	ldd	r25, Y+5	; 0x05
     742:	00 97       	sbiw	r24, 0x00	; 0
     744:	61 f0       	breq	.+24     	; 0x75e <gpioPinRead+0x56>
     746:	43 c0       	rjmp	.+134    	; 0x7ce <gpioPinRead+0xc6>
     748:	2c 81       	ldd	r18, Y+4	; 0x04
     74a:	3d 81       	ldd	r19, Y+5	; 0x05
     74c:	22 30       	cpi	r18, 0x02	; 2
     74e:	31 05       	cpc	r19, r1
     750:	11 f1       	breq	.+68     	; 0x796 <gpioPinRead+0x8e>
     752:	8c 81       	ldd	r24, Y+4	; 0x04
     754:	9d 81       	ldd	r25, Y+5	; 0x05
     756:	83 30       	cpi	r24, 0x03	; 3
     758:	91 05       	cpc	r25, r1
     75a:	59 f1       	breq	.+86     	; 0x7b2 <gpioPinRead+0xaa>
     75c:	38 c0       	rjmp	.+112    	; 0x7ce <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
     75e:	e9 e3       	ldi	r30, 0x39	; 57
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	90 81       	ld	r25, Z
     764:	8a 81       	ldd	r24, Y+2	; 0x02
     766:	89 23       	and	r24, r25
     768:	8e 83       	std	Y+6, r24	; 0x06
     76a:	9e 81       	ldd	r25, Y+6	; 0x06
     76c:	99 23       	and	r25, r25
     76e:	11 f0       	breq	.+4      	; 0x774 <gpioPinRead+0x6c>
     770:	21 e0       	ldi	r18, 0x01	; 1
     772:	2e 83       	std	Y+6, r18	; 0x06
     774:	3e 81       	ldd	r19, Y+6	; 0x06
     776:	3b 83       	std	Y+3, r19	; 0x03
     778:	2c c0       	rjmp	.+88     	; 0x7d2 <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
     77a:	e6 e3       	ldi	r30, 0x36	; 54
     77c:	f0 e0       	ldi	r31, 0x00	; 0
     77e:	90 81       	ld	r25, Z
     780:	8a 81       	ldd	r24, Y+2	; 0x02
     782:	89 23       	and	r24, r25
     784:	8f 83       	std	Y+7, r24	; 0x07
     786:	8f 81       	ldd	r24, Y+7	; 0x07
     788:	88 23       	and	r24, r24
     78a:	11 f0       	breq	.+4      	; 0x790 <gpioPinRead+0x88>
     78c:	91 e0       	ldi	r25, 0x01	; 1
     78e:	9f 83       	std	Y+7, r25	; 0x07
     790:	2f 81       	ldd	r18, Y+7	; 0x07
     792:	2b 83       	std	Y+3, r18	; 0x03
     794:	1e c0       	rjmp	.+60     	; 0x7d2 <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
     796:	e3 e3       	ldi	r30, 0x33	; 51
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	90 81       	ld	r25, Z
     79c:	8a 81       	ldd	r24, Y+2	; 0x02
     79e:	89 23       	and	r24, r25
     7a0:	88 87       	std	Y+8, r24	; 0x08
     7a2:	38 85       	ldd	r19, Y+8	; 0x08
     7a4:	33 23       	and	r19, r19
     7a6:	11 f0       	breq	.+4      	; 0x7ac <gpioPinRead+0xa4>
     7a8:	81 e0       	ldi	r24, 0x01	; 1
     7aa:	88 87       	std	Y+8, r24	; 0x08
     7ac:	98 85       	ldd	r25, Y+8	; 0x08
     7ae:	9b 83       	std	Y+3, r25	; 0x03
     7b0:	10 c0       	rjmp	.+32     	; 0x7d2 <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
     7b2:	e0 e3       	ldi	r30, 0x30	; 48
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	90 81       	ld	r25, Z
     7b8:	8a 81       	ldd	r24, Y+2	; 0x02
     7ba:	89 23       	and	r24, r25
     7bc:	89 87       	std	Y+9, r24	; 0x09
     7be:	29 85       	ldd	r18, Y+9	; 0x09
     7c0:	22 23       	and	r18, r18
     7c2:	11 f0       	breq	.+4      	; 0x7c8 <gpioPinRead+0xc0>
     7c4:	31 e0       	ldi	r19, 0x01	; 1
     7c6:	39 87       	std	Y+9, r19	; 0x09
     7c8:	89 85       	ldd	r24, Y+9	; 0x09
     7ca:	8b 83       	std	Y+3, r24	; 0x03
     7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
     7ce:	9f ef       	ldi	r25, 0xFF	; 255
     7d0:	9b 83       	std	Y+3, r25	; 0x03
     7d2:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
     7d4:	29 96       	adiw	r28, 0x09	; 9
     7d6:	0f b6       	in	r0, 0x3f	; 63
     7d8:	f8 94       	cli
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	0f be       	out	0x3f, r0	; 63
     7de:	cd bf       	out	0x3d, r28	; 61
     7e0:	cf 91       	pop	r28
     7e2:	df 91       	pop	r29
     7e4:	08 95       	ret

000007e6 <__vector_1>:
extern uint8_t gu8_completionFlag;

/*- INTERRUPT APIs IMPLEMENTATION --------------------------*/

void EXTERNAL_INTERRUPT0 (void)
{
     7e6:	78 94       	sei
     7e8:	1f 92       	push	r1
     7ea:	0f 92       	push	r0
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	0f 92       	push	r0
     7f0:	11 24       	eor	r1, r1
     7f2:	df 93       	push	r29
     7f4:	cf 93       	push	r28
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62

}
     7fa:	cf 91       	pop	r28
     7fc:	df 91       	pop	r29
     7fe:	0f 90       	pop	r0
     800:	0f be       	out	0x3f, r0	; 63
     802:	0f 90       	pop	r0
     804:	1f 90       	pop	r1
     806:	18 95       	reti

00000808 <__vector_2>:

void EXTERNAL_INTERRUPT1 (void)
{
     808:	78 94       	sei
     80a:	1f 92       	push	r1
     80c:	0f 92       	push	r0
     80e:	0f b6       	in	r0, 0x3f	; 63
     810:	0f 92       	push	r0
     812:	11 24       	eor	r1, r1
     814:	df 93       	push	r29
     816:	cf 93       	push	r28
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62

}
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	0f 90       	pop	r0
     822:	0f be       	out	0x3f, r0	; 63
     824:	0f 90       	pop	r0
     826:	1f 90       	pop	r1
     828:	18 95       	reti

0000082a <__vector_3>:

void EXTERNAL_INTERRUPT2 (void)
{
     82a:	78 94       	sei
     82c:	1f 92       	push	r1
     82e:	0f 92       	push	r0
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	0f 92       	push	r0
     834:	11 24       	eor	r1, r1
     836:	df 93       	push	r29
     838:	cf 93       	push	r28
     83a:	cd b7       	in	r28, 0x3d	; 61
     83c:	de b7       	in	r29, 0x3e	; 62

}
     83e:	cf 91       	pop	r28
     840:	df 91       	pop	r29
     842:	0f 90       	pop	r0
     844:	0f be       	out	0x3f, r0	; 63
     846:	0f 90       	pop	r0
     848:	1f 90       	pop	r1
     84a:	18 95       	reti

0000084c <__vector_10>:

void TIMER0_CTC_MODE_INTERRUPT (void)
{
     84c:	78 94       	sei
     84e:	1f 92       	push	r1
     850:	0f 92       	push	r0
     852:	0f b6       	in	r0, 0x3f	; 63
     854:	0f 92       	push	r0
     856:	11 24       	eor	r1, r1
     858:	2f 93       	push	r18
     85a:	3f 93       	push	r19
     85c:	4f 93       	push	r20
     85e:	5f 93       	push	r21
     860:	6f 93       	push	r22
     862:	7f 93       	push	r23
     864:	8f 93       	push	r24
     866:	9f 93       	push	r25
     868:	af 93       	push	r26
     86a:	bf 93       	push	r27
     86c:	ef 93       	push	r30
     86e:	ff 93       	push	r31
     870:	df 93       	push	r29
     872:	cf 93       	push	r28
     874:	cd b7       	in	r28, 0x3d	; 61
     876:	de b7       	in	r29, 0x3e	; 62
	/* A global interrupt variable used for controlling the motor speed every time the duty cycle changes */
	gu16_globalInterruptVariable++;
     878:	80 91 64 00 	lds	r24, 0x0064
     87c:	90 91 65 00 	lds	r25, 0x0065
     880:	01 96       	adiw	r24, 0x01	; 1
     882:	90 93 65 00 	sts	0x0065, r25
     886:	80 93 64 00 	sts	0x0064, r24
	
	if(gu16_globalInterruptVariable % 100 == gu8_dutyCycle)
     88a:	80 91 64 00 	lds	r24, 0x0064
     88e:	90 91 65 00 	lds	r25, 0x0065
     892:	24 e6       	ldi	r18, 0x64	; 100
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	b9 01       	movw	r22, r18
     898:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     89c:	9c 01       	movw	r18, r24
     89e:	80 91 63 00 	lds	r24, 0x0063
     8a2:	88 2f       	mov	r24, r24
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	28 17       	cp	r18, r24
     8a8:	39 07       	cpc	r19, r25
     8aa:	c1 f4       	brne	.+48     	; 0x8dc <__stack+0x7d>
	{
		gpioPinWrite(GPIOD, BIT2, LOW);
     8ac:	83 e0       	ldi	r24, 0x03	; 3
     8ae:	64 e0       	ldi	r22, 0x04	; 4
     8b0:	40 e0       	ldi	r20, 0x00	; 0
     8b2:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		if(gu8_flag != 2)
     8b6:	80 91 68 00 	lds	r24, 0x0068
     8ba:	90 91 69 00 	lds	r25, 0x0069
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	91 05       	cpc	r25, r1
     8c2:	31 f0       	breq	.+12     	; 0x8d0 <__stack+0x71>
			gpioPinWrite(GPIOD, BIT6, LOW);
     8c4:	83 e0       	ldi	r24, 0x03	; 3
     8c6:	60 e4       	ldi	r22, 0x40	; 64
     8c8:	40 e0       	ldi	r20, 0x00	; 0
     8ca:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     8ce:	2c c0       	rjmp	.+88     	; 0x928 <__stack+0xc9>
		else
			gpioPinWrite(GPIOD, BIT7, LOW);
     8d0:	83 e0       	ldi	r24, 0x03	; 3
     8d2:	60 e8       	ldi	r22, 0x80	; 128
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     8da:	26 c0       	rjmp	.+76     	; 0x928 <__stack+0xc9>
	}else if(gu16_globalInterruptVariable % 100 == 0)
     8dc:	80 91 64 00 	lds	r24, 0x0064
     8e0:	90 91 65 00 	lds	r25, 0x0065
     8e4:	24 e6       	ldi	r18, 0x64	; 100
     8e6:	30 e0       	ldi	r19, 0x00	; 0
     8e8:	b9 01       	movw	r22, r18
     8ea:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     8ee:	00 97       	sbiw	r24, 0x00	; 0
     8f0:	d9 f4       	brne	.+54     	; 0x928 <__stack+0xc9>
	{
		gpioPinWrite(GPIOD, BIT2, HIGH);
     8f2:	83 e0       	ldi	r24, 0x03	; 3
     8f4:	64 e0       	ldi	r22, 0x04	; 4
     8f6:	4f ef       	ldi	r20, 0xFF	; 255
     8f8:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		if(gu8_flag != 2)
     8fc:	80 91 68 00 	lds	r24, 0x0068
     900:	90 91 69 00 	lds	r25, 0x0069
     904:	82 30       	cpi	r24, 0x02	; 2
     906:	91 05       	cpc	r25, r1
     908:	31 f0       	breq	.+12     	; 0x916 <__stack+0xb7>
			gpioPinWrite(GPIOD, BIT6, HIGH);
     90a:	83 e0       	ldi	r24, 0x03	; 3
     90c:	60 e4       	ldi	r22, 0x40	; 64
     90e:	4f ef       	ldi	r20, 0xFF	; 255
     910:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0xc1>
		else
			gpioPinWrite(GPIOD, BIT7, HIGH);
     916:	83 e0       	ldi	r24, 0x03	; 3
     918:	60 e8       	ldi	r22, 0x80	; 128
     91a:	4f ef       	ldi	r20, 0xFF	; 255
     91c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
			
		gu16_globalInterruptVariable = 0;
     920:	10 92 65 00 	sts	0x0065, r1
     924:	10 92 64 00 	sts	0x0064, r1
	}

	if(gu8_completionFlag == 1)
     928:	80 91 62 00 	lds	r24, 0x0062
     92c:	81 30       	cpi	r24, 0x01	; 1
     92e:	09 f4       	brne	.+2      	; 0x932 <__stack+0xd3>
	{
		cli();
     930:	f8 94       	cli
	}

	gu16_delayCounter++;
     932:	80 91 66 00 	lds	r24, 0x0066
     936:	90 91 67 00 	lds	r25, 0x0067
     93a:	01 96       	adiw	r24, 0x01	; 1
     93c:	90 93 67 00 	sts	0x0067, r25
     940:	80 93 66 00 	sts	0x0066, r24

	if(gu16_delayCounter == 650)
     944:	80 91 66 00 	lds	r24, 0x0066
     948:	90 91 67 00 	lds	r25, 0x0067
     94c:	22 e0       	ldi	r18, 0x02	; 2
     94e:	8a 38       	cpi	r24, 0x8A	; 138
     950:	92 07       	cpc	r25, r18
     952:	39 f5       	brne	.+78     	; 0x9a2 <__stack+0x143>
	{
		if(gu8_flag == 0)
     954:	80 91 68 00 	lds	r24, 0x0068
     958:	90 91 69 00 	lds	r25, 0x0069
     95c:	00 97       	sbiw	r24, 0x00	; 0
     95e:	31 f4       	brne	.+12     	; 0x96c <__stack+0x10d>
			gu8_dutyCycle++;
     960:	80 91 63 00 	lds	r24, 0x0063
     964:	8f 5f       	subi	r24, 0xFF	; 255
     966:	80 93 63 00 	sts	0x0063, r24
     96a:	17 c0       	rjmp	.+46     	; 0x99a <__stack+0x13b>
		else if(gu8_flag == 1)
     96c:	80 91 68 00 	lds	r24, 0x0068
     970:	90 91 69 00 	lds	r25, 0x0069
     974:	81 30       	cpi	r24, 0x01	; 1
     976:	91 05       	cpc	r25, r1
     978:	31 f4       	brne	.+12     	; 0x986 <__stack+0x127>
			gu8_dutyCycle--;
     97a:	80 91 63 00 	lds	r24, 0x0063
     97e:	81 50       	subi	r24, 0x01	; 1
     980:	80 93 63 00 	sts	0x0063, r24
     984:	0a c0       	rjmp	.+20     	; 0x99a <__stack+0x13b>
		else if(gu8_flag == 2)
     986:	80 91 68 00 	lds	r24, 0x0068
     98a:	90 91 69 00 	lds	r25, 0x0069
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	91 05       	cpc	r25, r1
     992:	19 f4       	brne	.+6      	; 0x99a <__stack+0x13b>
			gu8_completionFlag = 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	80 93 62 00 	sts	0x0062, r24
		gu16_delayCounter = 0;
     99a:	10 92 67 00 	sts	0x0067, r1
     99e:	10 92 66 00 	sts	0x0066, r1
	}

	if(gu8_dutyCycle >= 100 && gu8_flag == 0)
     9a2:	80 91 63 00 	lds	r24, 0x0063
     9a6:	84 36       	cpi	r24, 0x64	; 100
     9a8:	68 f0       	brcs	.+26     	; 0x9c4 <__stack+0x165>
     9aa:	80 91 68 00 	lds	r24, 0x0068
     9ae:	90 91 69 00 	lds	r25, 0x0069
     9b2:	00 97       	sbiw	r24, 0x00	; 0
     9b4:	39 f4       	brne	.+14     	; 0x9c4 <__stack+0x165>
	{
		gu8_flag = 1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	90 93 69 00 	sts	0x0069, r25
     9be:	80 93 68 00 	sts	0x0068, r24
     9c2:	19 c0       	rjmp	.+50     	; 0x9f6 <__stack+0x197>
	}
	else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
     9c4:	80 91 63 00 	lds	r24, 0x0063
     9c8:	88 23       	and	r24, r24
     9ca:	a9 f4       	brne	.+42     	; 0x9f6 <__stack+0x197>
     9cc:	80 91 68 00 	lds	r24, 0x0068
     9d0:	90 91 69 00 	lds	r25, 0x0069
     9d4:	81 30       	cpi	r24, 0x01	; 1
     9d6:	91 05       	cpc	r25, r1
     9d8:	71 f4       	brne	.+28     	; 0x9f6 <__stack+0x197>
	{
		gu8_flag = 2;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	90 93 69 00 	sts	0x0069, r25
     9e2:	80 93 68 00 	sts	0x0068, r24
		gu8_dutyCycle = 20;
     9e6:	84 e1       	ldi	r24, 0x14	; 20
     9e8:	80 93 63 00 	sts	0x0063, r24
		gpioPinWrite(GPIOD, BIT6, LOW);
     9ec:	83 e0       	ldi	r24, 0x03	; 3
     9ee:	60 e4       	ldi	r22, 0x40	; 64
     9f0:	40 e0       	ldi	r20, 0x00	; 0
     9f2:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	}
}
     9f6:	cf 91       	pop	r28
     9f8:	df 91       	pop	r29
     9fa:	ff 91       	pop	r31
     9fc:	ef 91       	pop	r30
     9fe:	bf 91       	pop	r27
     a00:	af 91       	pop	r26
     a02:	9f 91       	pop	r25
     a04:	8f 91       	pop	r24
     a06:	7f 91       	pop	r23
     a08:	6f 91       	pop	r22
     a0a:	5f 91       	pop	r21
     a0c:	4f 91       	pop	r20
     a0e:	3f 91       	pop	r19
     a10:	2f 91       	pop	r18
     a12:	0f 90       	pop	r0
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	0f 90       	pop	r0
     a18:	1f 90       	pop	r1
     a1a:	18 95       	reti

00000a1c <__vector_11>:

void TIMER0_OVF_MODE_INTERRUPT (void)
{
     a1c:	78 94       	sei
     a1e:	1f 92       	push	r1
     a20:	0f 92       	push	r0
     a22:	0f b6       	in	r0, 0x3f	; 63
     a24:	0f 92       	push	r0
     a26:	11 24       	eor	r1, r1
     a28:	df 93       	push	r29
     a2a:	cf 93       	push	r28
     a2c:	cd b7       	in	r28, 0x3d	; 61
     a2e:	de b7       	in	r29, 0x3e	; 62

}
     a30:	cf 91       	pop	r28
     a32:	df 91       	pop	r29
     a34:	0f 90       	pop	r0
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	0f 90       	pop	r0
     a3a:	1f 90       	pop	r1
     a3c:	18 95       	reti

00000a3e <__vector_6>:

void TIMER1_ICU_MODE_INTERRUPT (void)
{
     a3e:	78 94       	sei
     a40:	1f 92       	push	r1
     a42:	0f 92       	push	r0
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	0f 92       	push	r0
     a48:	11 24       	eor	r1, r1
     a4a:	df 93       	push	r29
     a4c:	cf 93       	push	r28
     a4e:	cd b7       	in	r28, 0x3d	; 61
     a50:	de b7       	in	r29, 0x3e	; 62

}
     a52:	cf 91       	pop	r28
     a54:	df 91       	pop	r29
     a56:	0f 90       	pop	r0
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	0f 90       	pop	r0
     a5c:	1f 90       	pop	r1
     a5e:	18 95       	reti

00000a60 <__vector_7>:

void TIMER1_CTC_A_MODE_INTERRUPT (void)
{
     a60:	78 94       	sei
     a62:	1f 92       	push	r1
     a64:	0f 92       	push	r0
     a66:	0f b6       	in	r0, 0x3f	; 63
     a68:	0f 92       	push	r0
     a6a:	11 24       	eor	r1, r1
     a6c:	2f 93       	push	r18
     a6e:	3f 93       	push	r19
     a70:	4f 93       	push	r20
     a72:	5f 93       	push	r21
     a74:	6f 93       	push	r22
     a76:	7f 93       	push	r23
     a78:	8f 93       	push	r24
     a7a:	9f 93       	push	r25
     a7c:	af 93       	push	r26
     a7e:	bf 93       	push	r27
     a80:	ef 93       	push	r30
     a82:	ff 93       	push	r31
     a84:	df 93       	push	r29
     a86:	cf 93       	push	r28
     a88:	cd b7       	in	r28, 0x3d	; 61
     a8a:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);

gu16_globalInterruptVariable++;
     a8c:	80 91 64 00 	lds	r24, 0x0064
     a90:	90 91 65 00 	lds	r25, 0x0065
     a94:	01 96       	adiw	r24, 0x01	; 1
     a96:	90 93 65 00 	sts	0x0065, r25
     a9a:	80 93 64 00 	sts	0x0064, r24

if(gu16_globalInterruptVariable % 100 == gu8_dutyCycle)
     a9e:	80 91 64 00 	lds	r24, 0x0064
     aa2:	90 91 65 00 	lds	r25, 0x0065
     aa6:	24 e6       	ldi	r18, 0x64	; 100
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	b9 01       	movw	r22, r18
     aac:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     ab0:	9c 01       	movw	r18, r24
     ab2:	80 91 63 00 	lds	r24, 0x0063
     ab6:	88 2f       	mov	r24, r24
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	28 17       	cp	r18, r24
     abc:	39 07       	cpc	r19, r25
     abe:	c1 f4       	brne	.+48     	; 0xaf0 <__vector_7+0x90>
{
	gpioPinWrite(GPIOD, BIT2, LOW);
     ac0:	83 e0       	ldi	r24, 0x03	; 3
     ac2:	64 e0       	ldi	r22, 0x04	; 4
     ac4:	40 e0       	ldi	r20, 0x00	; 0
     ac6:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	if(gu8_flag != 2)
     aca:	80 91 68 00 	lds	r24, 0x0068
     ace:	90 91 69 00 	lds	r25, 0x0069
     ad2:	82 30       	cpi	r24, 0x02	; 2
     ad4:	91 05       	cpc	r25, r1
     ad6:	31 f0       	breq	.+12     	; 0xae4 <__vector_7+0x84>
	gpioPinWrite(GPIOD, BIT6, LOW);
     ad8:	83 e0       	ldi	r24, 0x03	; 3
     ada:	60 e4       	ldi	r22, 0x40	; 64
     adc:	40 e0       	ldi	r20, 0x00	; 0
     ade:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     ae2:	2c c0       	rjmp	.+88     	; 0xb3c <__vector_7+0xdc>
	else
	gpioPinWrite(GPIOD, BIT7, LOW);
     ae4:	83 e0       	ldi	r24, 0x03	; 3
     ae6:	60 e8       	ldi	r22, 0x80	; 128
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     aee:	26 c0       	rjmp	.+76     	; 0xb3c <__vector_7+0xdc>
}else if(gu16_globalInterruptVariable % 100 == 0)
     af0:	80 91 64 00 	lds	r24, 0x0064
     af4:	90 91 65 00 	lds	r25, 0x0065
     af8:	24 e6       	ldi	r18, 0x64	; 100
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	b9 01       	movw	r22, r18
     afe:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     b02:	00 97       	sbiw	r24, 0x00	; 0
     b04:	d9 f4       	brne	.+54     	; 0xb3c <__vector_7+0xdc>
{
	gpioPinWrite(GPIOD, BIT2, HIGH);
     b06:	83 e0       	ldi	r24, 0x03	; 3
     b08:	64 e0       	ldi	r22, 0x04	; 4
     b0a:	4f ef       	ldi	r20, 0xFF	; 255
     b0c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	if(gu8_flag != 2)
     b10:	80 91 68 00 	lds	r24, 0x0068
     b14:	90 91 69 00 	lds	r25, 0x0069
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	91 05       	cpc	r25, r1
     b1c:	31 f0       	breq	.+12     	; 0xb2a <__vector_7+0xca>
	gpioPinWrite(GPIOD, BIT6, HIGH);
     b1e:	83 e0       	ldi	r24, 0x03	; 3
     b20:	60 e4       	ldi	r22, 0x40	; 64
     b22:	4f ef       	ldi	r20, 0xFF	; 255
     b24:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <__vector_7+0xd4>
	else
	gpioPinWrite(GPIOD, BIT7, HIGH);
     b2a:	83 e0       	ldi	r24, 0x03	; 3
     b2c:	60 e8       	ldi	r22, 0x80	; 128
     b2e:	4f ef       	ldi	r20, 0xFF	; 255
     b30:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	
	gu16_globalInterruptVariable = 0;
     b34:	10 92 65 00 	sts	0x0065, r1
     b38:	10 92 64 00 	sts	0x0064, r1
}

if(gu8_completionFlag == 1)
     b3c:	80 91 62 00 	lds	r24, 0x0062
     b40:	81 30       	cpi	r24, 0x01	; 1
     b42:	09 f4       	brne	.+2      	; 0xb46 <__vector_7+0xe6>
{
	cli();
     b44:	f8 94       	cli
}

gu16_delayCounter++;
     b46:	80 91 66 00 	lds	r24, 0x0066
     b4a:	90 91 67 00 	lds	r25, 0x0067
     b4e:	01 96       	adiw	r24, 0x01	; 1
     b50:	90 93 67 00 	sts	0x0067, r25
     b54:	80 93 66 00 	sts	0x0066, r24

if(gu16_delayCounter == 540)
     b58:	80 91 66 00 	lds	r24, 0x0066
     b5c:	90 91 67 00 	lds	r25, 0x0067
     b60:	22 e0       	ldi	r18, 0x02	; 2
     b62:	8c 31       	cpi	r24, 0x1C	; 28
     b64:	92 07       	cpc	r25, r18
     b66:	39 f5       	brne	.+78     	; 0xbb6 <__vector_7+0x156>
{
	if(gu8_flag == 0)
     b68:	80 91 68 00 	lds	r24, 0x0068
     b6c:	90 91 69 00 	lds	r25, 0x0069
     b70:	00 97       	sbiw	r24, 0x00	; 0
     b72:	31 f4       	brne	.+12     	; 0xb80 <__vector_7+0x120>
	gu8_dutyCycle++;
     b74:	80 91 63 00 	lds	r24, 0x0063
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	80 93 63 00 	sts	0x0063, r24
     b7e:	17 c0       	rjmp	.+46     	; 0xbae <__vector_7+0x14e>
	else if(gu8_flag == 1)
     b80:	80 91 68 00 	lds	r24, 0x0068
     b84:	90 91 69 00 	lds	r25, 0x0069
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	91 05       	cpc	r25, r1
     b8c:	31 f4       	brne	.+12     	; 0xb9a <__vector_7+0x13a>
	gu8_dutyCycle--;
     b8e:	80 91 63 00 	lds	r24, 0x0063
     b92:	81 50       	subi	r24, 0x01	; 1
     b94:	80 93 63 00 	sts	0x0063, r24
     b98:	0a c0       	rjmp	.+20     	; 0xbae <__vector_7+0x14e>
	else if(gu8_flag == 2)
     b9a:	80 91 68 00 	lds	r24, 0x0068
     b9e:	90 91 69 00 	lds	r25, 0x0069
     ba2:	82 30       	cpi	r24, 0x02	; 2
     ba4:	91 05       	cpc	r25, r1
     ba6:	19 f4       	brne	.+6      	; 0xbae <__vector_7+0x14e>
	gu8_completionFlag = 1;
     ba8:	81 e0       	ldi	r24, 0x01	; 1
     baa:	80 93 62 00 	sts	0x0062, r24
	gu16_delayCounter = 0;
     bae:	10 92 67 00 	sts	0x0067, r1
     bb2:	10 92 66 00 	sts	0x0066, r1
}

if(gu8_dutyCycle >= 100 && gu8_flag == 0)
     bb6:	80 91 63 00 	lds	r24, 0x0063
     bba:	84 36       	cpi	r24, 0x64	; 100
     bbc:	68 f0       	brcs	.+26     	; 0xbd8 <__vector_7+0x178>
     bbe:	80 91 68 00 	lds	r24, 0x0068
     bc2:	90 91 69 00 	lds	r25, 0x0069
     bc6:	00 97       	sbiw	r24, 0x00	; 0
     bc8:	39 f4       	brne	.+14     	; 0xbd8 <__vector_7+0x178>
{
	gu8_flag = 1;
     bca:	81 e0       	ldi	r24, 0x01	; 1
     bcc:	90 e0       	ldi	r25, 0x00	; 0
     bce:	90 93 69 00 	sts	0x0069, r25
     bd2:	80 93 68 00 	sts	0x0068, r24
     bd6:	19 c0       	rjmp	.+50     	; 0xc0a <__vector_7+0x1aa>
}
else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
     bd8:	80 91 63 00 	lds	r24, 0x0063
     bdc:	88 23       	and	r24, r24
     bde:	a9 f4       	brne	.+42     	; 0xc0a <__vector_7+0x1aa>
     be0:	80 91 68 00 	lds	r24, 0x0068
     be4:	90 91 69 00 	lds	r25, 0x0069
     be8:	81 30       	cpi	r24, 0x01	; 1
     bea:	91 05       	cpc	r25, r1
     bec:	71 f4       	brne	.+28     	; 0xc0a <__vector_7+0x1aa>
{
	gu8_flag = 2;
     bee:	82 e0       	ldi	r24, 0x02	; 2
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	90 93 69 00 	sts	0x0069, r25
     bf6:	80 93 68 00 	sts	0x0068, r24
	gu8_dutyCycle = 20;
     bfa:	84 e1       	ldi	r24, 0x14	; 20
     bfc:	80 93 63 00 	sts	0x0063, r24
	gpioPinWrite(GPIOD, BIT6, LOW);
     c00:	83 e0       	ldi	r24, 0x03	; 3
     c02:	60 e4       	ldi	r22, 0x40	; 64
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
}
}
     c0a:	cf 91       	pop	r28
     c0c:	df 91       	pop	r29
     c0e:	ff 91       	pop	r31
     c10:	ef 91       	pop	r30
     c12:	bf 91       	pop	r27
     c14:	af 91       	pop	r26
     c16:	9f 91       	pop	r25
     c18:	8f 91       	pop	r24
     c1a:	7f 91       	pop	r23
     c1c:	6f 91       	pop	r22
     c1e:	5f 91       	pop	r21
     c20:	4f 91       	pop	r20
     c22:	3f 91       	pop	r19
     c24:	2f 91       	pop	r18
     c26:	0f 90       	pop	r0
     c28:	0f be       	out	0x3f, r0	; 63
     c2a:	0f 90       	pop	r0
     c2c:	1f 90       	pop	r1
     c2e:	18 95       	reti

00000c30 <__vector_8>:

void TIMER1_CTC_B_MODE_INTERRUPT (void)
{
     c30:	78 94       	sei
     c32:	1f 92       	push	r1
     c34:	0f 92       	push	r0
     c36:	0f b6       	in	r0, 0x3f	; 63
     c38:	0f 92       	push	r0
     c3a:	11 24       	eor	r1, r1
     c3c:	df 93       	push	r29
     c3e:	cf 93       	push	r28
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
     c44:	cf 91       	pop	r28
     c46:	df 91       	pop	r29
     c48:	0f 90       	pop	r0
     c4a:	0f be       	out	0x3f, r0	; 63
     c4c:	0f 90       	pop	r0
     c4e:	1f 90       	pop	r1
     c50:	18 95       	reti

00000c52 <__vector_9>:

void TIMER1_OVF_MODE_INTERRUPT (void)
{
     c52:	78 94       	sei
     c54:	1f 92       	push	r1
     c56:	0f 92       	push	r0
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	0f 92       	push	r0
     c5c:	11 24       	eor	r1, r1
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	cd b7       	in	r28, 0x3d	; 61
     c64:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
//	timer1Set(49911);
}
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	0f 90       	pop	r0
     c6c:	0f be       	out	0x3f, r0	; 63
     c6e:	0f 90       	pop	r0
     c70:	1f 90       	pop	r1
     c72:	18 95       	reti

00000c74 <__vector_4>:

void TIMER2_CTC_MODE_INTERRUPT (void)
{
     c74:	78 94       	sei
     c76:	1f 92       	push	r1
     c78:	0f 92       	push	r0
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	0f 92       	push	r0
     c7e:	11 24       	eor	r1, r1
     c80:	2f 93       	push	r18
     c82:	3f 93       	push	r19
     c84:	4f 93       	push	r20
     c86:	5f 93       	push	r21
     c88:	6f 93       	push	r22
     c8a:	7f 93       	push	r23
     c8c:	8f 93       	push	r24
     c8e:	9f 93       	push	r25
     c90:	af 93       	push	r26
     c92:	bf 93       	push	r27
     c94:	ef 93       	push	r30
     c96:	ff 93       	push	r31
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}

gu16_globalInterruptVariable++;
     ca0:	80 91 64 00 	lds	r24, 0x0064
     ca4:	90 91 65 00 	lds	r25, 0x0065
     ca8:	01 96       	adiw	r24, 0x01	; 1
     caa:	90 93 65 00 	sts	0x0065, r25
     cae:	80 93 64 00 	sts	0x0064, r24

if(gu16_globalInterruptVariable % 100 == (gu8_dutyCycle/3))
     cb2:	80 91 64 00 	lds	r24, 0x0064
     cb6:	90 91 65 00 	lds	r25, 0x0065
     cba:	24 e6       	ldi	r18, 0x64	; 100
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	b9 01       	movw	r22, r18
     cc0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     cc4:	9c 01       	movw	r18, r24
     cc6:	80 91 63 00 	lds	r24, 0x0063
     cca:	93 e0       	ldi	r25, 0x03	; 3
     ccc:	69 2f       	mov	r22, r25
     cce:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <__udivmodqi4>
     cd2:	88 2f       	mov	r24, r24
     cd4:	90 e0       	ldi	r25, 0x00	; 0
     cd6:	28 17       	cp	r18, r24
     cd8:	39 07       	cpc	r19, r25
     cda:	c1 f4       	brne	.+48     	; 0xd0c <__vector_4+0x98>
{
	gpioPinWrite(GPIOD, BIT2, LOW);
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	64 e0       	ldi	r22, 0x04	; 4
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	if(gu8_flag != 2)
     ce6:	80 91 68 00 	lds	r24, 0x0068
     cea:	90 91 69 00 	lds	r25, 0x0069
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	91 05       	cpc	r25, r1
     cf2:	31 f0       	breq	.+12     	; 0xd00 <__vector_4+0x8c>
	gpioPinWrite(GPIOD, BIT6, LOW);
     cf4:	83 e0       	ldi	r24, 0x03	; 3
     cf6:	60 e4       	ldi	r22, 0x40	; 64
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     cfe:	2c c0       	rjmp	.+88     	; 0xd58 <__vector_4+0xe4>
	else
	gpioPinWrite(GPIOD, BIT7, LOW);
     d00:	83 e0       	ldi	r24, 0x03	; 3
     d02:	60 e8       	ldi	r22, 0x80	; 128
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     d0a:	26 c0       	rjmp	.+76     	; 0xd58 <__vector_4+0xe4>
}else if(gu16_globalInterruptVariable % 100 == 0)
     d0c:	80 91 64 00 	lds	r24, 0x0064
     d10:	90 91 65 00 	lds	r25, 0x0065
     d14:	24 e6       	ldi	r18, 0x64	; 100
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	b9 01       	movw	r22, r18
     d1a:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <__udivmodhi4>
     d1e:	00 97       	sbiw	r24, 0x00	; 0
     d20:	d9 f4       	brne	.+54     	; 0xd58 <__vector_4+0xe4>
{
	gpioPinWrite(GPIOD, BIT2, HIGH);
     d22:	83 e0       	ldi	r24, 0x03	; 3
     d24:	64 e0       	ldi	r22, 0x04	; 4
     d26:	4f ef       	ldi	r20, 0xFF	; 255
     d28:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	if(gu8_flag != 2)
     d2c:	80 91 68 00 	lds	r24, 0x0068
     d30:	90 91 69 00 	lds	r25, 0x0069
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	91 05       	cpc	r25, r1
     d38:	31 f0       	breq	.+12     	; 0xd46 <__vector_4+0xd2>
	gpioPinWrite(GPIOD, BIT6, HIGH);
     d3a:	83 e0       	ldi	r24, 0x03	; 3
     d3c:	60 e4       	ldi	r22, 0x40	; 64
     d3e:	4f ef       	ldi	r20, 0xFF	; 255
     d40:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
     d44:	05 c0       	rjmp	.+10     	; 0xd50 <__vector_4+0xdc>
	else
	gpioPinWrite(GPIOD, BIT7, HIGH);
     d46:	83 e0       	ldi	r24, 0x03	; 3
     d48:	60 e8       	ldi	r22, 0x80	; 128
     d4a:	4f ef       	ldi	r20, 0xFF	; 255
     d4c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
	
	gu16_globalInterruptVariable = 0;
     d50:	10 92 65 00 	sts	0x0065, r1
     d54:	10 92 64 00 	sts	0x0064, r1
}

if(gu8_completionFlag == 1)
     d58:	80 91 62 00 	lds	r24, 0x0062
     d5c:	81 30       	cpi	r24, 0x01	; 1
     d5e:	09 f4       	brne	.+2      	; 0xd62 <__vector_4+0xee>
{
	cli();
     d60:	f8 94       	cli
}

gu16_delayCounter++;
     d62:	80 91 66 00 	lds	r24, 0x0066
     d66:	90 91 67 00 	lds	r25, 0x0067
     d6a:	01 96       	adiw	r24, 0x01	; 1
     d6c:	90 93 67 00 	sts	0x0067, r25
     d70:	80 93 66 00 	sts	0x0066, r24

if(gu16_delayCounter == 540)
     d74:	80 91 66 00 	lds	r24, 0x0066
     d78:	90 91 67 00 	lds	r25, 0x0067
     d7c:	22 e0       	ldi	r18, 0x02	; 2
     d7e:	8c 31       	cpi	r24, 0x1C	; 28
     d80:	92 07       	cpc	r25, r18
     d82:	39 f5       	brne	.+78     	; 0xdd2 <__vector_4+0x15e>
{
	if(gu8_flag == 0)
     d84:	80 91 68 00 	lds	r24, 0x0068
     d88:	90 91 69 00 	lds	r25, 0x0069
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	31 f4       	brne	.+12     	; 0xd9c <__vector_4+0x128>
	gu8_dutyCycle++;
     d90:	80 91 63 00 	lds	r24, 0x0063
     d94:	8f 5f       	subi	r24, 0xFF	; 255
     d96:	80 93 63 00 	sts	0x0063, r24
     d9a:	17 c0       	rjmp	.+46     	; 0xdca <__vector_4+0x156>
	else if(gu8_flag == 1)
     d9c:	80 91 68 00 	lds	r24, 0x0068
     da0:	90 91 69 00 	lds	r25, 0x0069
     da4:	81 30       	cpi	r24, 0x01	; 1
     da6:	91 05       	cpc	r25, r1
     da8:	31 f4       	brne	.+12     	; 0xdb6 <__vector_4+0x142>
	gu8_dutyCycle--;
     daa:	80 91 63 00 	lds	r24, 0x0063
     dae:	81 50       	subi	r24, 0x01	; 1
     db0:	80 93 63 00 	sts	0x0063, r24
     db4:	0a c0       	rjmp	.+20     	; 0xdca <__vector_4+0x156>
	else if(gu8_flag == 2)
     db6:	80 91 68 00 	lds	r24, 0x0068
     dba:	90 91 69 00 	lds	r25, 0x0069
     dbe:	82 30       	cpi	r24, 0x02	; 2
     dc0:	91 05       	cpc	r25, r1
     dc2:	19 f4       	brne	.+6      	; 0xdca <__vector_4+0x156>
	gu8_completionFlag = 1;
     dc4:	81 e0       	ldi	r24, 0x01	; 1
     dc6:	80 93 62 00 	sts	0x0062, r24
	gu16_delayCounter = 0;
     dca:	10 92 67 00 	sts	0x0067, r1
     dce:	10 92 66 00 	sts	0x0066, r1
}

if(gu8_dutyCycle >= 100 && gu8_flag == 0)
     dd2:	80 91 63 00 	lds	r24, 0x0063
     dd6:	84 36       	cpi	r24, 0x64	; 100
     dd8:	68 f0       	brcs	.+26     	; 0xdf4 <__vector_4+0x180>
     dda:	80 91 68 00 	lds	r24, 0x0068
     dde:	90 91 69 00 	lds	r25, 0x0069
     de2:	00 97       	sbiw	r24, 0x00	; 0
     de4:	39 f4       	brne	.+14     	; 0xdf4 <__vector_4+0x180>
{
	gu8_flag = 1;
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	90 93 69 00 	sts	0x0069, r25
     dee:	80 93 68 00 	sts	0x0068, r24
     df2:	19 c0       	rjmp	.+50     	; 0xe26 <__vector_4+0x1b2>
}
else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
     df4:	80 91 63 00 	lds	r24, 0x0063
     df8:	88 23       	and	r24, r24
     dfa:	a9 f4       	brne	.+42     	; 0xe26 <__vector_4+0x1b2>
     dfc:	80 91 68 00 	lds	r24, 0x0068
     e00:	90 91 69 00 	lds	r25, 0x0069
     e04:	81 30       	cpi	r24, 0x01	; 1
     e06:	91 05       	cpc	r25, r1
     e08:	71 f4       	brne	.+28     	; 0xe26 <__vector_4+0x1b2>
{
	gu8_flag = 2;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	90 93 69 00 	sts	0x0069, r25
     e12:	80 93 68 00 	sts	0x0068, r24
	gu8_dutyCycle = 60;
     e16:	8c e3       	ldi	r24, 0x3C	; 60
     e18:	80 93 63 00 	sts	0x0063, r24
	gpioPinWrite(GPIOD, BIT6, LOW);
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	60 e4       	ldi	r22, 0x40	; 64
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
}
}
     e26:	cf 91       	pop	r28
     e28:	df 91       	pop	r29
     e2a:	ff 91       	pop	r31
     e2c:	ef 91       	pop	r30
     e2e:	bf 91       	pop	r27
     e30:	af 91       	pop	r26
     e32:	9f 91       	pop	r25
     e34:	8f 91       	pop	r24
     e36:	7f 91       	pop	r23
     e38:	6f 91       	pop	r22
     e3a:	5f 91       	pop	r21
     e3c:	4f 91       	pop	r20
     e3e:	3f 91       	pop	r19
     e40:	2f 91       	pop	r18
     e42:	0f 90       	pop	r0
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	0f 90       	pop	r0
     e48:	1f 90       	pop	r1
     e4a:	18 95       	reti

00000e4c <__vector_5>:

void TIMER2_OVF_MODE_INTERRUPT (void)
{
     e4c:	78 94       	sei
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
//	if(gu16_globalInterruptVariable == 250)
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}
}
     e60:	cf 91       	pop	r28
     e62:	df 91       	pop	r29
     e64:	0f 90       	pop	r0
     e66:	0f be       	out	0x3f, r0	; 63
     e68:	0f 90       	pop	r0
     e6a:	1f 90       	pop	r1
     e6c:	18 95       	reti

00000e6e <__vector_12>:

void SPI_STC_INTERRUPT (void)
{
     e6e:	78 94       	sei
     e70:	1f 92       	push	r1
     e72:	0f 92       	push	r0
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	0f 92       	push	r0
     e78:	11 24       	eor	r1, r1
     e7a:	df 93       	push	r29
     e7c:	cf 93       	push	r28
     e7e:	cd b7       	in	r28, 0x3d	; 61
     e80:	de b7       	in	r29, 0x3e	; 62

}
     e82:	cf 91       	pop	r28
     e84:	df 91       	pop	r29
     e86:	0f 90       	pop	r0
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	0f 90       	pop	r0
     e8c:	1f 90       	pop	r1
     e8e:	18 95       	reti

00000e90 <__vector_13>:

void USART_RXC_INTERRUPT (void)
{
     e90:	78 94       	sei
     e92:	1f 92       	push	r1
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	0f 92       	push	r0
     e9a:	11 24       	eor	r1, r1
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62

}
     ea4:	cf 91       	pop	r28
     ea6:	df 91       	pop	r29
     ea8:	0f 90       	pop	r0
     eaa:	0f be       	out	0x3f, r0	; 63
     eac:	0f 90       	pop	r0
     eae:	1f 90       	pop	r1
     eb0:	18 95       	reti

00000eb2 <__vector_14>:

void USART_UDRE_INTERRUPT (void)
{
     eb2:	78 94       	sei
     eb4:	1f 92       	push	r1
     eb6:	0f 92       	push	r0
     eb8:	0f b6       	in	r0, 0x3f	; 63
     eba:	0f 92       	push	r0
     ebc:	11 24       	eor	r1, r1
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62

}
     ec6:	cf 91       	pop	r28
     ec8:	df 91       	pop	r29
     eca:	0f 90       	pop	r0
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	0f 90       	pop	r0
     ed0:	1f 90       	pop	r1
     ed2:	18 95       	reti

00000ed4 <__vector_15>:

void USART_TXC_INTERRUPT (void)
{
     ed4:	78 94       	sei
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	df 93       	push	r29
     ee2:	cf 93       	push	r28
     ee4:	cd b7       	in	r28, 0x3d	; 61
     ee6:	de b7       	in	r29, 0x3e	; 62

}
     ee8:	cf 91       	pop	r28
     eea:	df 91       	pop	r29
     eec:	0f 90       	pop	r0
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	0f 90       	pop	r0
     ef2:	1f 90       	pop	r1
     ef4:	18 95       	reti

00000ef6 <__vector_16>:

void ADC_INTERRUPT (void)
{
     ef6:	78 94       	sei
     ef8:	1f 92       	push	r1
     efa:	0f 92       	push	r0
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	0f 92       	push	r0
     f00:	11 24       	eor	r1, r1
     f02:	df 93       	push	r29
     f04:	cf 93       	push	r28
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62

}
     f0a:	cf 91       	pop	r28
     f0c:	df 91       	pop	r29
     f0e:	0f 90       	pop	r0
     f10:	0f be       	out	0x3f, r0	; 63
     f12:	0f 90       	pop	r0
     f14:	1f 90       	pop	r1
     f16:	18 95       	reti

00000f18 <__vector_17>:

void EE_RDY_INTERRUPT (void)
{
     f18:	78 94       	sei
     f1a:	1f 92       	push	r1
     f1c:	0f 92       	push	r0
     f1e:	0f b6       	in	r0, 0x3f	; 63
     f20:	0f 92       	push	r0
     f22:	11 24       	eor	r1, r1
     f24:	df 93       	push	r29
     f26:	cf 93       	push	r28
     f28:	cd b7       	in	r28, 0x3d	; 61
     f2a:	de b7       	in	r29, 0x3e	; 62

}
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	0f 90       	pop	r0
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	0f 90       	pop	r0
     f36:	1f 90       	pop	r1
     f38:	18 95       	reti

00000f3a <__vector_18>:

void ANA_COMP_INTERRUPT (void)
{
     f3a:	78 94       	sei
     f3c:	1f 92       	push	r1
     f3e:	0f 92       	push	r0
     f40:	0f b6       	in	r0, 0x3f	; 63
     f42:	0f 92       	push	r0
     f44:	11 24       	eor	r1, r1
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62

}
     f4e:	cf 91       	pop	r28
     f50:	df 91       	pop	r29
     f52:	0f 90       	pop	r0
     f54:	0f be       	out	0x3f, r0	; 63
     f56:	0f 90       	pop	r0
     f58:	1f 90       	pop	r1
     f5a:	18 95       	reti

00000f5c <__vector_19>:

void TWI_INTERRUPT (void)
{
     f5c:	78 94       	sei
     f5e:	1f 92       	push	r1
     f60:	0f 92       	push	r0
     f62:	0f b6       	in	r0, 0x3f	; 63
     f64:	0f 92       	push	r0
     f66:	11 24       	eor	r1, r1
     f68:	df 93       	push	r29
     f6a:	cf 93       	push	r28
     f6c:	cd b7       	in	r28, 0x3d	; 61
     f6e:	de b7       	in	r29, 0x3e	; 62

}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	0f 90       	pop	r0
     f7a:	1f 90       	pop	r1
     f7c:	18 95       	reti

00000f7e <__vector_20>:

void SPM_RDY_INTERRUPT (void)
{
     f7e:	78 94       	sei
     f80:	1f 92       	push	r1
     f82:	0f 92       	push	r0
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	0f 92       	push	r0
     f88:	11 24       	eor	r1, r1
     f8a:	df 93       	push	r29
     f8c:	cf 93       	push	r28
     f8e:	cd b7       	in	r28, 0x3d	; 61
     f90:	de b7       	in	r29, 0x3e	; 62

}
     f92:	cf 91       	pop	r28
     f94:	df 91       	pop	r29
     f96:	0f 90       	pop	r0
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	0f 90       	pop	r0
     f9c:	1f 90       	pop	r1
     f9e:	18 95       	reti

00000fa0 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
     fa0:	df 93       	push	r29
     fa2:	cf 93       	push	r28
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <Led_Init+0x6>
     fa6:	0f 92       	push	r0
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
     fac:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
     fae:	89 81       	ldd	r24, Y+1	; 0x01
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	3b 83       	std	Y+3, r19	; 0x03
     fb6:	2a 83       	std	Y+2, r18	; 0x02
     fb8:	8a 81       	ldd	r24, Y+2	; 0x02
     fba:	9b 81       	ldd	r25, Y+3	; 0x03
     fbc:	81 30       	cpi	r24, 0x01	; 1
     fbe:	91 05       	cpc	r25, r1
     fc0:	d9 f0       	breq	.+54     	; 0xff8 <Led_Init+0x58>
     fc2:	2a 81       	ldd	r18, Y+2	; 0x02
     fc4:	3b 81       	ldd	r19, Y+3	; 0x03
     fc6:	22 30       	cpi	r18, 0x02	; 2
     fc8:	31 05       	cpc	r19, r1
     fca:	2c f4       	brge	.+10     	; 0xfd6 <Led_Init+0x36>
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	9b 81       	ldd	r25, Y+3	; 0x03
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	61 f0       	breq	.+24     	; 0xfec <Led_Init+0x4c>
     fd4:	22 c0       	rjmp	.+68     	; 0x101a <Led_Init+0x7a>
     fd6:	2a 81       	ldd	r18, Y+2	; 0x02
     fd8:	3b 81       	ldd	r19, Y+3	; 0x03
     fda:	22 30       	cpi	r18, 0x02	; 2
     fdc:	31 05       	cpc	r19, r1
     fde:	91 f0       	breq	.+36     	; 0x1004 <Led_Init+0x64>
     fe0:	8a 81       	ldd	r24, Y+2	; 0x02
     fe2:	9b 81       	ldd	r25, Y+3	; 0x03
     fe4:	83 30       	cpi	r24, 0x03	; 3
     fe6:	91 05       	cpc	r25, r1
     fe8:	99 f0       	breq	.+38     	; 0x1010 <Led_Init+0x70>
     fea:	17 c0       	rjmp	.+46     	; 0x101a <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	60 e1       	ldi	r22, 0x10	; 16
     ff0:	4f ef       	ldi	r20, 0xFF	; 255
     ff2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
     ff6:	11 c0       	rjmp	.+34     	; 0x101a <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
     ff8:	81 e0       	ldi	r24, 0x01	; 1
     ffa:	60 e2       	ldi	r22, 0x20	; 32
     ffc:	4f ef       	ldi	r20, 0xFF	; 255
     ffe:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
    1002:	0b c0       	rjmp	.+22     	; 0x101a <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	60 e4       	ldi	r22, 0x40	; 64
    1008:	4f ef       	ldi	r20, 0xFF	; 255
    100a:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
    100e:	05 c0       	rjmp	.+10     	; 0x101a <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
    1010:	81 e0       	ldi	r24, 0x01	; 1
    1012:	60 e8       	ldi	r22, 0x80	; 128
    1014:	4f ef       	ldi	r20, 0xFF	; 255
    1016:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    101a:	0f 90       	pop	r0
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <Led_On+0x6>
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	28 2f       	mov	r18, r24
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	3b 83       	std	Y+3, r19	; 0x03
    103c:	2a 83       	std	Y+2, r18	; 0x02
    103e:	8a 81       	ldd	r24, Y+2	; 0x02
    1040:	9b 81       	ldd	r25, Y+3	; 0x03
    1042:	81 30       	cpi	r24, 0x01	; 1
    1044:	91 05       	cpc	r25, r1
    1046:	d9 f0       	breq	.+54     	; 0x107e <Led_On+0x58>
    1048:	2a 81       	ldd	r18, Y+2	; 0x02
    104a:	3b 81       	ldd	r19, Y+3	; 0x03
    104c:	22 30       	cpi	r18, 0x02	; 2
    104e:	31 05       	cpc	r19, r1
    1050:	2c f4       	brge	.+10     	; 0x105c <Led_On+0x36>
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	9b 81       	ldd	r25, Y+3	; 0x03
    1056:	00 97       	sbiw	r24, 0x00	; 0
    1058:	61 f0       	breq	.+24     	; 0x1072 <Led_On+0x4c>
    105a:	22 c0       	rjmp	.+68     	; 0x10a0 <Led_On+0x7a>
    105c:	2a 81       	ldd	r18, Y+2	; 0x02
    105e:	3b 81       	ldd	r19, Y+3	; 0x03
    1060:	22 30       	cpi	r18, 0x02	; 2
    1062:	31 05       	cpc	r19, r1
    1064:	91 f0       	breq	.+36     	; 0x108a <Led_On+0x64>
    1066:	8a 81       	ldd	r24, Y+2	; 0x02
    1068:	9b 81       	ldd	r25, Y+3	; 0x03
    106a:	83 30       	cpi	r24, 0x03	; 3
    106c:	91 05       	cpc	r25, r1
    106e:	99 f0       	breq	.+38     	; 0x1096 <Led_On+0x70>
    1070:	17 c0       	rjmp	.+46     	; 0x10a0 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	60 e1       	ldi	r22, 0x10	; 16
    1076:	4f ef       	ldi	r20, 0xFF	; 255
    1078:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    107c:	11 c0       	rjmp	.+34     	; 0x10a0 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	60 e2       	ldi	r22, 0x20	; 32
    1082:	4f ef       	ldi	r20, 0xFF	; 255
    1084:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    1088:	0b c0       	rjmp	.+22     	; 0x10a0 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
    108a:	81 e0       	ldi	r24, 0x01	; 1
    108c:	60 e4       	ldi	r22, 0x40	; 64
    108e:	4f ef       	ldi	r20, 0xFF	; 255
    1090:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    1094:	05 c0       	rjmp	.+10     	; 0x10a0 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	60 e8       	ldi	r22, 0x80	; 128
    109a:	4f ef       	ldi	r20, 0xFF	; 255
    109c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		break;
	default:

		break;
	}
}
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	0f 90       	pop	r0
    10a6:	cf 91       	pop	r28
    10a8:	df 91       	pop	r29
    10aa:	08 95       	ret

000010ac <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <Led_Off+0x6>
    10b2:	0f 92       	push	r0
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
    10b8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
    10ba:	89 81       	ldd	r24, Y+1	; 0x01
    10bc:	28 2f       	mov	r18, r24
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	3b 83       	std	Y+3, r19	; 0x03
    10c2:	2a 83       	std	Y+2, r18	; 0x02
    10c4:	8a 81       	ldd	r24, Y+2	; 0x02
    10c6:	9b 81       	ldd	r25, Y+3	; 0x03
    10c8:	81 30       	cpi	r24, 0x01	; 1
    10ca:	91 05       	cpc	r25, r1
    10cc:	d9 f0       	breq	.+54     	; 0x1104 <Led_Off+0x58>
    10ce:	2a 81       	ldd	r18, Y+2	; 0x02
    10d0:	3b 81       	ldd	r19, Y+3	; 0x03
    10d2:	22 30       	cpi	r18, 0x02	; 2
    10d4:	31 05       	cpc	r19, r1
    10d6:	2c f4       	brge	.+10     	; 0x10e2 <Led_Off+0x36>
    10d8:	8a 81       	ldd	r24, Y+2	; 0x02
    10da:	9b 81       	ldd	r25, Y+3	; 0x03
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	61 f0       	breq	.+24     	; 0x10f8 <Led_Off+0x4c>
    10e0:	22 c0       	rjmp	.+68     	; 0x1126 <Led_Off+0x7a>
    10e2:	2a 81       	ldd	r18, Y+2	; 0x02
    10e4:	3b 81       	ldd	r19, Y+3	; 0x03
    10e6:	22 30       	cpi	r18, 0x02	; 2
    10e8:	31 05       	cpc	r19, r1
    10ea:	91 f0       	breq	.+36     	; 0x1110 <Led_Off+0x64>
    10ec:	8a 81       	ldd	r24, Y+2	; 0x02
    10ee:	9b 81       	ldd	r25, Y+3	; 0x03
    10f0:	83 30       	cpi	r24, 0x03	; 3
    10f2:	91 05       	cpc	r25, r1
    10f4:	99 f0       	breq	.+38     	; 0x111c <Led_Off+0x70>
    10f6:	17 c0       	rjmp	.+46     	; 0x1126 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	60 e1       	ldi	r22, 0x10	; 16
    10fc:	40 e0       	ldi	r20, 0x00	; 0
    10fe:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    1102:	11 c0       	rjmp	.+34     	; 0x1126 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
    1104:	81 e0       	ldi	r24, 0x01	; 1
    1106:	60 e2       	ldi	r22, 0x20	; 32
    1108:	40 e0       	ldi	r20, 0x00	; 0
    110a:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    110e:	0b c0       	rjmp	.+22     	; 0x1126 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	60 e4       	ldi	r22, 0x40	; 64
    1114:	40 e0       	ldi	r20, 0x00	; 0
    1116:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
    111a:	05 c0       	rjmp	.+10     	; 0x1126 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
    111c:	81 e0       	ldi	r24, 0x01	; 1
    111e:	60 e8       	ldi	r22, 0x80	; 128
    1120:	40 e0       	ldi	r20, 0x00	; 0
    1122:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		break;
	default:

		break;
	}
}
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	00 d0       	rcall	.+0      	; 0x1138 <Led_Toggle+0x6>
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
    113e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
    1140:	89 81       	ldd	r24, Y+1	; 0x01
    1142:	28 2f       	mov	r18, r24
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	3b 83       	std	Y+3, r19	; 0x03
    1148:	2a 83       	std	Y+2, r18	; 0x02
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	9b 81       	ldd	r25, Y+3	; 0x03
    114e:	81 30       	cpi	r24, 0x01	; 1
    1150:	91 05       	cpc	r25, r1
    1152:	d1 f0       	breq	.+52     	; 0x1188 <Led_Toggle+0x56>
    1154:	2a 81       	ldd	r18, Y+2	; 0x02
    1156:	3b 81       	ldd	r19, Y+3	; 0x03
    1158:	22 30       	cpi	r18, 0x02	; 2
    115a:	31 05       	cpc	r19, r1
    115c:	2c f4       	brge	.+10     	; 0x1168 <Led_Toggle+0x36>
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	9b 81       	ldd	r25, Y+3	; 0x03
    1162:	00 97       	sbiw	r24, 0x00	; 0
    1164:	61 f0       	breq	.+24     	; 0x117e <Led_Toggle+0x4c>
    1166:	1e c0       	rjmp	.+60     	; 0x11a4 <Led_Toggle+0x72>
    1168:	2a 81       	ldd	r18, Y+2	; 0x02
    116a:	3b 81       	ldd	r19, Y+3	; 0x03
    116c:	22 30       	cpi	r18, 0x02	; 2
    116e:	31 05       	cpc	r19, r1
    1170:	81 f0       	breq	.+32     	; 0x1192 <Led_Toggle+0x60>
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	83 30       	cpi	r24, 0x03	; 3
    1178:	91 05       	cpc	r25, r1
    117a:	81 f0       	breq	.+32     	; 0x119c <Led_Toggle+0x6a>
    117c:	13 c0       	rjmp	.+38     	; 0x11a4 <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	60 e1       	ldi	r22, 0x10	; 16
    1182:	0e 94 33 03 	call	0x666	; 0x666 <gpioPinToggle>
    1186:	0e c0       	rjmp	.+28     	; 0x11a4 <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
    1188:	81 e0       	ldi	r24, 0x01	; 1
    118a:	60 e2       	ldi	r22, 0x20	; 32
    118c:	0e 94 33 03 	call	0x666	; 0x666 <gpioPinToggle>
    1190:	09 c0       	rjmp	.+18     	; 0x11a4 <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
    1192:	81 e0       	ldi	r24, 0x01	; 1
    1194:	60 e4       	ldi	r22, 0x40	; 64
    1196:	0e 94 33 03 	call	0x666	; 0x666 <gpioPinToggle>
    119a:	04 c0       	rjmp	.+8      	; 0x11a4 <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
    119c:	81 e0       	ldi	r24, 0x01	; 1
    119e:	60 e8       	ldi	r22, 0x80	; 128
    11a0:	0e 94 33 03 	call	0x666	; 0x666 <gpioPinToggle>
		break;
	default:

		break;
	}
}
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <pushButtonInit+0x6>
    11b6:	0f 92       	push	r0
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3b 83       	std	Y+3, r19	; 0x03
    11c6:	2a 83       	std	Y+2, r18	; 0x02
    11c8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ca:	9b 81       	ldd	r25, Y+3	; 0x03
    11cc:	00 97       	sbiw	r24, 0x00	; 0
    11ce:	31 f0       	breq	.+12     	; 0x11dc <pushButtonInit+0x2c>
    11d0:	2a 81       	ldd	r18, Y+2	; 0x02
    11d2:	3b 81       	ldd	r19, Y+3	; 0x03
    11d4:	21 30       	cpi	r18, 0x01	; 1
    11d6:	31 05       	cpc	r19, r1
    11d8:	39 f0       	breq	.+14     	; 0x11e8 <pushButtonInit+0x38>
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
    11dc:	82 e0       	ldi	r24, 0x02	; 2
    11de:	60 e1       	ldi	r22, 0x10	; 16
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
    11e6:	05 c0       	rjmp	.+10     	; 0x11f2 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
    11e8:	81 e0       	ldi	r24, 0x01	; 1
    11ea:	64 e0       	ldi	r22, 0x04	; 4
    11ec:	40 e0       	ldi	r20, 0x00	; 0
    11ee:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		break;
	default:

		break;
	}
}
    11f2:	0f 90       	pop	r0
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <pushButtonUpdate>:

void pushButtonUpdate(void)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	cd b7       	in	r28, 0x3d	; 61
    1204:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
    1206:	cf 91       	pop	r28
    1208:	df 91       	pop	r29
    120a:	08 95       	ret

0000120c <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
    120c:	df 93       	push	r29
    120e:	cf 93       	push	r28
    1210:	00 d0       	rcall	.+0      	; 0x1212 <pushButtonGetStatus+0x6>
    1212:	00 d0       	rcall	.+0      	; 0x1214 <pushButtonGetStatus+0x8>
    1214:	cd b7       	in	r28, 0x3d	; 61
    1216:	de b7       	in	r29, 0x3e	; 62
    1218:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
    121a:	89 81       	ldd	r24, Y+1	; 0x01
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	3c 83       	std	Y+4, r19	; 0x04
    1222:	2b 83       	std	Y+3, r18	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	81 30       	cpi	r24, 0x01	; 1
    122a:	91 05       	cpc	r25, r1
    122c:	71 f1       	breq	.+92     	; 0x128a <pushButtonGetStatus+0x7e>
    122e:	2b 81       	ldd	r18, Y+3	; 0x03
    1230:	3c 81       	ldd	r19, Y+4	; 0x04
    1232:	22 30       	cpi	r18, 0x02	; 2
    1234:	31 05       	cpc	r19, r1
    1236:	2c f4       	brge	.+10     	; 0x1242 <pushButtonGetStatus+0x36>
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	00 97       	sbiw	r24, 0x00	; 0
    123e:	61 f0       	breq	.+24     	; 0x1258 <pushButtonGetStatus+0x4c>
    1240:	43 c0       	rjmp	.+134    	; 0x12c8 <pushButtonGetStatus+0xbc>
    1242:	2b 81       	ldd	r18, Y+3	; 0x03
    1244:	3c 81       	ldd	r19, Y+4	; 0x04
    1246:	22 30       	cpi	r18, 0x02	; 2
    1248:	31 05       	cpc	r19, r1
    124a:	c1 f1       	breq	.+112    	; 0x12bc <pushButtonGetStatus+0xb0>
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	83 30       	cpi	r24, 0x03	; 3
    1252:	91 05       	cpc	r25, r1
    1254:	b1 f1       	breq	.+108    	; 0x12c2 <pushButtonGetStatus+0xb6>
    1256:	38 c0       	rjmp	.+112    	; 0x12c8 <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	60 e1       	ldi	r22, 0x10	; 16
    125c:	0e 94 84 03 	call	0x708	; 0x708 <gpioPinRead>
    1260:	88 23       	and	r24, r24
    1262:	89 f0       	breq	.+34     	; 0x1286 <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
    1264:	64 e1       	ldi	r22, 0x14	; 20
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	80 e0       	ldi	r24, 0x00	; 0
    126a:	90 e0       	ldi	r25, 0x00	; 0
    126c:	0e 94 46 0a 	call	0x148c	; 0x148c <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
    1270:	82 e0       	ldi	r24, 0x02	; 2
    1272:	60 e1       	ldi	r22, 0x10	; 16
    1274:	0e 94 84 03 	call	0x708	; 0x708 <gpioPinRead>
    1278:	88 23       	and	r24, r24
    127a:	19 f0       	breq	.+6      	; 0x1282 <pushButtonGetStatus+0x76>
			{
				return Pressed;
    127c:	92 e0       	ldi	r25, 0x02	; 2
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	25 c0       	rjmp	.+74     	; 0x12cc <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    1282:	1a 82       	std	Y+2, r1	; 0x02
    1284:	23 c0       	rjmp	.+70     	; 0x12cc <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    1286:	1a 82       	std	Y+2, r1	; 0x02
    1288:	21 c0       	rjmp	.+66     	; 0x12cc <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	64 e0       	ldi	r22, 0x04	; 4
    128e:	0e 94 84 03 	call	0x708	; 0x708 <gpioPinRead>
    1292:	88 23       	and	r24, r24
    1294:	89 f0       	breq	.+34     	; 0x12b8 <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
    1296:	64 e1       	ldi	r22, 0x14	; 20
    1298:	70 e0       	ldi	r23, 0x00	; 0
    129a:	80 e0       	ldi	r24, 0x00	; 0
    129c:	90 e0       	ldi	r25, 0x00	; 0
    129e:	0e 94 46 0a 	call	0x148c	; 0x148c <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
    12a2:	81 e0       	ldi	r24, 0x01	; 1
    12a4:	64 e0       	ldi	r22, 0x04	; 4
    12a6:	0e 94 84 03 	call	0x708	; 0x708 <gpioPinRead>
    12aa:	88 23       	and	r24, r24
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <pushButtonGetStatus+0xa8>
			{
				return Pressed;
    12ae:	22 e0       	ldi	r18, 0x02	; 2
    12b0:	2a 83       	std	Y+2, r18	; 0x02
    12b2:	0c c0       	rjmp	.+24     	; 0x12cc <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
    12b4:	1a 82       	std	Y+2, r1	; 0x02
    12b6:	0a c0       	rjmp	.+20     	; 0x12cc <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
    12b8:	1a 82       	std	Y+2, r1	; 0x02
    12ba:	08 c0       	rjmp	.+16     	; 0x12cc <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
    12bc:	3f ef       	ldi	r19, 0xFF	; 255
    12be:	3a 83       	std	Y+2, r19	; 0x02
    12c0:	05 c0       	rjmp	.+10     	; 0x12cc <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
    12c2:	8f ef       	ldi	r24, 0xFF	; 255
    12c4:	8a 83       	std	Y+2, r24	; 0x02
    12c6:	02 c0       	rjmp	.+4      	; 0x12cc <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
    12c8:	9f ef       	ldi	r25, 0xFF	; 255
    12ca:	9a 83       	std	Y+2, r25	; 0x02
    12cc:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
    12ce:	0f 90       	pop	r0
    12d0:	0f 90       	pop	r0
    12d2:	0f 90       	pop	r0
    12d4:	0f 90       	pop	r0
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <sevenSegInit+0x6>
    12e2:	0f 92       	push	r0
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
    12e8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
    12ea:	89 81       	ldd	r24, Y+1	; 0x01
    12ec:	28 2f       	mov	r18, r24
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	3b 83       	std	Y+3, r19	; 0x03
    12f2:	2a 83       	std	Y+2, r18	; 0x02
    12f4:	8a 81       	ldd	r24, Y+2	; 0x02
    12f6:	9b 81       	ldd	r25, Y+3	; 0x03
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	31 f0       	breq	.+12     	; 0x1308 <sevenSegInit+0x2c>
    12fc:	2a 81       	ldd	r18, Y+2	; 0x02
    12fe:	3b 81       	ldd	r19, Y+3	; 0x03
    1300:	21 30       	cpi	r18, 0x01	; 1
    1302:	31 05       	cpc	r19, r1
    1304:	c9 f0       	breq	.+50     	; 0x1338 <sevenSegInit+0x5c>
    1306:	2f c0       	rjmp	.+94     	; 0x1366 <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	6f e0       	ldi	r22, 0x0F	; 15
    130c:	4f ef       	ldi	r20, 0xFF	; 255
    130e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    1312:	83 e0       	ldi	r24, 0x03	; 3
    1314:	64 e1       	ldi	r22, 0x14	; 20
    1316:	4f ef       	ldi	r20, 0xFF	; 255
    1318:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	6f e0       	ldi	r22, 0x0F	; 15
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    1326:	83 e0       	ldi	r24, 0x03	; 3
    1328:	60 e1       	ldi	r22, 0x10	; 16
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		sevenSegDisable(SEG_0);
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	0e 94 e6 09 	call	0x13cc	; 0x13cc <sevenSegDisable>
    1336:	17 c0       	rjmp	.+46     	; 0x1366 <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	6f e0       	ldi	r22, 0x0F	; 15
    133c:	4f ef       	ldi	r20, 0xFF	; 255
    133e:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    1342:	83 e0       	ldi	r24, 0x03	; 3
    1344:	68 e1       	ldi	r22, 0x18	; 24
    1346:	4f ef       	ldi	r20, 0xFF	; 255
    1348:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    134c:	81 e0       	ldi	r24, 0x01	; 1
    134e:	6f e0       	ldi	r22, 0x0F	; 15
    1350:	40 e0       	ldi	r20, 0x00	; 0
    1352:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    1356:	83 e0       	ldi	r24, 0x03	; 3
    1358:	60 e1       	ldi	r22, 0x10	; 16
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		sevenSegDisable(SEG_1);
    1360:	81 e0       	ldi	r24, 0x01	; 1
    1362:	0e 94 e6 09 	call	0x13cc	; 0x13cc <sevenSegDisable>
		break;
	}
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	cf 91       	pop	r28
    136e:	df 91       	pop	r29
    1370:	08 95       	ret

00001372 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    1372:	df 93       	push	r29
    1374:	cf 93       	push	r28
    1376:	00 d0       	rcall	.+0      	; 0x1378 <sevenSegEnable+0x6>
    1378:	0f 92       	push	r0
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	28 2f       	mov	r18, r24
    1384:	30 e0       	ldi	r19, 0x00	; 0
    1386:	3b 83       	std	Y+3, r19	; 0x03
    1388:	2a 83       	std	Y+2, r18	; 0x02
    138a:	8a 81       	ldd	r24, Y+2	; 0x02
    138c:	9b 81       	ldd	r25, Y+3	; 0x03
    138e:	00 97       	sbiw	r24, 0x00	; 0
    1390:	31 f0       	breq	.+12     	; 0x139e <sevenSegEnable+0x2c>
    1392:	2a 81       	ldd	r18, Y+2	; 0x02
    1394:	3b 81       	ldd	r19, Y+3	; 0x03
    1396:	21 30       	cpi	r18, 0x01	; 1
    1398:	31 05       	cpc	r19, r1
    139a:	51 f0       	breq	.+20     	; 0x13b0 <sevenSegEnable+0x3e>
    139c:	11 c0       	rjmp	.+34     	; 0x13c0 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    139e:	83 e0       	ldi	r24, 0x03	; 3
    13a0:	64 e0       	ldi	r22, 0x04	; 4
    13a2:	40 e0       	ldi	r20, 0x00	; 0
    13a4:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    13a8:	8f ef       	ldi	r24, 0xFF	; 255
    13aa:	80 93 6a 00 	sts	0x006A, r24
    13ae:	08 c0       	rjmp	.+16     	; 0x13c0 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    13b0:	83 e0       	ldi	r24, 0x03	; 3
    13b2:	68 e0       	ldi	r22, 0x08	; 8
    13b4:	40 e0       	ldi	r20, 0x00	; 0
    13b6:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	80 93 60 00 	sts	0x0060, r24
		break;
	}
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	0f 90       	pop	r0
    13c6:	cf 91       	pop	r28
    13c8:	df 91       	pop	r29
    13ca:	08 95       	ret

000013cc <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    13cc:	df 93       	push	r29
    13ce:	cf 93       	push	r28
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <sevenSegDisable+0x6>
    13d2:	0f 92       	push	r0
    13d4:	cd b7       	in	r28, 0x3d	; 61
    13d6:	de b7       	in	r29, 0x3e	; 62
    13d8:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	3b 83       	std	Y+3, r19	; 0x03
    13e2:	2a 83       	std	Y+2, r18	; 0x02
    13e4:	8a 81       	ldd	r24, Y+2	; 0x02
    13e6:	9b 81       	ldd	r25, Y+3	; 0x03
    13e8:	00 97       	sbiw	r24, 0x00	; 0
    13ea:	31 f0       	breq	.+12     	; 0x13f8 <sevenSegDisable+0x2c>
    13ec:	2a 81       	ldd	r18, Y+2	; 0x02
    13ee:	3b 81       	ldd	r19, Y+3	; 0x03
    13f0:	21 30       	cpi	r18, 0x01	; 1
    13f2:	31 05       	cpc	r19, r1
    13f4:	49 f0       	breq	.+18     	; 0x1408 <sevenSegDisable+0x3c>
    13f6:	0f c0       	rjmp	.+30     	; 0x1416 <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    13f8:	83 e0       	ldi	r24, 0x03	; 3
    13fa:	64 e0       	ldi	r22, 0x04	; 4
    13fc:	4f ef       	ldi	r20, 0xFF	; 255
    13fe:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    1402:	10 92 6a 00 	sts	0x006A, r1
    1406:	07 c0       	rjmp	.+14     	; 0x1416 <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    1408:	83 e0       	ldi	r24, 0x03	; 3
    140a:	68 e0       	ldi	r22, 0x08	; 8
    140c:	4f ef       	ldi	r20, 0xFF	; 255
    140e:	0e 94 c7 02 	call	0x58e	; 0x58e <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    1412:	10 92 60 00 	sts	0x0060, r1
		break;
	}
}
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	08 95       	ret

00001422 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    1422:	df 93       	push	r29
    1424:	cf 93       	push	r28
    1426:	00 d0       	rcall	.+0      	; 0x1428 <sevenSegWrite+0x6>
    1428:	00 d0       	rcall	.+0      	; 0x142a <sevenSegWrite+0x8>
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	89 83       	std	Y+1, r24	; 0x01
    1430:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	3c 83       	std	Y+4, r19	; 0x04
    143a:	2b 83       	std	Y+3, r18	; 0x03
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	00 97       	sbiw	r24, 0x00	; 0
    1442:	31 f0       	breq	.+12     	; 0x1450 <sevenSegWrite+0x2e>
    1444:	2b 81       	ldd	r18, Y+3	; 0x03
    1446:	3c 81       	ldd	r19, Y+4	; 0x04
    1448:	21 30       	cpi	r18, 0x01	; 1
    144a:	31 05       	cpc	r19, r1
    144c:	69 f0       	breq	.+26     	; 0x1468 <sevenSegWrite+0x46>
    144e:	17 c0       	rjmp	.+46     	; 0x147e <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    1450:	80 91 6a 00 	lds	r24, 0x006A
    1454:	8f 3f       	cpi	r24, 0xFF	; 255
    1456:	99 f4       	brne	.+38     	; 0x147e <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	98 2f       	mov	r25, r24
    145c:	9f 70       	andi	r25, 0x0F	; 15
    145e:	81 e0       	ldi	r24, 0x01	; 1
    1460:	69 2f       	mov	r22, r25
    1462:	0e 94 8b 01 	call	0x316	; 0x316 <gpioPortWrite>
    1466:	0b c0       	rjmp	.+22     	; 0x147e <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    1468:	80 91 60 00 	lds	r24, 0x0060
    146c:	8f 3f       	cpi	r24, 0xFF	; 255
    146e:	39 f4       	brne	.+14     	; 0x147e <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    1470:	8a 81       	ldd	r24, Y+2	; 0x02
    1472:	98 2f       	mov	r25, r24
    1474:	9f 70       	andi	r25, 0x0F	; 15
    1476:	81 e0       	ldi	r24, 0x01	; 1
    1478:	69 2f       	mov	r22, r25
    147a:	0e 94 8b 01 	call	0x316	; 0x316 <gpioPortWrite>
		}
		break;
	}
}
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	cf 91       	pop	r28
    1488:	df 91       	pop	r29
    148a:	08 95       	ret

0000148c <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	60 97       	sbiw	r28, 0x10	; 16
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	6d 87       	std	Y+13, r22	; 0x0d
    14a2:	7e 87       	std	Y+14, r23	; 0x0e
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
    14a6:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=380, i, j;
    14a8:	8c e7       	ldi	r24, 0x7C	; 124
    14aa:	91 e0       	ldi	r25, 0x01	; 1
    14ac:	a0 e0       	ldi	r26, 0x00	; 0
    14ae:	b0 e0       	ldi	r27, 0x00	; 0
    14b0:	89 87       	std	Y+9, r24	; 0x09
    14b2:	9a 87       	std	Y+10, r25	; 0x0a
    14b4:	ab 87       	std	Y+11, r26	; 0x0b
    14b6:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    14b8:	1d 82       	std	Y+5, r1	; 0x05
    14ba:	1e 82       	std	Y+6, r1	; 0x06
    14bc:	1f 82       	std	Y+7, r1	; 0x07
    14be:	18 86       	std	Y+8, r1	; 0x08
    14c0:	28 c0       	rjmp	.+80     	; 0x1512 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    14c2:	19 82       	std	Y+1, r1	; 0x01
    14c4:	1a 82       	std	Y+2, r1	; 0x02
    14c6:	1b 82       	std	Y+3, r1	; 0x03
    14c8:	1c 82       	std	Y+4, r1	; 0x04
    14ca:	0b c0       	rjmp	.+22     	; 0x14e2 <softwareDelayMs+0x56>
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	ab 81       	ldd	r26, Y+3	; 0x03
    14d2:	bc 81       	ldd	r27, Y+4	; 0x04
    14d4:	01 96       	adiw	r24, 0x01	; 1
    14d6:	a1 1d       	adc	r26, r1
    14d8:	b1 1d       	adc	r27, r1
    14da:	89 83       	std	Y+1, r24	; 0x01
    14dc:	9a 83       	std	Y+2, r25	; 0x02
    14de:	ab 83       	std	Y+3, r26	; 0x03
    14e0:	bc 83       	std	Y+4, r27	; 0x04
    14e2:	29 81       	ldd	r18, Y+1	; 0x01
    14e4:	3a 81       	ldd	r19, Y+2	; 0x02
    14e6:	4b 81       	ldd	r20, Y+3	; 0x03
    14e8:	5c 81       	ldd	r21, Y+4	; 0x04
    14ea:	89 85       	ldd	r24, Y+9	; 0x09
    14ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ee:	ab 85       	ldd	r26, Y+11	; 0x0b
    14f0:	bc 85       	ldd	r27, Y+12	; 0x0c
    14f2:	28 17       	cp	r18, r24
    14f4:	39 07       	cpc	r19, r25
    14f6:	4a 07       	cpc	r20, r26
    14f8:	5b 07       	cpc	r21, r27
    14fa:	40 f3       	brcs	.-48     	; 0x14cc <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=380, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	af 81       	ldd	r26, Y+7	; 0x07
    1502:	b8 85       	ldd	r27, Y+8	; 0x08
    1504:	01 96       	adiw	r24, 0x01	; 1
    1506:	a1 1d       	adc	r26, r1
    1508:	b1 1d       	adc	r27, r1
    150a:	8d 83       	std	Y+5, r24	; 0x05
    150c:	9e 83       	std	Y+6, r25	; 0x06
    150e:	af 83       	std	Y+7, r26	; 0x07
    1510:	b8 87       	std	Y+8, r27	; 0x08
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	4f 81       	ldd	r20, Y+7	; 0x07
    1518:	58 85       	ldd	r21, Y+8	; 0x08
    151a:	8d 85       	ldd	r24, Y+13	; 0x0d
    151c:	9e 85       	ldd	r25, Y+14	; 0x0e
    151e:	af 85       	ldd	r26, Y+15	; 0x0f
    1520:	b8 89       	ldd	r27, Y+16	; 0x10
    1522:	28 17       	cp	r18, r24
    1524:	39 07       	cpc	r19, r25
    1526:	4a 07       	cpc	r20, r26
    1528:	5b 07       	cpc	r21, r27
    152a:	58 f2       	brcs	.-106    	; 0x14c2 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    152c:	60 96       	adiw	r28, 0x10	; 16
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	08 95       	ret

0000153e <timer0Init>:
static uint8_t gu8_timer2PreScaler = 0;

/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    153e:	ef 92       	push	r14
    1540:	0f 93       	push	r16
    1542:	df 93       	push	r29
    1544:	cf 93       	push	r28
    1546:	00 d0       	rcall	.+0      	; 0x1548 <timer0Init+0xa>
    1548:	00 d0       	rcall	.+0      	; 0x154a <timer0Init+0xc>
    154a:	00 d0       	rcall	.+0      	; 0x154c <timer0Init+0xe>
    154c:	cd b7       	in	r28, 0x3d	; 61
    154e:	de b7       	in	r29, 0x3e	; 62
    1550:	89 83       	std	Y+1, r24	; 0x01
    1552:	6a 83       	std	Y+2, r22	; 0x02
    1554:	4b 83       	std	Y+3, r20	; 0x03
    1556:	2c 83       	std	Y+4, r18	; 0x04
    1558:	0d 83       	std	Y+5, r16	; 0x05
    155a:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    155c:	a3 e5       	ldi	r26, 0x53	; 83
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e3 e5       	ldi	r30, 0x53	; 83
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	80 68       	ori	r24, 0x80	; 128
    1568:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    156a:	a3 e5       	ldi	r26, 0x53	; 83
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e3 e5       	ldi	r30, 0x53	; 83
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	98 2f       	mov	r25, r24
    1576:	97 7b       	andi	r25, 0xB7	; 183
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	89 2b       	or	r24, r25
    157c:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    157e:	a3 e5       	ldi	r26, 0x53	; 83
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e3 e5       	ldi	r30, 0x53	; 83
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	98 2f       	mov	r25, r24
    158a:	9f 7c       	andi	r25, 0xCF	; 207
    158c:	8a 81       	ldd	r24, Y+2	; 0x02
    158e:	89 2b       	or	r24, r25
    1590:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1592:	8b 81       	ldd	r24, Y+3	; 0x03
    1594:	80 93 6b 00 	sts	0x006B, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    1598:	e2 e5       	ldi	r30, 0x52	; 82
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	8c 81       	ldd	r24, Y+4	; 0x04
    159e:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    15a0:	ec e5       	ldi	r30, 0x5C	; 92
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    15a8:	a9 e5       	ldi	r26, 0x59	; 89
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e9 e5       	ldi	r30, 0x59	; 89
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	98 2f       	mov	r25, r24
    15b4:	9c 7f       	andi	r25, 0xFC	; 252
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	89 2b       	or	r24, r25
    15ba:	8c 93       	st	X, r24
}
    15bc:	26 96       	adiw	r28, 0x06	; 6
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	cf 91       	pop	r28
    15ca:	df 91       	pop	r29
    15cc:	0f 91       	pop	r16
    15ce:	ef 90       	pop	r14
    15d0:	08 95       	ret

000015d2 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	0f 92       	push	r0
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    15de:	e2 e5       	ldi	r30, 0x52	; 82
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	80 83       	st	Z, r24
}
    15e6:	0f 90       	pop	r0
    15e8:	cf 91       	pop	r28
    15ea:	df 91       	pop	r29
    15ec:	08 95       	ret

000015ee <timer0Read>:

uint8_t timer0Read(void)
{
    15ee:	df 93       	push	r29
    15f0:	cf 93       	push	r28
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    15f6:	e2 e5       	ldi	r30, 0x52	; 82
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
}
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <timer0Start>:

void timer0Start(void)
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    160a:	a3 e5       	ldi	r26, 0x53	; 83
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	e3 e5       	ldi	r30, 0x53	; 83
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	98 2f       	mov	r25, r24
    1616:	98 7f       	andi	r25, 0xF8	; 248
    1618:	80 91 6b 00 	lds	r24, 0x006B
    161c:	89 2b       	or	r24, r25
    161e:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    1620:	e2 e5       	ldi	r30, 0x52	; 82
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <timer0Stop>:

void timer0Stop(void)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    1634:	a3 e5       	ldi	r26, 0x53	; 83
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e3 e5       	ldi	r30, 0x53	; 83
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	88 7f       	andi	r24, 0xF8	; 248
    1640:	8c 93       	st	X, r24
}
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    1648:	ef 92       	push	r14
    164a:	0f 93       	push	r16
    164c:	df 93       	push	r29
    164e:	cf 93       	push	r28
    1650:	00 d0       	rcall	.+0      	; 0x1652 <timer0DelayMs+0xa>
    1652:	00 d0       	rcall	.+0      	; 0x1654 <timer0DelayMs+0xc>
    1654:	0f 92       	push	r0
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    165a:	9d 83       	std	Y+5, r25	; 0x05
    165c:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    165e:	1b 82       	std	Y+3, r1	; 0x03
    1660:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1662:	8a ef       	ldi	r24, 0xFA	; 250
    1664:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	60 e0       	ldi	r22, 0x00	; 0
    166a:	43 e0       	ldi	r20, 0x03	; 3
    166c:	20 e0       	ldi	r18, 0x00	; 0
    166e:	00 e0       	ldi	r16, 0x00	; 0
    1670:	ee 24       	eor	r14, r14
    1672:	0e 94 9f 0a 	call	0x153e	; 0x153e <timer0Init>
	timer0Start();
    1676:	0e 94 01 0b 	call	0x1602	; 0x1602 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    167a:	1b 82       	std	Y+3, r1	; 0x03
    167c:	1a 82       	std	Y+2, r1	; 0x02
    167e:	0e c0       	rjmp	.+28     	; 0x169c <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    1680:	e2 e5       	ldi	r30, 0x52	; 82
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	90 81       	ld	r25, Z
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	98 17       	cp	r25, r24
    168a:	d0 f3       	brcs	.-12     	; 0x1680 <timer0DelayMs+0x38>
		TCNT0 = 0;
    168c:	e2 e5       	ldi	r30, 0x52	; 82
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	9b 81       	ldd	r25, Y+3	; 0x03
    1696:	01 96       	adiw	r24, 0x01	; 1
    1698:	9b 83       	std	Y+3, r25	; 0x03
    169a:	8a 83       	std	Y+2, r24	; 0x02
    169c:	2a 81       	ldd	r18, Y+2	; 0x02
    169e:	3b 81       	ldd	r19, Y+3	; 0x03
    16a0:	8c 81       	ldd	r24, Y+4	; 0x04
    16a2:	9d 81       	ldd	r25, Y+5	; 0x05
    16a4:	28 17       	cp	r18, r24
    16a6:	39 07       	cpc	r19, r25
    16a8:	58 f3       	brcs	.-42     	; 0x1680 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    16aa:	0f 90       	pop	r0
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	cf 91       	pop	r28
    16b6:	df 91       	pop	r29
    16b8:	0f 91       	pop	r16
    16ba:	ef 90       	pop	r14
    16bc:	08 95       	ret

000016be <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    16be:	ef 92       	push	r14
    16c0:	0f 93       	push	r16
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	29 97       	sbiw	r28, 0x09	; 9
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	6e 83       	std	Y+6, r22	; 0x06
    16d8:	7f 83       	std	Y+7, r23	; 0x07
    16da:	88 87       	std	Y+8, r24	; 0x08
    16dc:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    16de:	1a 82       	std	Y+2, r1	; 0x02
    16e0:	1b 82       	std	Y+3, r1	; 0x03
    16e2:	1c 82       	std	Y+4, r1	; 0x04
    16e4:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    16e6:	80 e1       	ldi	r24, 0x10	; 16
    16e8:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	41 e0       	ldi	r20, 0x01	; 1
    16f0:	20 e0       	ldi	r18, 0x00	; 0
    16f2:	09 81       	ldd	r16, Y+1	; 0x01
    16f4:	ee 24       	eor	r14, r14
    16f6:	0e 94 9f 0a 	call	0x153e	; 0x153e <timer0Init>
	timer0Start();
    16fa:	0e 94 01 0b 	call	0x1602	; 0x1602 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    16fe:	1a 82       	std	Y+2, r1	; 0x02
    1700:	1b 82       	std	Y+3, r1	; 0x03
    1702:	1c 82       	std	Y+4, r1	; 0x04
    1704:	1d 82       	std	Y+5, r1	; 0x05
    1706:	1e c0       	rjmp	.+60     	; 0x1744 <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    1708:	e8 e5       	ldi	r30, 0x58	; 88
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	82 70       	andi	r24, 0x02	; 2
    1714:	90 70       	andi	r25, 0x00	; 0
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	b9 f3       	breq	.-18     	; 0x1708 <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    171a:	a8 e5       	ldi	r26, 0x58	; 88
    171c:	b0 e0       	ldi	r27, 0x00	; 0
    171e:	e8 e5       	ldi	r30, 0x58	; 88
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	80 81       	ld	r24, Z
    1724:	82 60       	ori	r24, 0x02	; 2
    1726:	8c 93       	st	X, r24
		TCNT0 = 0;
    1728:	e2 e5       	ldi	r30, 0x52	; 82
    172a:	f0 e0       	ldi	r31, 0x00	; 0
    172c:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	9b 81       	ldd	r25, Y+3	; 0x03
    1732:	ac 81       	ldd	r26, Y+4	; 0x04
    1734:	bd 81       	ldd	r27, Y+5	; 0x05
    1736:	01 96       	adiw	r24, 0x01	; 1
    1738:	a1 1d       	adc	r26, r1
    173a:	b1 1d       	adc	r27, r1
    173c:	8a 83       	std	Y+2, r24	; 0x02
    173e:	9b 83       	std	Y+3, r25	; 0x03
    1740:	ac 83       	std	Y+4, r26	; 0x04
    1742:	bd 83       	std	Y+5, r27	; 0x05
    1744:	2a 81       	ldd	r18, Y+2	; 0x02
    1746:	3b 81       	ldd	r19, Y+3	; 0x03
    1748:	4c 81       	ldd	r20, Y+4	; 0x04
    174a:	5d 81       	ldd	r21, Y+5	; 0x05
    174c:	8e 81       	ldd	r24, Y+6	; 0x06
    174e:	9f 81       	ldd	r25, Y+7	; 0x07
    1750:	a8 85       	ldd	r26, Y+8	; 0x08
    1752:	b9 85       	ldd	r27, Y+9	; 0x09
    1754:	28 17       	cp	r18, r24
    1756:	39 07       	cpc	r19, r25
    1758:	4a 07       	cpc	r20, r26
    175a:	5b 07       	cpc	r21, r27
    175c:	a8 f2       	brcs	.-86     	; 0x1708 <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    175e:	29 96       	adiw	r28, 0x09	; 9
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	0f 91       	pop	r16
    1770:	ef 90       	pop	r14
    1772:	08 95       	ret

00001774 <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1774:	ef 92       	push	r14
    1776:	0f 93       	push	r16
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	00 d0       	rcall	.+0      	; 0x177e <timer0SwPWM+0xa>
    177e:	00 d0       	rcall	.+0      	; 0x1780 <timer0SwPWM+0xc>
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	8b 83       	std	Y+3, r24	; 0x03
    1786:	6c 83       	std	Y+4, r22	; 0x04
	/* Two variables to hold the values of output compare and prescaler */
	uint8_t u8_outputCompare, u8_prescaler;

	/* Enable global interrupt */
	sei();
    1788:	78 94       	sei
	
	/* If condition to determine the right equation to calculate prescaler and output compare values */
	if(u8_frequency <= 80)
    178a:	8c 81       	ldd	r24, Y+4	; 0x04
    178c:	81 35       	cpi	r24, 0x51	; 81
    178e:	e8 f4       	brcc	.+58     	; 0x17ca <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    1790:	83 e0       	ldi	r24, 0x03	; 3
    1792:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	88 2f       	mov	r24, r24
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e0       	ldi	r26, 0x00	; 0
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	39 e1       	ldi	r19, 0x19	; 25
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	bc 01       	movw	r22, r24
    17a8:	cd 01       	movw	r24, r26
    17aa:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    17ae:	9b 01       	movw	r18, r22
    17b0:	ac 01       	movw	r20, r24
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	94 e2       	ldi	r25, 0x24	; 36
    17b6:	a4 ef       	ldi	r26, 0xF4	; 244
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	bc 01       	movw	r22, r24
    17bc:	cd 01       	movw	r24, r26
    17be:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    17c2:	da 01       	movw	r26, r20
    17c4:	c9 01       	movw	r24, r18
    17c6:	8a 83       	std	Y+2, r24	; 0x02
    17c8:	1c c0       	rjmp	.+56     	; 0x1802 <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    17ce:	8c 81       	ldd	r24, Y+4	; 0x04
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a0 e0       	ldi	r26, 0x00	; 0
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	20 e2       	ldi	r18, 0x20	; 32
    17da:	33 e0       	ldi	r19, 0x03	; 3
    17dc:	40 e0       	ldi	r20, 0x00	; 0
    17de:	50 e0       	ldi	r21, 0x00	; 0
    17e0:	bc 01       	movw	r22, r24
    17e2:	cd 01       	movw	r24, r26
    17e4:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    17e8:	9b 01       	movw	r18, r22
    17ea:	ac 01       	movw	r20, r24
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	94 e2       	ldi	r25, 0x24	; 36
    17f0:	a4 ef       	ldi	r26, 0xF4	; 244
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    17fc:	da 01       	movw	r26, r20
    17fe:	c9 01       	movw	r24, r18
    1800:	8a 83       	std	Y+2, r24	; 0x02
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}
	
	/* Initialize the timer depending on the previously calculated values */
	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    1802:	88 e0       	ldi	r24, 0x08	; 8
    1804:	60 e0       	ldi	r22, 0x00	; 0
    1806:	49 81       	ldd	r20, Y+1	; 0x01
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	0a 81       	ldd	r16, Y+2	; 0x02
    180c:	ee 24       	eor	r14, r14
    180e:	68 94       	set
    1810:	e1 f8       	bld	r14, 1
    1812:	0e 94 9f 0a 	call	0x153e	; 0x153e <timer0Init>
	
	/* Provide the clock to the timer */
	timer0Start();
    1816:	0e 94 01 0b 	call	0x1602	; 0x1602 <timer0Start>
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	0f 91       	pop	r16
    1828:	ef 90       	pop	r14
    182a:	08 95       	ret

0000182c <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    182c:	af 92       	push	r10
    182e:	cf 92       	push	r12
    1830:	df 92       	push	r13
    1832:	ef 92       	push	r14
    1834:	ff 92       	push	r15
    1836:	0f 93       	push	r16
    1838:	1f 93       	push	r17
    183a:	df 93       	push	r29
    183c:	cf 93       	push	r28
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
    1842:	2d 97       	sbiw	r28, 0x0d	; 13
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	89 83       	std	Y+1, r24	; 0x01
    1850:	7b 83       	std	Y+3, r23	; 0x03
    1852:	6a 83       	std	Y+2, r22	; 0x02
    1854:	4c 83       	std	Y+4, r20	; 0x04
    1856:	3e 83       	std	Y+6, r19	; 0x06
    1858:	2d 83       	std	Y+5, r18	; 0x05
    185a:	18 87       	std	Y+8, r17	; 0x08
    185c:	0f 83       	std	Y+7, r16	; 0x07
    185e:	fa 86       	std	Y+10, r15	; 0x0a
    1860:	e9 86       	std	Y+9, r14	; 0x09
    1862:	dc 86       	std	Y+12, r13	; 0x0c
    1864:	cb 86       	std	Y+11, r12	; 0x0b
    1866:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    1868:	af e4       	ldi	r26, 0x4F	; 79
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	ef e4       	ldi	r30, 0x4F	; 79
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	88 60       	ori	r24, 0x08	; 8
    1874:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1876:	af e4       	ldi	r26, 0x4F	; 79
    1878:	b0 e0       	ldi	r27, 0x00	; 0
    187a:	ef e4       	ldi	r30, 0x4F	; 79
    187c:	f0 e0       	ldi	r31, 0x00	; 0
    187e:	80 81       	ld	r24, Z
    1880:	84 60       	ori	r24, 0x04	; 4
    1882:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    1884:	ee e4       	ldi	r30, 0x4E	; 78
    1886:	f0 e0       	ldi	r31, 0x00	; 0
    1888:	11 82       	std	Z+1, r1	; 0x01
    188a:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    188c:	ee e4       	ldi	r30, 0x4E	; 78
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	28 2f       	mov	r18, r24
    1894:	30 e0       	ldi	r19, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	9b 81       	ldd	r25, Y+3	; 0x03
    189a:	82 2b       	or	r24, r18
    189c:	93 2b       	or	r25, r19
    189e:	91 83       	std	Z+1, r25	; 0x01
    18a0:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    18a2:	8c 81       	ldd	r24, Y+4	; 0x04
    18a4:	80 93 6b 00 	sts	0x006B, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    18a8:	ec e4       	ldi	r30, 0x4C	; 76
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    18b4:	ea e4       	ldi	r30, 0x4A	; 74
    18b6:	f0 e0       	ldi	r31, 0x00	; 0
    18b8:	8f 81       	ldd	r24, Y+7	; 0x07
    18ba:	98 85       	ldd	r25, Y+8	; 0x08
    18bc:	91 83       	std	Z+1, r25	; 0x01
    18be:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    18c0:	e8 e4       	ldi	r30, 0x48	; 72
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	89 85       	ldd	r24, Y+9	; 0x09
    18c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18c8:	91 83       	std	Z+1, r25	; 0x01
    18ca:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    18cc:	a9 e5       	ldi	r26, 0x59	; 89
    18ce:	b0 e0       	ldi	r27, 0x00	; 0
    18d0:	e9 e5       	ldi	r30, 0x59	; 89
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	98 2f       	mov	r25, r24
    18d8:	93 7c       	andi	r25, 0xC3	; 195
    18da:	8d 85       	ldd	r24, Y+13	; 0x0d
    18dc:	89 2b       	or	r24, r25
    18de:	8c 93       	st	X, r24
}
    18e0:	2d 96       	adiw	r28, 0x0d	; 13
    18e2:	0f b6       	in	r0, 0x3f	; 63
    18e4:	f8 94       	cli
    18e6:	de bf       	out	0x3e, r29	; 62
    18e8:	0f be       	out	0x3f, r0	; 63
    18ea:	cd bf       	out	0x3d, r28	; 61
    18ec:	cf 91       	pop	r28
    18ee:	df 91       	pop	r29
    18f0:	1f 91       	pop	r17
    18f2:	0f 91       	pop	r16
    18f4:	ff 90       	pop	r15
    18f6:	ef 90       	pop	r14
    18f8:	df 90       	pop	r13
    18fa:	cf 90       	pop	r12
    18fc:	af 90       	pop	r10
    18fe:	08 95       	ret

00001900 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    1900:	df 93       	push	r29
    1902:	cf 93       	push	r28
    1904:	00 d0       	rcall	.+0      	; 0x1906 <timer1Set+0x6>
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	9a 83       	std	Y+2, r25	; 0x02
    190c:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    190e:	ec e4       	ldi	r30, 0x4C	; 76
    1910:	f0 e0       	ldi	r31, 0x00	; 0
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	9a 81       	ldd	r25, Y+2	; 0x02
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
}
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <timer1Read>:

uint16_t timer1Read(void)
{
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	cd b7       	in	r28, 0x3d	; 61
    192a:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    192c:	ec e4       	ldi	r30, 0x4C	; 76
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	91 81       	ldd	r25, Z+1	; 0x01
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <timer1Start>:

void timer1Start(void)
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    1942:	ae e4       	ldi	r26, 0x4E	; 78
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	ee e4       	ldi	r30, 0x4E	; 78
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	98 2f       	mov	r25, r24
    194e:	98 7f       	andi	r25, 0xF8	; 248
    1950:	80 91 6b 00 	lds	r24, 0x006B
    1954:	89 2b       	or	r24, r25
    1956:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    1958:	ec e4       	ldi	r30, 0x4C	; 76
    195a:	f0 e0       	ldi	r31, 0x00	; 0
    195c:	11 82       	std	Z+1, r1	; 0x01
    195e:	10 82       	st	Z, r1
}
    1960:	cf 91       	pop	r28
    1962:	df 91       	pop	r29
    1964:	08 95       	ret

00001966 <timer1Stop>:

void timer1Stop(void)
{
    1966:	df 93       	push	r29
    1968:	cf 93       	push	r28
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    196e:	ae e4       	ldi	r26, 0x4E	; 78
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	ee e4       	ldi	r30, 0x4E	; 78
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 7f       	andi	r24, 0xF8	; 248
    197a:	8c 93       	st	X, r24
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	08 95       	ret

00001982 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    1982:	af 92       	push	r10
    1984:	cf 92       	push	r12
    1986:	df 92       	push	r13
    1988:	ef 92       	push	r14
    198a:	ff 92       	push	r15
    198c:	0f 93       	push	r16
    198e:	1f 93       	push	r17
    1990:	df 93       	push	r29
    1992:	cf 93       	push	r28
    1994:	00 d0       	rcall	.+0      	; 0x1996 <timer1DelayMs+0x14>
    1996:	00 d0       	rcall	.+0      	; 0x1998 <timer1DelayMs+0x16>
    1998:	00 d0       	rcall	.+0      	; 0x199a <timer1DelayMs+0x18>
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
    199e:	9e 83       	std	Y+6, r25	; 0x06
    19a0:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    19a2:	1c 82       	std	Y+4, r1	; 0x04
    19a4:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    19a6:	8a ef       	ldi	r24, 0xFA	; 250
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9a 83       	std	Y+2, r25	; 0x02
    19ac:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	60 e0       	ldi	r22, 0x00	; 0
    19b2:	70 e0       	ldi	r23, 0x00	; 0
    19b4:	43 e0       	ldi	r20, 0x03	; 3
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	00 e0       	ldi	r16, 0x00	; 0
    19bc:	10 e0       	ldi	r17, 0x00	; 0
    19be:	ee 24       	eor	r14, r14
    19c0:	ff 24       	eor	r15, r15
    19c2:	cc 24       	eor	r12, r12
    19c4:	dd 24       	eor	r13, r13
    19c6:	aa 24       	eor	r10, r10
    19c8:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1Init>
	timer1Start();
    19cc:	0e 94 9d 0c 	call	0x193a	; 0x193a <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    19d0:	1c 82       	std	Y+4, r1	; 0x04
    19d2:	1b 82       	std	Y+3, r1	; 0x03
    19d4:	12 c0       	rjmp	.+36     	; 0x19fa <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    19d6:	ec e4       	ldi	r30, 0x4C	; 76
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	20 81       	ld	r18, Z
    19dc:	31 81       	ldd	r19, Z+1	; 0x01
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	28 17       	cp	r18, r24
    19e4:	39 07       	cpc	r19, r25
    19e6:	b8 f3       	brcs	.-18     	; 0x19d6 <timer1DelayMs+0x54>
		TCNT1 = 0;
    19e8:	ec e4       	ldi	r30, 0x4C	; 76
    19ea:	f0 e0       	ldi	r31, 0x00	; 0
    19ec:	11 82       	std	Z+1, r1	; 0x01
    19ee:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    19f0:	8b 81       	ldd	r24, Y+3	; 0x03
    19f2:	9c 81       	ldd	r25, Y+4	; 0x04
    19f4:	01 96       	adiw	r24, 0x01	; 1
    19f6:	9c 83       	std	Y+4, r25	; 0x04
    19f8:	8b 83       	std	Y+3, r24	; 0x03
    19fa:	2b 81       	ldd	r18, Y+3	; 0x03
    19fc:	3c 81       	ldd	r19, Y+4	; 0x04
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	28 17       	cp	r18, r24
    1a04:	39 07       	cpc	r19, r25
    1a06:	38 f3       	brcs	.-50     	; 0x19d6 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    1a08:	26 96       	adiw	r28, 0x06	; 6
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	de bf       	out	0x3e, r29	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	cd bf       	out	0x3d, r28	; 61
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	1f 91       	pop	r17
    1a1a:	0f 91       	pop	r16
    1a1c:	ff 90       	pop	r15
    1a1e:	ef 90       	pop	r14
    1a20:	df 90       	pop	r13
    1a22:	cf 90       	pop	r12
    1a24:	af 90       	pop	r10
    1a26:	08 95       	ret

00001a28 <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    1a28:	af 92       	push	r10
    1a2a:	cf 92       	push	r12
    1a2c:	df 92       	push	r13
    1a2e:	ef 92       	push	r14
    1a30:	ff 92       	push	r15
    1a32:	0f 93       	push	r16
    1a34:	1f 93       	push	r17
    1a36:	df 93       	push	r29
    1a38:	cf 93       	push	r28
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	2a 97       	sbiw	r28, 0x0a	; 10
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	6f 83       	std	Y+7, r22	; 0x07
    1a4c:	78 87       	std	Y+8, r23	; 0x08
    1a4e:	89 87       	std	Y+9, r24	; 0x09
    1a50:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    1a52:	1b 82       	std	Y+3, r1	; 0x03
    1a54:	1c 82       	std	Y+4, r1	; 0x04
    1a56:	1d 82       	std	Y+5, r1	; 0x05
    1a58:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    1a5a:	80 e1       	ldi	r24, 0x10	; 16
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	9a 83       	std	Y+2, r25	; 0x02
    1a60:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    1a62:	e9 81       	ldd	r30, Y+1	; 0x01
    1a64:	fa 81       	ldd	r31, Y+2	; 0x02
    1a66:	88 e0       	ldi	r24, 0x08	; 8
    1a68:	60 e0       	ldi	r22, 0x00	; 0
    1a6a:	70 e0       	ldi	r23, 0x00	; 0
    1a6c:	41 e0       	ldi	r20, 0x01	; 1
    1a6e:	20 e0       	ldi	r18, 0x00	; 0
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	8f 01       	movw	r16, r30
    1a74:	ee 24       	eor	r14, r14
    1a76:	ff 24       	eor	r15, r15
    1a78:	cc 24       	eor	r12, r12
    1a7a:	dd 24       	eor	r13, r13
    1a7c:	aa 24       	eor	r10, r10
    1a7e:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1Init>
	timer1Start();
    1a82:	0e 94 9d 0c 	call	0x193a	; 0x193a <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1a86:	1b 82       	std	Y+3, r1	; 0x03
    1a88:	1c 82       	std	Y+4, r1	; 0x04
    1a8a:	1d 82       	std	Y+5, r1	; 0x05
    1a8c:	1e 82       	std	Y+6, r1	; 0x06
    1a8e:	1f c0       	rjmp	.+62     	; 0x1ace <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    1a90:	e8 e5       	ldi	r30, 0x58	; 88
    1a92:	f0 e0       	ldi	r31, 0x00	; 0
    1a94:	80 81       	ld	r24, Z
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	80 71       	andi	r24, 0x10	; 16
    1a9c:	90 70       	andi	r25, 0x00	; 0
    1a9e:	00 97       	sbiw	r24, 0x00	; 0
    1aa0:	b9 f3       	breq	.-18     	; 0x1a90 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    1aa2:	a8 e5       	ldi	r26, 0x58	; 88
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e8 e5       	ldi	r30, 0x58	; 88
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	80 61       	ori	r24, 0x10	; 16
    1aae:	8c 93       	st	X, r24
		TCNT1 = 0;
    1ab0:	ec e4       	ldi	r30, 0x4C	; 76
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	11 82       	std	Z+1, r1	; 0x01
    1ab6:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	ad 81       	ldd	r26, Y+5	; 0x05
    1abe:	be 81       	ldd	r27, Y+6	; 0x06
    1ac0:	01 96       	adiw	r24, 0x01	; 1
    1ac2:	a1 1d       	adc	r26, r1
    1ac4:	b1 1d       	adc	r27, r1
    1ac6:	8b 83       	std	Y+3, r24	; 0x03
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	ad 83       	std	Y+5, r26	; 0x05
    1acc:	be 83       	std	Y+6, r27	; 0x06
    1ace:	2b 81       	ldd	r18, Y+3	; 0x03
    1ad0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ad4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ad6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad8:	98 85       	ldd	r25, Y+8	; 0x08
    1ada:	a9 85       	ldd	r26, Y+9	; 0x09
    1adc:	ba 85       	ldd	r27, Y+10	; 0x0a
    1ade:	28 17       	cp	r18, r24
    1ae0:	39 07       	cpc	r19, r25
    1ae2:	4a 07       	cpc	r20, r26
    1ae4:	5b 07       	cpc	r21, r27
    1ae6:	a0 f2       	brcs	.-88     	; 0x1a90 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    1ae8:	2a 96       	adiw	r28, 0x0a	; 10
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	de bf       	out	0x3e, r29	; 62
    1af0:	0f be       	out	0x3f, r0	; 63
    1af2:	cd bf       	out	0x3d, r28	; 61
    1af4:	cf 91       	pop	r28
    1af6:	df 91       	pop	r29
    1af8:	1f 91       	pop	r17
    1afa:	0f 91       	pop	r16
    1afc:	ff 90       	pop	r15
    1afe:	ef 90       	pop	r14
    1b00:	df 90       	pop	r13
    1b02:	cf 90       	pop	r12
    1b04:	af 90       	pop	r10
    1b06:	08 95       	ret

00001b08 <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1b08:	af 92       	push	r10
    1b0a:	cf 92       	push	r12
    1b0c:	df 92       	push	r13
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <timer1SwPWM+0x14>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <timer1SwPWM+0x16>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8b 83       	std	Y+3, r24	; 0x03
    1b24:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    1b26:	78 94       	sei

	if(u8_frequency <= 80)
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	81 35       	cpi	r24, 0x51	; 81
    1b2c:	e8 f4       	brcc	.+58     	; 0x1b68 <timer1SwPWM+0x60>
	{
		u8_prescaler = T0_PRESCALER_64;
    1b2e:	83 e0       	ldi	r24, 0x03	; 3
    1b30:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1b32:	8c 81       	ldd	r24, Y+4	; 0x04
    1b34:	88 2f       	mov	r24, r24
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	a0 e0       	ldi	r26, 0x00	; 0
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	20 e0       	ldi	r18, 0x00	; 0
    1b3e:	39 e1       	ldi	r19, 0x19	; 25
    1b40:	40 e0       	ldi	r20, 0x00	; 0
    1b42:	50 e0       	ldi	r21, 0x00	; 0
    1b44:	bc 01       	movw	r22, r24
    1b46:	cd 01       	movw	r24, r26
    1b48:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    1b4c:	9b 01       	movw	r18, r22
    1b4e:	ac 01       	movw	r20, r24
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	94 e2       	ldi	r25, 0x24	; 36
    1b54:	a4 ef       	ldi	r26, 0xF4	; 244
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	bc 01       	movw	r22, r24
    1b5a:	cd 01       	movw	r24, r26
    1b5c:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    1b60:	da 01       	movw	r26, r20
    1b62:	c9 01       	movw	r24, r18
    1b64:	8a 83       	std	Y+2, r24	; 0x02
    1b66:	1c c0       	rjmp	.+56     	; 0x1ba0 <timer1SwPWM+0x98>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    1b68:	82 e0       	ldi	r24, 0x02	; 2
    1b6a:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b6e:	88 2f       	mov	r24, r24
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	a0 e0       	ldi	r26, 0x00	; 0
    1b74:	b0 e0       	ldi	r27, 0x00	; 0
    1b76:	20 e2       	ldi	r18, 0x20	; 32
    1b78:	33 e0       	ldi	r19, 0x03	; 3
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	bc 01       	movw	r22, r24
    1b80:	cd 01       	movw	r24, r26
    1b82:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    1b86:	9b 01       	movw	r18, r22
    1b88:	ac 01       	movw	r20, r24
    1b8a:	80 e0       	ldi	r24, 0x00	; 0
    1b8c:	94 e2       	ldi	r25, 0x24	; 36
    1b8e:	a4 ef       	ldi	r26, 0xF4	; 244
    1b90:	b0 e0       	ldi	r27, 0x00	; 0
    1b92:	bc 01       	movw	r22, r24
    1b94:	cd 01       	movw	r24, r26
    1b96:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    1b9a:	da 01       	movw	r26, r20
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, u8_prescaler, 0, u8_outputCompare, 0, 0, T1_INTERRUPT_CMP_1A);
    1ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba2:	e8 2f       	mov	r30, r24
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	88 e0       	ldi	r24, 0x08	; 8
    1ba8:	60 e0       	ldi	r22, 0x00	; 0
    1baa:	70 e0       	ldi	r23, 0x00	; 0
    1bac:	49 81       	ldd	r20, Y+1	; 0x01
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	8f 01       	movw	r16, r30
    1bb4:	ee 24       	eor	r14, r14
    1bb6:	ff 24       	eor	r15, r15
    1bb8:	cc 24       	eor	r12, r12
    1bba:	dd 24       	eor	r13, r13
    1bbc:	aa 24       	eor	r10, r10
    1bbe:	68 94       	set
    1bc0:	a4 f8       	bld	r10, 4
    1bc2:	0e 94 16 0c 	call	0x182c	; 0x182c <timer1Init>
	timer1Start();
    1bc6:	0e 94 9d 0c 	call	0x193a	; 0x193a <timer1Start>
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	1f 91       	pop	r17
    1bd8:	0f 91       	pop	r16
    1bda:	ff 90       	pop	r15
    1bdc:	ef 90       	pop	r14
    1bde:	df 90       	pop	r13
    1be0:	cf 90       	pop	r12
    1be2:	af 90       	pop	r10
    1be4:	08 95       	ret

00001be6 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    1be6:	cf 92       	push	r12
    1be8:	ef 92       	push	r14
    1bea:	0f 93       	push	r16
    1bec:	df 93       	push	r29
    1bee:	cf 93       	push	r28
    1bf0:	cd b7       	in	r28, 0x3d	; 61
    1bf2:	de b7       	in	r29, 0x3e	; 62
    1bf4:	27 97       	sbiw	r28, 0x07	; 7
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	de bf       	out	0x3e, r29	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	cd bf       	out	0x3d, r28	; 61
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	6a 83       	std	Y+2, r22	; 0x02
    1c04:	4b 83       	std	Y+3, r20	; 0x03
    1c06:	2c 83       	std	Y+4, r18	; 0x04
    1c08:	0d 83       	std	Y+5, r16	; 0x05
    1c0a:	ee 82       	std	Y+6, r14	; 0x06
    1c0c:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    1c0e:	a5 e4       	ldi	r26, 0x45	; 69
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e5 e4       	ldi	r30, 0x45	; 69
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    1c1c:	a5 e4       	ldi	r26, 0x45	; 69
    1c1e:	b0 e0       	ldi	r27, 0x00	; 0
    1c20:	e5 e4       	ldi	r30, 0x45	; 69
    1c22:	f0 e0       	ldi	r31, 0x00	; 0
    1c24:	80 81       	ld	r24, Z
    1c26:	98 2f       	mov	r25, r24
    1c28:	97 7b       	andi	r25, 0xB7	; 183
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	89 2b       	or	r24, r25
    1c2e:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    1c30:	a5 e4       	ldi	r26, 0x45	; 69
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e5 e4       	ldi	r30, 0x45	; 69
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	98 2f       	mov	r25, r24
    1c3c:	9f 7c       	andi	r25, 0xCF	; 207
    1c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c40:	89 2b       	or	r24, r25
    1c42:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	80 93 6c 00 	sts	0x006C, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    1c4a:	e4 e4       	ldi	r30, 0x44	; 68
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1c50:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    1c52:	e3 e4       	ldi	r30, 0x43	; 67
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    1c5a:	a9 e5       	ldi	r26, 0x59	; 89
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e9 e5       	ldi	r30, 0x59	; 89
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	98 2f       	mov	r25, r24
    1c66:	9f 73       	andi	r25, 0x3F	; 63
    1c68:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6a:	89 2b       	or	r24, r25
    1c6c:	8c 93       	st	X, r24
}
    1c6e:	27 96       	adiw	r28, 0x07	; 7
    1c70:	0f b6       	in	r0, 0x3f	; 63
    1c72:	f8 94       	cli
    1c74:	de bf       	out	0x3e, r29	; 62
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	cd bf       	out	0x3d, r28	; 61
    1c7a:	cf 91       	pop	r28
    1c7c:	df 91       	pop	r29
    1c7e:	0f 91       	pop	r16
    1c80:	ef 90       	pop	r14
    1c82:	cf 90       	pop	r12
    1c84:	08 95       	ret

00001c86 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    1c86:	df 93       	push	r29
    1c88:	cf 93       	push	r28
    1c8a:	0f 92       	push	r0
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    1c92:	e4 e4       	ldi	r30, 0x44	; 68
    1c94:	f0 e0       	ldi	r31, 0x00	; 0
    1c96:	89 81       	ldd	r24, Y+1	; 0x01
    1c98:	80 83       	st	Z, r24
}
    1c9a:	0f 90       	pop	r0
    1c9c:	cf 91       	pop	r28
    1c9e:	df 91       	pop	r29
    1ca0:	08 95       	ret

00001ca2 <timer2Read>:

uint8_t timer2Read(void)
{
    1ca2:	df 93       	push	r29
    1ca4:	cf 93       	push	r28
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    1caa:	e4 e4       	ldi	r30, 0x44	; 68
    1cac:	f0 e0       	ldi	r31, 0x00	; 0
    1cae:	80 81       	ld	r24, Z
}
    1cb0:	cf 91       	pop	r28
    1cb2:	df 91       	pop	r29
    1cb4:	08 95       	ret

00001cb6 <timer2Start>:

void timer2Start(void)
{
    1cb6:	df 93       	push	r29
    1cb8:	cf 93       	push	r28
    1cba:	cd b7       	in	r28, 0x3d	; 61
    1cbc:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    1cbe:	a5 e4       	ldi	r26, 0x45	; 69
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e5 e4       	ldi	r30, 0x45	; 69
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	98 2f       	mov	r25, r24
    1cca:	98 7f       	andi	r25, 0xF8	; 248
    1ccc:	80 91 6c 00 	lds	r24, 0x006C
    1cd0:	89 2b       	or	r24, r25
    1cd2:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    1cd4:	e4 e4       	ldi	r30, 0x44	; 68
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	10 82       	st	Z, r1
}
    1cda:	cf 91       	pop	r28
    1cdc:	df 91       	pop	r29
    1cde:	08 95       	ret

00001ce0 <timer2Stop>:

void timer2Stop(void)
{
    1ce0:	df 93       	push	r29
    1ce2:	cf 93       	push	r28
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    1ce8:	a5 e4       	ldi	r26, 0x45	; 69
    1cea:	b0 e0       	ldi	r27, 0x00	; 0
    1cec:	e5 e4       	ldi	r30, 0x45	; 69
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	80 81       	ld	r24, Z
    1cf2:	88 7f       	andi	r24, 0xF8	; 248
    1cf4:	8c 93       	st	X, r24
}
    1cf6:	cf 91       	pop	r28
    1cf8:	df 91       	pop	r29
    1cfa:	08 95       	ret

00001cfc <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    1cfc:	cf 92       	push	r12
    1cfe:	ef 92       	push	r14
    1d00:	0f 93       	push	r16
    1d02:	df 93       	push	r29
    1d04:	cf 93       	push	r28
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <timer2DelayMs+0xc>
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <timer2DelayMs+0xe>
    1d0a:	0f 92       	push	r0
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	9d 83       	std	Y+5, r25	; 0x05
    1d12:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1d14:	1b 82       	std	Y+3, r1	; 0x03
    1d16:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1d18:	8a ef       	ldi	r24, 0xFA	; 250
    1d1a:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    1d1c:	80 e0       	ldi	r24, 0x00	; 0
    1d1e:	60 e0       	ldi	r22, 0x00	; 0
    1d20:	44 e0       	ldi	r20, 0x04	; 4
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	00 e0       	ldi	r16, 0x00	; 0
    1d26:	ee 24       	eor	r14, r14
    1d28:	cc 24       	eor	r12, r12
    1d2a:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <timer2Init>
	timer2Start();
    1d2e:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d32:	1b 82       	std	Y+3, r1	; 0x03
    1d34:	1a 82       	std	Y+2, r1	; 0x02
    1d36:	0e c0       	rjmp	.+28     	; 0x1d54 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    1d38:	e4 e4       	ldi	r30, 0x44	; 68
    1d3a:	f0 e0       	ldi	r31, 0x00	; 0
    1d3c:	90 81       	ld	r25, Z
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	98 17       	cp	r25, r24
    1d42:	d0 f3       	brcs	.-12     	; 0x1d38 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    1d44:	e4 e4       	ldi	r30, 0x44	; 68
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d4e:	01 96       	adiw	r24, 0x01	; 1
    1d50:	9b 83       	std	Y+3, r25	; 0x03
    1d52:	8a 83       	std	Y+2, r24	; 0x02
    1d54:	2a 81       	ldd	r18, Y+2	; 0x02
    1d56:	3b 81       	ldd	r19, Y+3	; 0x03
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	28 17       	cp	r18, r24
    1d5e:	39 07       	cpc	r19, r25
    1d60:	58 f3       	brcs	.-42     	; 0x1d38 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    1d62:	0f 90       	pop	r0
    1d64:	0f 90       	pop	r0
    1d66:	0f 90       	pop	r0
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	cf 91       	pop	r28
    1d6e:	df 91       	pop	r29
    1d70:	0f 91       	pop	r16
    1d72:	ef 90       	pop	r14
    1d74:	cf 90       	pop	r12
    1d76:	08 95       	ret

00001d78 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    1d78:	cf 92       	push	r12
    1d7a:	ef 92       	push	r14
    1d7c:	0f 93       	push	r16
    1d7e:	df 93       	push	r29
    1d80:	cf 93       	push	r28
    1d82:	cd b7       	in	r28, 0x3d	; 61
    1d84:	de b7       	in	r29, 0x3e	; 62
    1d86:	29 97       	sbiw	r28, 0x09	; 9
    1d88:	0f b6       	in	r0, 0x3f	; 63
    1d8a:	f8 94       	cli
    1d8c:	de bf       	out	0x3e, r29	; 62
    1d8e:	0f be       	out	0x3f, r0	; 63
    1d90:	cd bf       	out	0x3d, r28	; 61
    1d92:	6e 83       	std	Y+6, r22	; 0x06
    1d94:	7f 83       	std	Y+7, r23	; 0x07
    1d96:	88 87       	std	Y+8, r24	; 0x08
    1d98:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    1d9a:	1a 82       	std	Y+2, r1	; 0x02
    1d9c:	1b 82       	std	Y+3, r1	; 0x03
    1d9e:	1c 82       	std	Y+4, r1	; 0x04
    1da0:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    1da2:	80 e1       	ldi	r24, 0x10	; 16
    1da4:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    1da6:	88 e0       	ldi	r24, 0x08	; 8
    1da8:	60 e0       	ldi	r22, 0x00	; 0
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	09 81       	ldd	r16, Y+1	; 0x01
    1db0:	ee 24       	eor	r14, r14
    1db2:	cc 24       	eor	r12, r12
    1db4:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <timer2Init>
	timer2Start();
    1db8:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1dbc:	1a 82       	std	Y+2, r1	; 0x02
    1dbe:	1b 82       	std	Y+3, r1	; 0x03
    1dc0:	1c 82       	std	Y+4, r1	; 0x04
    1dc2:	1d 82       	std	Y+5, r1	; 0x05
    1dc4:	1a c0       	rjmp	.+52     	; 0x1dfa <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    1dc6:	e8 e5       	ldi	r30, 0x58	; 88
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	88 23       	and	r24, r24
    1dce:	dc f7       	brge	.-10     	; 0x1dc6 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    1dd0:	a8 e5       	ldi	r26, 0x58	; 88
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	e8 e5       	ldi	r30, 0x58	; 88
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 68       	ori	r24, 0x80	; 128
    1ddc:	8c 93       	st	X, r24
		TCNT2 = 0;
    1dde:	e4 e4       	ldi	r30, 0x44	; 68
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	ac 81       	ldd	r26, Y+4	; 0x04
    1dea:	bd 81       	ldd	r27, Y+5	; 0x05
    1dec:	01 96       	adiw	r24, 0x01	; 1
    1dee:	a1 1d       	adc	r26, r1
    1df0:	b1 1d       	adc	r27, r1
    1df2:	8a 83       	std	Y+2, r24	; 0x02
    1df4:	9b 83       	std	Y+3, r25	; 0x03
    1df6:	ac 83       	std	Y+4, r26	; 0x04
    1df8:	bd 83       	std	Y+5, r27	; 0x05
    1dfa:	2a 81       	ldd	r18, Y+2	; 0x02
    1dfc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dfe:	4c 81       	ldd	r20, Y+4	; 0x04
    1e00:	5d 81       	ldd	r21, Y+5	; 0x05
    1e02:	8e 81       	ldd	r24, Y+6	; 0x06
    1e04:	9f 81       	ldd	r25, Y+7	; 0x07
    1e06:	a8 85       	ldd	r26, Y+8	; 0x08
    1e08:	b9 85       	ldd	r27, Y+9	; 0x09
    1e0a:	28 17       	cp	r18, r24
    1e0c:	39 07       	cpc	r19, r25
    1e0e:	4a 07       	cpc	r20, r26
    1e10:	5b 07       	cpc	r21, r27
    1e12:	c8 f2       	brcs	.-78     	; 0x1dc6 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    1e14:	29 96       	adiw	r28, 0x09	; 9
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	f8 94       	cli
    1e1a:	de bf       	out	0x3e, r29	; 62
    1e1c:	0f be       	out	0x3f, r0	; 63
    1e1e:	cd bf       	out	0x3d, r28	; 61
    1e20:	cf 91       	pop	r28
    1e22:	df 91       	pop	r29
    1e24:	0f 91       	pop	r16
    1e26:	ef 90       	pop	r14
    1e28:	cf 90       	pop	r12
    1e2a:	08 95       	ret

00001e2c <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1e2c:	cf 92       	push	r12
    1e2e:	ef 92       	push	r14
    1e30:	0f 93       	push	r16
    1e32:	df 93       	push	r29
    1e34:	cf 93       	push	r28
    1e36:	00 d0       	rcall	.+0      	; 0x1e38 <timer2SwPWM+0xc>
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <timer2SwPWM+0xe>
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	8b 83       	std	Y+3, r24	; 0x03
    1e40:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    1e42:	78 94       	sei

	if(u8_frequency <= 80)
    1e44:	8c 81       	ldd	r24, Y+4	; 0x04
    1e46:	81 35       	cpi	r24, 0x51	; 81
    1e48:	e8 f4       	brcc	.+58     	; 0x1e84 <timer2SwPWM+0x58>
	{
		u8_prescaler = T0_PRESCALER_64;
    1e4a:	83 e0       	ldi	r24, 0x03	; 3
    1e4c:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e50:	88 2f       	mov	r24, r24
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	a0 e0       	ldi	r26, 0x00	; 0
    1e56:	b0 e0       	ldi	r27, 0x00	; 0
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	39 e1       	ldi	r19, 0x19	; 25
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
    1e5e:	50 e0       	ldi	r21, 0x00	; 0
    1e60:	bc 01       	movw	r22, r24
    1e62:	cd 01       	movw	r24, r26
    1e64:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    1e68:	9b 01       	movw	r18, r22
    1e6a:	ac 01       	movw	r20, r24
    1e6c:	80 e0       	ldi	r24, 0x00	; 0
    1e6e:	94 e2       	ldi	r25, 0x24	; 36
    1e70:	a4 ef       	ldi	r26, 0xF4	; 244
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	bc 01       	movw	r22, r24
    1e76:	cd 01       	movw	r24, r26
    1e78:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    1e7c:	da 01       	movw	r26, r20
    1e7e:	c9 01       	movw	r24, r18
    1e80:	8a 83       	std	Y+2, r24	; 0x02
    1e82:	1c c0       	rjmp	.+56     	; 0x1ebc <timer2SwPWM+0x90>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    1e84:	82 e0       	ldi	r24, 0x02	; 2
    1e86:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	88 2f       	mov	r24, r24
    1e8c:	90 e0       	ldi	r25, 0x00	; 0
    1e8e:	a0 e0       	ldi	r26, 0x00	; 0
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	20 e2       	ldi	r18, 0x20	; 32
    1e94:	33 e0       	ldi	r19, 0x03	; 3
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	50 e0       	ldi	r21, 0x00	; 0
    1e9a:	bc 01       	movw	r22, r24
    1e9c:	cd 01       	movw	r24, r26
    1e9e:	0e 94 76 0f 	call	0x1eec	; 0x1eec <__mulsi3>
    1ea2:	9b 01       	movw	r18, r22
    1ea4:	ac 01       	movw	r20, r24
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	94 e2       	ldi	r25, 0x24	; 36
    1eaa:	a4 ef       	ldi	r26, 0xF4	; 244
    1eac:	b0 e0       	ldi	r27, 0x00	; 0
    1eae:	bc 01       	movw	r22, r24
    1eb0:	cd 01       	movw	r24, r26
    1eb2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <__udivmodsi4>
    1eb6:	da 01       	movw	r26, r20
    1eb8:	c9 01       	movw	r24, r18
    1eba:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, u8_prescaler, 0, u8_outputCompare, 0, T2_INTERRUPT_CMP);
    1ebc:	88 e0       	ldi	r24, 0x08	; 8
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	49 81       	ldd	r20, Y+1	; 0x01
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	0a 81       	ldd	r16, Y+2	; 0x02
    1ec6:	ee 24       	eor	r14, r14
    1ec8:	0f 2e       	mov	r0, r31
    1eca:	f0 e8       	ldi	r31, 0x80	; 128
    1ecc:	cf 2e       	mov	r12, r31
    1ece:	f0 2d       	mov	r31, r0
    1ed0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <timer2Init>
	timer2Start();
    1ed4:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <timer2Start>
}
    1ed8:	0f 90       	pop	r0
    1eda:	0f 90       	pop	r0
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	0f 91       	pop	r16
    1ee6:	ef 90       	pop	r14
    1ee8:	cf 90       	pop	r12
    1eea:	08 95       	ret

00001eec <__mulsi3>:
    1eec:	62 9f       	mul	r22, r18
    1eee:	d0 01       	movw	r26, r0
    1ef0:	73 9f       	mul	r23, r19
    1ef2:	f0 01       	movw	r30, r0
    1ef4:	82 9f       	mul	r24, r18
    1ef6:	e0 0d       	add	r30, r0
    1ef8:	f1 1d       	adc	r31, r1
    1efa:	64 9f       	mul	r22, r20
    1efc:	e0 0d       	add	r30, r0
    1efe:	f1 1d       	adc	r31, r1
    1f00:	92 9f       	mul	r25, r18
    1f02:	f0 0d       	add	r31, r0
    1f04:	83 9f       	mul	r24, r19
    1f06:	f0 0d       	add	r31, r0
    1f08:	74 9f       	mul	r23, r20
    1f0a:	f0 0d       	add	r31, r0
    1f0c:	65 9f       	mul	r22, r21
    1f0e:	f0 0d       	add	r31, r0
    1f10:	99 27       	eor	r25, r25
    1f12:	72 9f       	mul	r23, r18
    1f14:	b0 0d       	add	r27, r0
    1f16:	e1 1d       	adc	r30, r1
    1f18:	f9 1f       	adc	r31, r25
    1f1a:	63 9f       	mul	r22, r19
    1f1c:	b0 0d       	add	r27, r0
    1f1e:	e1 1d       	adc	r30, r1
    1f20:	f9 1f       	adc	r31, r25
    1f22:	bd 01       	movw	r22, r26
    1f24:	cf 01       	movw	r24, r30
    1f26:	11 24       	eor	r1, r1
    1f28:	08 95       	ret

00001f2a <__udivmodqi4>:
    1f2a:	99 1b       	sub	r25, r25
    1f2c:	79 e0       	ldi	r23, 0x09	; 9
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <__udivmodqi4_ep>

00001f30 <__udivmodqi4_loop>:
    1f30:	99 1f       	adc	r25, r25
    1f32:	96 17       	cp	r25, r22
    1f34:	08 f0       	brcs	.+2      	; 0x1f38 <__udivmodqi4_ep>
    1f36:	96 1b       	sub	r25, r22

00001f38 <__udivmodqi4_ep>:
    1f38:	88 1f       	adc	r24, r24
    1f3a:	7a 95       	dec	r23
    1f3c:	c9 f7       	brne	.-14     	; 0x1f30 <__udivmodqi4_loop>
    1f3e:	80 95       	com	r24
    1f40:	08 95       	ret

00001f42 <__udivmodhi4>:
    1f42:	aa 1b       	sub	r26, r26
    1f44:	bb 1b       	sub	r27, r27
    1f46:	51 e1       	ldi	r21, 0x11	; 17
    1f48:	07 c0       	rjmp	.+14     	; 0x1f58 <__udivmodhi4_ep>

00001f4a <__udivmodhi4_loop>:
    1f4a:	aa 1f       	adc	r26, r26
    1f4c:	bb 1f       	adc	r27, r27
    1f4e:	a6 17       	cp	r26, r22
    1f50:	b7 07       	cpc	r27, r23
    1f52:	10 f0       	brcs	.+4      	; 0x1f58 <__udivmodhi4_ep>
    1f54:	a6 1b       	sub	r26, r22
    1f56:	b7 0b       	sbc	r27, r23

00001f58 <__udivmodhi4_ep>:
    1f58:	88 1f       	adc	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	5a 95       	dec	r21
    1f5e:	a9 f7       	brne	.-22     	; 0x1f4a <__udivmodhi4_loop>
    1f60:	80 95       	com	r24
    1f62:	90 95       	com	r25
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	08 95       	ret

00001f6a <__udivmodsi4>:
    1f6a:	a1 e2       	ldi	r26, 0x21	; 33
    1f6c:	1a 2e       	mov	r1, r26
    1f6e:	aa 1b       	sub	r26, r26
    1f70:	bb 1b       	sub	r27, r27
    1f72:	fd 01       	movw	r30, r26
    1f74:	0d c0       	rjmp	.+26     	; 0x1f90 <__udivmodsi4_ep>

00001f76 <__udivmodsi4_loop>:
    1f76:	aa 1f       	adc	r26, r26
    1f78:	bb 1f       	adc	r27, r27
    1f7a:	ee 1f       	adc	r30, r30
    1f7c:	ff 1f       	adc	r31, r31
    1f7e:	a2 17       	cp	r26, r18
    1f80:	b3 07       	cpc	r27, r19
    1f82:	e4 07       	cpc	r30, r20
    1f84:	f5 07       	cpc	r31, r21
    1f86:	20 f0       	brcs	.+8      	; 0x1f90 <__udivmodsi4_ep>
    1f88:	a2 1b       	sub	r26, r18
    1f8a:	b3 0b       	sbc	r27, r19
    1f8c:	e4 0b       	sbc	r30, r20
    1f8e:	f5 0b       	sbc	r31, r21

00001f90 <__udivmodsi4_ep>:
    1f90:	66 1f       	adc	r22, r22
    1f92:	77 1f       	adc	r23, r23
    1f94:	88 1f       	adc	r24, r24
    1f96:	99 1f       	adc	r25, r25
    1f98:	1a 94       	dec	r1
    1f9a:	69 f7       	brne	.-38     	; 0x1f76 <__udivmodsi4_loop>
    1f9c:	60 95       	com	r22
    1f9e:	70 95       	com	r23
    1fa0:	80 95       	com	r24
    1fa2:	90 95       	com	r25
    1fa4:	9b 01       	movw	r18, r22
    1fa6:	ac 01       	movw	r20, r24
    1fa8:	bd 01       	movw	r22, r26
    1faa:	cf 01       	movw	r24, r30
    1fac:	08 95       	ret

00001fae <_exit>:
    1fae:	f8 94       	cli

00001fb0 <__stop_program>:
    1fb0:	ff cf       	rjmp	.-2      	; 0x1fb0 <__stop_program>
