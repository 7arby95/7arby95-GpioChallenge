
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001834  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001834  000018c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800062  00800062  000018ca  2**0
                  ALLOC
  3 .stab         000025d4  00000000  00000000  000018cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000169c  00000000  00000000  00003ea0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 f7 03 	jmp	0x7ee	; 0x7ee <__vector_1>
       8:	0c 94 08 04 	jmp	0x810	; 0x810 <__vector_2>
       c:	0c 94 19 04 	jmp	0x832	; 0x832 <__vector_3>
      10:	0c 94 90 04 	jmp	0x920	; 0x920 <__vector_4>
      14:	0c 94 a1 04 	jmp	0x942	; 0x942 <__vector_5>
      18:	0c 94 4c 04 	jmp	0x898	; 0x898 <__vector_6>
      1c:	0c 94 5d 04 	jmp	0x8ba	; 0x8ba <__vector_7>
      20:	0c 94 6e 04 	jmp	0x8dc	; 0x8dc <__vector_8>
      24:	0c 94 7f 04 	jmp	0x8fe	; 0x8fe <__vector_9>
      28:	0c 94 2a 04 	jmp	0x854	; 0x854 <__vector_10>
      2c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_11>
      30:	0c 94 b2 04 	jmp	0x964	; 0x964 <__vector_12>
      34:	0c 94 c3 04 	jmp	0x986	; 0x986 <__vector_13>
      38:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__vector_14>
      3c:	0c 94 e5 04 	jmp	0x9ca	; 0x9ca <__vector_15>
      40:	0c 94 f6 04 	jmp	0x9ec	; 0x9ec <__vector_16>
      44:	0c 94 07 05 	jmp	0xa0e	; 0xa0e <__vector_17>
      48:	0c 94 18 05 	jmp	0xa30	; 0xa30 <__vector_18>
      4c:	0c 94 29 05 	jmp	0xa52	; 0xa52 <__vector_19>
      50:	0c 94 3a 05 	jmp	0xa74	; 0xa74 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e3       	ldi	r30, 0x34	; 52
      68:	f8 e1       	ldi	r31, 0x18	; 24
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 36       	cpi	r26, 0x67	; 103
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 01 	call	0x292	; 0x292 <main>
      8a:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_REQ7>:
}En_GpioReq9State_t;

/*- APIs IMPLEMENTATION ------------------------------------*/

void GPIO_REQ7(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_REQ7+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <GPIO_REQ7+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_countUpCounter = 0;
      a0:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_delayCounter = 0;
      a2:	19 82       	std	Y+1, r1	; 0x01
      a4:	1a 82       	std	Y+2, r1	; 0x02
      a6:	1b 82       	std	Y+3, r1	; 0x03
      a8:	1c 82       	std	Y+4, r1	; 0x04

	sevenSegInit(SEG_0);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <sevenSegInit>
	sevenSegInit(SEG_1);
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <sevenSegInit>
      b6:	52 c0       	rjmp	.+164    	; 0x15c <GPIO_REQ7+0xca>

	while(1)
	{
		while(u8_countUpCounter <= 99)
		{
			sevenSegEnable(SEG_0);
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	0e 94 34 07 	call	0xe68	; 0xe68 <sevenSegEnable>
			sevenSegWrite(SEG_0, ((u8_countUpCounter / 10) % 10));
      be:	8d 81       	ldd	r24, Y+5	; 0x05
      c0:	9a e0       	ldi	r25, 0x0A	; 10
      c2:	69 2f       	mov	r22, r25
      c4:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__udivmodqi4>
      c8:	9a e0       	ldi	r25, 0x0A	; 10
      ca:	69 2f       	mov	r22, r25
      cc:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__udivmodqi4>
      d0:	89 2f       	mov	r24, r25
      d2:	98 2f       	mov	r25, r24
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	69 2f       	mov	r22, r25
      d8:	0e 94 8c 07 	call	0xf18	; 0xf18 <sevenSegWrite>
			softwareDelayMs(1);
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
			sevenSegDisable(SEG_0);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 61 07 	call	0xec2	; 0xec2 <sevenSegDisable>

			sevenSegEnable(SEG_1);
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	0e 94 34 07 	call	0xe68	; 0xe68 <sevenSegEnable>
			sevenSegWrite(SEG_1, (u8_countUpCounter % 10));
      f4:	8d 81       	ldd	r24, Y+5	; 0x05
      f6:	9a e0       	ldi	r25, 0x0A	; 10
      f8:	69 2f       	mov	r22, r25
      fa:	0e 94 ea 0b 	call	0x17d4	; 0x17d4 <__udivmodqi4>
      fe:	89 2f       	mov	r24, r25
     100:	98 2f       	mov	r25, r24
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	69 2f       	mov	r22, r25
     106:	0e 94 8c 07 	call	0xf18	; 0xf18 <sevenSegWrite>
			softwareDelayMs(1);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
			sevenSegDisable(SEG_1);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 61 07 	call	0xec2	; 0xec2 <sevenSegDisable>

			u32_delayCounter++;
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	9a 81       	ldd	r25, Y+2	; 0x02
     120:	ab 81       	ldd	r26, Y+3	; 0x03
     122:	bc 81       	ldd	r27, Y+4	; 0x04
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	ab 83       	std	Y+3, r26	; 0x03
     130:	bc 83       	std	Y+4, r27	; 0x04

			if(u32_delayCounter % 469 == 0)
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	ab 81       	ldd	r26, Y+3	; 0x03
     138:	bc 81       	ldd	r27, Y+4	; 0x04
     13a:	25 ed       	ldi	r18, 0xD5	; 213
     13c:	31 e0       	ldi	r19, 0x01	; 1
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	0e 94 f6 0b 	call	0x17ec	; 0x17ec <__udivmodsi4>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	a1 05       	cpc	r26, r1
     152:	b1 05       	cpc	r27, r1
     154:	19 f4       	brne	.+6      	; 0x15c <GPIO_REQ7+0xca>
				u8_countUpCounter++;
     156:	8d 81       	ldd	r24, Y+5	; 0x05
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	8d 83       	std	Y+5, r24	; 0x05
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);

	while(1)
	{
		while(u8_countUpCounter <= 99)
     15c:	8d 81       	ldd	r24, Y+5	; 0x05
     15e:	84 36       	cpi	r24, 0x64	; 100
     160:	08 f4       	brcc	.+2      	; 0x164 <GPIO_REQ7+0xd2>
     162:	aa cf       	rjmp	.-172    	; 0xb8 <GPIO_REQ7+0x26>
     164:	fb cf       	rjmp	.-10     	; 0x15c <GPIO_REQ7+0xca>

00000166 <GPIO_REQ8>:
		}
	}
}

void GPIO_REQ8(void)
{
     166:	df 93       	push	r29
     168:	cf 93       	push	r28
     16a:	00 d0       	rcall	.+0      	; 0x16c <GPIO_REQ8+0x6>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_appCounter = 0, u8_delayDivider = 20;
     170:	1a 82       	std	Y+2, r1	; 0x02
     172:	84 e1       	ldi	r24, 0x14	; 20
     174:	89 83       	std	Y+1, r24	; 0x01

	Led_Init(LED_1);
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 4b 05 	call	0xa96	; 0xa96 <Led_Init>
	pushButtonInit(BTN_1);
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 53 06 	call	0xca6	; 0xca6 <pushButtonInit>

	while(1)
	{
		u8_delayDivider = 20;
     182:	84 e1       	ldi	r24, 0x14	; 20
     184:	89 83       	std	Y+1, r24	; 0x01
		if(pushButtonGetStatus(BTN_1) == Pressed)
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 81 06 	call	0xd02	; 0xd02 <pushButtonGetStatus>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	c9 f7       	brne	.-14     	; 0x182 <GPIO_REQ8+0x1c>
		{
			while(pushButtonGetStatus(BTN_1) != Released);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 81 06 	call	0xd02	; 0xd02 <pushButtonGetStatus>
     196:	88 23       	and	r24, r24
     198:	d9 f7       	brne	.-10     	; 0x190 <GPIO_REQ8+0x2a>
			u8_appCounter++;
     19a:	8a 81       	ldd	r24, Y+2	; 0x02
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	8a 83       	std	Y+2, r24	; 0x02
     1a0:	24 c0       	rjmp	.+72     	; 0x1ea <GPIO_REQ8+0x84>
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Led_On>
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <GPIO_REQ8+0x72>
				while(u8_delayDivider > 0)
				{
					softwareDelayMs(49);
     1aa:	61 e3       	ldi	r22, 0x31	; 49
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
					if(pushButtonGetStatus(BTN_1) == Pressed)
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 81 06 	call	0xd02	; 0xd02 <pushButtonGetStatus>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	49 f4       	brne	.+18     	; 0x1d2 <GPIO_REQ8+0x6c>
					{
						softwareDelayMs(300);
     1c0:	6c e2       	ldi	r22, 0x2C	; 44
     1c2:	71 e0       	ldi	r23, 0x01	; 1
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
						u8_delayDivider += 14;
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	82 5f       	subi	r24, 0xF2	; 242
     1d0:	89 83       	std	Y+1, r24	; 0x01
					}
					u8_delayDivider--;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	89 83       	std	Y+1, r24	; 0x01
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
				while(u8_delayDivider > 0)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	88 23       	and	r24, r24
     1dc:	31 f7       	brne	.-52     	; 0x1aa <GPIO_REQ8+0x44>
						softwareDelayMs(300);
						u8_delayDivider += 14;
					}
					u8_delayDivider--;
				}
				Led_Off(LED_1);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
				u8_appCounter--;
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	8a 83       	std	Y+2, r24	; 0x02
		u8_delayDivider = 20;
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	88 23       	and	r24, r24
     1ee:	c9 f6       	brne	.-78     	; 0x1a2 <GPIO_REQ8+0x3c>
				Led_Off(LED_1);
				u8_appCounter--;
			}
			break;
		}
	}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	cf 91       	pop	r28
     1f6:	df 91       	pop	r29
     1f8:	08 95       	ret

000001fa <GPIO_REQ9>:
}

void GPIO_REQ9(void)
{
     1fa:	df 93       	push	r29
     1fc:	cf 93       	push	r28
     1fe:	00 d0       	rcall	.+0      	; 0x200 <GPIO_REQ9+0x6>
     200:	0f 92       	push	r0
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentState = GO;
     206:	19 82       	std	Y+1, r1	; 0x01

	Led_Init(LED_1);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 4b 05 	call	0xa96	; 0xa96 <Led_Init>
	Led_Init(LED_2);
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	0e 94 4b 05 	call	0xa96	; 0xa96 <Led_Init>
	Led_Init(LED_3);
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 4b 05 	call	0xa96	; 0xa96 <Led_Init>

	while(1)
	{
		switch(u8_currentState)
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	3b 83       	std	Y+3, r19	; 0x03
     222:	2a 83       	std	Y+2, r18	; 0x02
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	9b 81       	ldd	r25, Y+3	; 0x03
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	91 05       	cpc	r25, r1
     22c:	a9 f0       	breq	.+42     	; 0x258 <GPIO_REQ9+0x5e>
     22e:	2a 81       	ldd	r18, Y+2	; 0x02
     230:	3b 81       	ldd	r19, Y+3	; 0x03
     232:	22 30       	cpi	r18, 0x02	; 2
     234:	31 05       	cpc	r19, r1
     236:	e1 f0       	breq	.+56     	; 0x270 <GPIO_REQ9+0x76>
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	9b 81       	ldd	r25, Y+3	; 0x03
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	11 f5       	brne	.+68     	; 0x284 <GPIO_REQ9+0x8a>
		{
		case GO:
			Led_On(LED_1);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Led_On>
			Led_Off(LED_2);
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			Led_Off(LED_3);
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			u8_currentState = STOP;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	16 c0       	rjmp	.+44     	; 0x284 <GPIO_REQ9+0x8a>
			break;
		case STOP:
			Led_Off(LED_1);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			Led_On(LED_2);
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Led_On>
			Led_Off(LED_3);
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			u8_currentState = GET_READY;
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	0a c0       	rjmp	.+20     	; 0x284 <GPIO_REQ9+0x8a>
			break;
		case GET_READY:
			Led_Off(LED_1);
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			Led_Off(LED_2);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	0e 94 d1 05 	call	0xba2	; 0xba2 <Led_Off>
			Led_On(LED_3);
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	0e 94 8e 05 	call	0xb1c	; 0xb1c <Led_On>
			u8_currentState = GO;
     282:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		softwareDelayMs(1000);
     284:	68 ee       	ldi	r22, 0xE8	; 232
     286:	73 e0       	ldi	r23, 0x03	; 3
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
     290:	c4 cf       	rjmp	.-120    	; 0x21a <GPIO_REQ9+0x20>

00000292 <main>:
	}
}

int main(void)
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
     29a:	ff cf       	rjmp	.-2      	; 0x29a <main+0x8>

0000029c <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
     29c:	df 93       	push	r29
     29e:	cf 93       	push	r28
     2a0:	00 d0       	rcall	.+0      	; 0x2a2 <gpioPortDirection+0x6>
     2a2:	00 d0       	rcall	.+0      	; 0x2a4 <gpioPortDirection+0x8>
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	89 83       	std	Y+1, r24	; 0x01
     2aa:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
     2ac:	89 81       	ldd	r24, Y+1	; 0x01
     2ae:	28 2f       	mov	r18, r24
     2b0:	30 e0       	ldi	r19, 0x00	; 0
     2b2:	3c 83       	std	Y+4, r19	; 0x04
     2b4:	2b 83       	std	Y+3, r18	; 0x03
     2b6:	8b 81       	ldd	r24, Y+3	; 0x03
     2b8:	9c 81       	ldd	r25, Y+4	; 0x04
     2ba:	81 30       	cpi	r24, 0x01	; 1
     2bc:	91 05       	cpc	r25, r1
     2be:	d1 f0       	breq	.+52     	; 0x2f4 <gpioPortDirection+0x58>
     2c0:	2b 81       	ldd	r18, Y+3	; 0x03
     2c2:	3c 81       	ldd	r19, Y+4	; 0x04
     2c4:	22 30       	cpi	r18, 0x02	; 2
     2c6:	31 05       	cpc	r19, r1
     2c8:	2c f4       	brge	.+10     	; 0x2d4 <gpioPortDirection+0x38>
     2ca:	8b 81       	ldd	r24, Y+3	; 0x03
     2cc:	9c 81       	ldd	r25, Y+4	; 0x04
     2ce:	00 97       	sbiw	r24, 0x00	; 0
     2d0:	61 f0       	breq	.+24     	; 0x2ea <gpioPortDirection+0x4e>
     2d2:	1e c0       	rjmp	.+60     	; 0x310 <gpioPortDirection+0x74>
     2d4:	2b 81       	ldd	r18, Y+3	; 0x03
     2d6:	3c 81       	ldd	r19, Y+4	; 0x04
     2d8:	22 30       	cpi	r18, 0x02	; 2
     2da:	31 05       	cpc	r19, r1
     2dc:	81 f0       	breq	.+32     	; 0x2fe <gpioPortDirection+0x62>
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	9c 81       	ldd	r25, Y+4	; 0x04
     2e2:	83 30       	cpi	r24, 0x03	; 3
     2e4:	91 05       	cpc	r25, r1
     2e6:	81 f0       	breq	.+32     	; 0x308 <gpioPortDirection+0x6c>
     2e8:	13 c0       	rjmp	.+38     	; 0x310 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
     2ea:	ea e3       	ldi	r30, 0x3A	; 58
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	8a 81       	ldd	r24, Y+2	; 0x02
     2f0:	80 83       	st	Z, r24
     2f2:	0e c0       	rjmp	.+28     	; 0x310 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
     2f4:	e7 e3       	ldi	r30, 0x37	; 55
     2f6:	f0 e0       	ldi	r31, 0x00	; 0
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	80 83       	st	Z, r24
     2fc:	09 c0       	rjmp	.+18     	; 0x310 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
     2fe:	e4 e3       	ldi	r30, 0x34	; 52
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	8a 81       	ldd	r24, Y+2	; 0x02
     304:	80 83       	st	Z, r24
     306:	04 c0       	rjmp	.+8      	; 0x310 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
     308:	e1 e3       	ldi	r30, 0x31	; 49
     30a:	f0 e0       	ldi	r31, 0x00	; 0
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     310:	0f 90       	pop	r0
     312:	0f 90       	pop	r0
     314:	0f 90       	pop	r0
     316:	0f 90       	pop	r0
     318:	cf 91       	pop	r28
     31a:	df 91       	pop	r29
     31c:	08 95       	ret

0000031e <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     31e:	df 93       	push	r29
     320:	cf 93       	push	r28
     322:	00 d0       	rcall	.+0      	; 0x324 <gpioPortWrite+0x6>
     324:	00 d0       	rcall	.+0      	; 0x326 <gpioPortWrite+0x8>
     326:	cd b7       	in	r28, 0x3d	; 61
     328:	de b7       	in	r29, 0x3e	; 62
     32a:	89 83       	std	Y+1, r24	; 0x01
     32c:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	28 2f       	mov	r18, r24
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	3c 83       	std	Y+4, r19	; 0x04
     336:	2b 83       	std	Y+3, r18	; 0x03
     338:	8b 81       	ldd	r24, Y+3	; 0x03
     33a:	9c 81       	ldd	r25, Y+4	; 0x04
     33c:	81 30       	cpi	r24, 0x01	; 1
     33e:	91 05       	cpc	r25, r1
     340:	d1 f0       	breq	.+52     	; 0x376 <gpioPortWrite+0x58>
     342:	2b 81       	ldd	r18, Y+3	; 0x03
     344:	3c 81       	ldd	r19, Y+4	; 0x04
     346:	22 30       	cpi	r18, 0x02	; 2
     348:	31 05       	cpc	r19, r1
     34a:	2c f4       	brge	.+10     	; 0x356 <gpioPortWrite+0x38>
     34c:	8b 81       	ldd	r24, Y+3	; 0x03
     34e:	9c 81       	ldd	r25, Y+4	; 0x04
     350:	00 97       	sbiw	r24, 0x00	; 0
     352:	61 f0       	breq	.+24     	; 0x36c <gpioPortWrite+0x4e>
     354:	1e c0       	rjmp	.+60     	; 0x392 <gpioPortWrite+0x74>
     356:	2b 81       	ldd	r18, Y+3	; 0x03
     358:	3c 81       	ldd	r19, Y+4	; 0x04
     35a:	22 30       	cpi	r18, 0x02	; 2
     35c:	31 05       	cpc	r19, r1
     35e:	81 f0       	breq	.+32     	; 0x380 <gpioPortWrite+0x62>
     360:	8b 81       	ldd	r24, Y+3	; 0x03
     362:	9c 81       	ldd	r25, Y+4	; 0x04
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	91 05       	cpc	r25, r1
     368:	81 f0       	breq	.+32     	; 0x38a <gpioPortWrite+0x6c>
     36a:	13 c0       	rjmp	.+38     	; 0x392 <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
     36c:	eb e3       	ldi	r30, 0x3B	; 59
     36e:	f0 e0       	ldi	r31, 0x00	; 0
     370:	8a 81       	ldd	r24, Y+2	; 0x02
     372:	80 83       	st	Z, r24
     374:	0e c0       	rjmp	.+28     	; 0x392 <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
     376:	e8 e3       	ldi	r30, 0x38	; 56
     378:	f0 e0       	ldi	r31, 0x00	; 0
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	80 83       	st	Z, r24
     37e:	09 c0       	rjmp	.+18     	; 0x392 <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
     380:	e5 e3       	ldi	r30, 0x35	; 53
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	8a 81       	ldd	r24, Y+2	; 0x02
     386:	80 83       	st	Z, r24
     388:	04 c0       	rjmp	.+8      	; 0x392 <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
     38a:	e2 e3       	ldi	r30, 0x32	; 50
     38c:	f0 e0       	ldi	r31, 0x00	; 0
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     392:	0f 90       	pop	r0
     394:	0f 90       	pop	r0
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	cf 91       	pop	r28
     39c:	df 91       	pop	r29
     39e:	08 95       	ret

000003a0 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
     3a0:	df 93       	push	r29
     3a2:	cf 93       	push	r28
     3a4:	00 d0       	rcall	.+0      	; 0x3a6 <gpioPortToggle+0x6>
     3a6:	0f 92       	push	r0
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
     3ae:	89 81       	ldd	r24, Y+1	; 0x01
     3b0:	28 2f       	mov	r18, r24
     3b2:	30 e0       	ldi	r19, 0x00	; 0
     3b4:	3b 83       	std	Y+3, r19	; 0x03
     3b6:	2a 83       	std	Y+2, r18	; 0x02
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	81 30       	cpi	r24, 0x01	; 1
     3be:	91 05       	cpc	r25, r1
     3c0:	e9 f0       	breq	.+58     	; 0x3fc <gpioPortToggle+0x5c>
     3c2:	2a 81       	ldd	r18, Y+2	; 0x02
     3c4:	3b 81       	ldd	r19, Y+3	; 0x03
     3c6:	22 30       	cpi	r18, 0x02	; 2
     3c8:	31 05       	cpc	r19, r1
     3ca:	2c f4       	brge	.+10     	; 0x3d6 <gpioPortToggle+0x36>
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	9b 81       	ldd	r25, Y+3	; 0x03
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	61 f0       	breq	.+24     	; 0x3ec <gpioPortToggle+0x4c>
     3d4:	2a c0       	rjmp	.+84     	; 0x42a <gpioPortToggle+0x8a>
     3d6:	2a 81       	ldd	r18, Y+2	; 0x02
     3d8:	3b 81       	ldd	r19, Y+3	; 0x03
     3da:	22 30       	cpi	r18, 0x02	; 2
     3dc:	31 05       	cpc	r19, r1
     3de:	b1 f0       	breq	.+44     	; 0x40c <gpioPortToggle+0x6c>
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	9b 81       	ldd	r25, Y+3	; 0x03
     3e4:	83 30       	cpi	r24, 0x03	; 3
     3e6:	91 05       	cpc	r25, r1
     3e8:	c9 f0       	breq	.+50     	; 0x41c <gpioPortToggle+0x7c>
     3ea:	1f c0       	rjmp	.+62     	; 0x42a <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
     3ec:	ab e3       	ldi	r26, 0x3B	; 59
     3ee:	b0 e0       	ldi	r27, 0x00	; 0
     3f0:	eb e3       	ldi	r30, 0x3B	; 59
     3f2:	f0 e0       	ldi	r31, 0x00	; 0
     3f4:	80 81       	ld	r24, Z
     3f6:	80 95       	com	r24
     3f8:	8c 93       	st	X, r24
     3fa:	17 c0       	rjmp	.+46     	; 0x42a <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
     3fc:	a8 e3       	ldi	r26, 0x38	; 56
     3fe:	b0 e0       	ldi	r27, 0x00	; 0
     400:	e8 e3       	ldi	r30, 0x38	; 56
     402:	f0 e0       	ldi	r31, 0x00	; 0
     404:	80 81       	ld	r24, Z
     406:	80 95       	com	r24
     408:	8c 93       	st	X, r24
     40a:	0f c0       	rjmp	.+30     	; 0x42a <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
     40c:	a5 e3       	ldi	r26, 0x35	; 53
     40e:	b0 e0       	ldi	r27, 0x00	; 0
     410:	e5 e3       	ldi	r30, 0x35	; 53
     412:	f0 e0       	ldi	r31, 0x00	; 0
     414:	80 81       	ld	r24, Z
     416:	80 95       	com	r24
     418:	8c 93       	st	X, r24
     41a:	07 c0       	rjmp	.+14     	; 0x42a <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
     41c:	a2 e3       	ldi	r26, 0x32	; 50
     41e:	b0 e0       	ldi	r27, 0x00	; 0
     420:	e2 e3       	ldi	r30, 0x32	; 50
     422:	f0 e0       	ldi	r31, 0x00	; 0
     424:	80 81       	ld	r24, Z
     426:	80 95       	com	r24
     428:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     42a:	0f 90       	pop	r0
     42c:	0f 90       	pop	r0
     42e:	0f 90       	pop	r0
     430:	cf 91       	pop	r28
     432:	df 91       	pop	r29
     434:	08 95       	ret

00000436 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
     436:	df 93       	push	r29
     438:	cf 93       	push	r28
     43a:	00 d0       	rcall	.+0      	; 0x43c <gpioPortRead+0x6>
     43c:	00 d0       	rcall	.+0      	; 0x43e <gpioPortRead+0x8>
     43e:	cd b7       	in	r28, 0x3d	; 61
     440:	de b7       	in	r29, 0x3e	; 62
     442:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	28 2f       	mov	r18, r24
     448:	30 e0       	ldi	r19, 0x00	; 0
     44a:	3c 83       	std	Y+4, r19	; 0x04
     44c:	2b 83       	std	Y+3, r18	; 0x03
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	9c 81       	ldd	r25, Y+4	; 0x04
     452:	81 30       	cpi	r24, 0x01	; 1
     454:	91 05       	cpc	r25, r1
     456:	d1 f0       	breq	.+52     	; 0x48c <gpioPortRead+0x56>
     458:	2b 81       	ldd	r18, Y+3	; 0x03
     45a:	3c 81       	ldd	r19, Y+4	; 0x04
     45c:	22 30       	cpi	r18, 0x02	; 2
     45e:	31 05       	cpc	r19, r1
     460:	2c f4       	brge	.+10     	; 0x46c <gpioPortRead+0x36>
     462:	8b 81       	ldd	r24, Y+3	; 0x03
     464:	9c 81       	ldd	r25, Y+4	; 0x04
     466:	00 97       	sbiw	r24, 0x00	; 0
     468:	61 f0       	breq	.+24     	; 0x482 <gpioPortRead+0x4c>
     46a:	1f c0       	rjmp	.+62     	; 0x4aa <gpioPortRead+0x74>
     46c:	2b 81       	ldd	r18, Y+3	; 0x03
     46e:	3c 81       	ldd	r19, Y+4	; 0x04
     470:	22 30       	cpi	r18, 0x02	; 2
     472:	31 05       	cpc	r19, r1
     474:	81 f0       	breq	.+32     	; 0x496 <gpioPortRead+0x60>
     476:	8b 81       	ldd	r24, Y+3	; 0x03
     478:	9c 81       	ldd	r25, Y+4	; 0x04
     47a:	83 30       	cpi	r24, 0x03	; 3
     47c:	91 05       	cpc	r25, r1
     47e:	81 f0       	breq	.+32     	; 0x4a0 <gpioPortRead+0x6a>
     480:	14 c0       	rjmp	.+40     	; 0x4aa <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
     482:	e9 e3       	ldi	r30, 0x39	; 57
     484:	f0 e0       	ldi	r31, 0x00	; 0
     486:	90 81       	ld	r25, Z
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	11 c0       	rjmp	.+34     	; 0x4ae <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
     48c:	e6 e3       	ldi	r30, 0x36	; 54
     48e:	f0 e0       	ldi	r31, 0x00	; 0
     490:	20 81       	ld	r18, Z
     492:	2a 83       	std	Y+2, r18	; 0x02
     494:	0c c0       	rjmp	.+24     	; 0x4ae <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
     496:	e3 e3       	ldi	r30, 0x33	; 51
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	30 81       	ld	r19, Z
     49c:	3a 83       	std	Y+2, r19	; 0x02
     49e:	07 c0       	rjmp	.+14     	; 0x4ae <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
     4a0:	e0 e3       	ldi	r30, 0x30	; 48
     4a2:	f0 e0       	ldi	r31, 0x00	; 0
     4a4:	80 81       	ld	r24, Z
     4a6:	8a 83       	std	Y+2, r24	; 0x02
     4a8:	02 c0       	rjmp	.+4      	; 0x4ae <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
     4aa:	9f ef       	ldi	r25, 0xFF	; 255
     4ac:	9a 83       	std	Y+2, r25	; 0x02
     4ae:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     4b0:	0f 90       	pop	r0
     4b2:	0f 90       	pop	r0
     4b4:	0f 90       	pop	r0
     4b6:	0f 90       	pop	r0
     4b8:	cf 91       	pop	r28
     4ba:	df 91       	pop	r29
     4bc:	08 95       	ret

000004be <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
     4be:	df 93       	push	r29
     4c0:	cf 93       	push	r28
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
     4c6:	29 97       	sbiw	r28, 0x09	; 9
     4c8:	0f b6       	in	r0, 0x3f	; 63
     4ca:	f8 94       	cli
     4cc:	de bf       	out	0x3e, r29	; 62
     4ce:	0f be       	out	0x3f, r0	; 63
     4d0:	cd bf       	out	0x3d, r28	; 61
     4d2:	8b 83       	std	Y+3, r24	; 0x03
     4d4:	6c 83       	std	Y+4, r22	; 0x04
     4d6:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
     4d8:	1a 82       	std	Y+2, r1	; 0x02
     4da:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	28 2f       	mov	r18, r24
     4e0:	30 e0       	ldi	r19, 0x00	; 0
     4e2:	39 87       	std	Y+9, r19	; 0x09
     4e4:	28 87       	std	Y+8, r18	; 0x08
     4e6:	88 85       	ldd	r24, Y+8	; 0x08
     4e8:	99 85       	ldd	r25, Y+9	; 0x09
     4ea:	81 30       	cpi	r24, 0x01	; 1
     4ec:	91 05       	cpc	r25, r1
     4ee:	d1 f0       	breq	.+52     	; 0x524 <gpioPinDirection+0x66>
     4f0:	28 85       	ldd	r18, Y+8	; 0x08
     4f2:	39 85       	ldd	r19, Y+9	; 0x09
     4f4:	22 30       	cpi	r18, 0x02	; 2
     4f6:	31 05       	cpc	r19, r1
     4f8:	2c f4       	brge	.+10     	; 0x504 <gpioPinDirection+0x46>
     4fa:	88 85       	ldd	r24, Y+8	; 0x08
     4fc:	99 85       	ldd	r25, Y+9	; 0x09
     4fe:	00 97       	sbiw	r24, 0x00	; 0
     500:	61 f0       	breq	.+24     	; 0x51a <gpioPinDirection+0x5c>
     502:	1e c0       	rjmp	.+60     	; 0x540 <gpioPinDirection+0x82>
     504:	28 85       	ldd	r18, Y+8	; 0x08
     506:	39 85       	ldd	r19, Y+9	; 0x09
     508:	22 30       	cpi	r18, 0x02	; 2
     50a:	31 05       	cpc	r19, r1
     50c:	81 f0       	breq	.+32     	; 0x52e <gpioPinDirection+0x70>
     50e:	88 85       	ldd	r24, Y+8	; 0x08
     510:	99 85       	ldd	r25, Y+9	; 0x09
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	91 05       	cpc	r25, r1
     516:	81 f0       	breq	.+32     	; 0x538 <gpioPinDirection+0x7a>
     518:	13 c0       	rjmp	.+38     	; 0x540 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
     51a:	8a e3       	ldi	r24, 0x3A	; 58
     51c:	90 e0       	ldi	r25, 0x00	; 0
     51e:	9a 83       	std	Y+2, r25	; 0x02
     520:	89 83       	std	Y+1, r24	; 0x01
     522:	0e c0       	rjmp	.+28     	; 0x540 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
     524:	87 e3       	ldi	r24, 0x37	; 55
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	9a 83       	std	Y+2, r25	; 0x02
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	09 c0       	rjmp	.+18     	; 0x540 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
     52e:	84 e3       	ldi	r24, 0x34	; 52
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	9a 83       	std	Y+2, r25	; 0x02
     534:	89 83       	std	Y+1, r24	; 0x01
     536:	04 c0       	rjmp	.+8      	; 0x540 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
     538:	81 e3       	ldi	r24, 0x31	; 49
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	9a 83       	std	Y+2, r25	; 0x02
     53e:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
     540:	8d 81       	ldd	r24, Y+5	; 0x05
     542:	28 2f       	mov	r18, r24
     544:	30 e0       	ldi	r19, 0x00	; 0
     546:	3f 83       	std	Y+7, r19	; 0x07
     548:	2e 83       	std	Y+6, r18	; 0x06
     54a:	8e 81       	ldd	r24, Y+6	; 0x06
     54c:	9f 81       	ldd	r25, Y+7	; 0x07
     54e:	00 97       	sbiw	r24, 0x00	; 0
     550:	31 f0       	breq	.+12     	; 0x55e <gpioPinDirection+0xa0>
     552:	2e 81       	ldd	r18, Y+6	; 0x06
     554:	3f 81       	ldd	r19, Y+7	; 0x07
     556:	2f 3f       	cpi	r18, 0xFF	; 255
     558:	31 05       	cpc	r19, r1
     55a:	61 f0       	breq	.+24     	; 0x574 <gpioPinDirection+0xb6>
     55c:	13 c0       	rjmp	.+38     	; 0x584 <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
     55e:	e9 81       	ldd	r30, Y+1	; 0x01
     560:	fa 81       	ldd	r31, Y+2	; 0x02
     562:	80 81       	ld	r24, Z
     564:	98 2f       	mov	r25, r24
     566:	8c 81       	ldd	r24, Y+4	; 0x04
     568:	80 95       	com	r24
     56a:	89 23       	and	r24, r25
     56c:	e9 81       	ldd	r30, Y+1	; 0x01
     56e:	fa 81       	ldd	r31, Y+2	; 0x02
     570:	80 83       	st	Z, r24
     572:	08 c0       	rjmp	.+16     	; 0x584 <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
     574:	e9 81       	ldd	r30, Y+1	; 0x01
     576:	fa 81       	ldd	r31, Y+2	; 0x02
     578:	90 81       	ld	r25, Z
     57a:	8c 81       	ldd	r24, Y+4	; 0x04
     57c:	89 2b       	or	r24, r25
     57e:	e9 81       	ldd	r30, Y+1	; 0x01
     580:	fa 81       	ldd	r31, Y+2	; 0x02
     582:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     584:	29 96       	adiw	r28, 0x09	; 9
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	cf 91       	pop	r28
     592:	df 91       	pop	r29
     594:	08 95       	ret

00000596 <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
     596:	df 93       	push	r29
     598:	cf 93       	push	r28
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	29 97       	sbiw	r28, 0x09	; 9
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	8b 83       	std	Y+3, r24	; 0x03
     5ac:	6c 83       	std	Y+4, r22	; 0x04
     5ae:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
     5b0:	1a 82       	std	Y+2, r1	; 0x02
     5b2:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     5b4:	8b 81       	ldd	r24, Y+3	; 0x03
     5b6:	28 2f       	mov	r18, r24
     5b8:	30 e0       	ldi	r19, 0x00	; 0
     5ba:	39 87       	std	Y+9, r19	; 0x09
     5bc:	28 87       	std	Y+8, r18	; 0x08
     5be:	88 85       	ldd	r24, Y+8	; 0x08
     5c0:	99 85       	ldd	r25, Y+9	; 0x09
     5c2:	81 30       	cpi	r24, 0x01	; 1
     5c4:	91 05       	cpc	r25, r1
     5c6:	d1 f0       	breq	.+52     	; 0x5fc <gpioPinWrite+0x66>
     5c8:	28 85       	ldd	r18, Y+8	; 0x08
     5ca:	39 85       	ldd	r19, Y+9	; 0x09
     5cc:	22 30       	cpi	r18, 0x02	; 2
     5ce:	31 05       	cpc	r19, r1
     5d0:	2c f4       	brge	.+10     	; 0x5dc <gpioPinWrite+0x46>
     5d2:	88 85       	ldd	r24, Y+8	; 0x08
     5d4:	99 85       	ldd	r25, Y+9	; 0x09
     5d6:	00 97       	sbiw	r24, 0x00	; 0
     5d8:	61 f0       	breq	.+24     	; 0x5f2 <gpioPinWrite+0x5c>
     5da:	1e c0       	rjmp	.+60     	; 0x618 <gpioPinWrite+0x82>
     5dc:	28 85       	ldd	r18, Y+8	; 0x08
     5de:	39 85       	ldd	r19, Y+9	; 0x09
     5e0:	22 30       	cpi	r18, 0x02	; 2
     5e2:	31 05       	cpc	r19, r1
     5e4:	81 f0       	breq	.+32     	; 0x606 <gpioPinWrite+0x70>
     5e6:	88 85       	ldd	r24, Y+8	; 0x08
     5e8:	99 85       	ldd	r25, Y+9	; 0x09
     5ea:	83 30       	cpi	r24, 0x03	; 3
     5ec:	91 05       	cpc	r25, r1
     5ee:	81 f0       	breq	.+32     	; 0x610 <gpioPinWrite+0x7a>
     5f0:	13 c0       	rjmp	.+38     	; 0x618 <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
     5f2:	8b e3       	ldi	r24, 0x3B	; 59
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	9a 83       	std	Y+2, r25	; 0x02
     5f8:	89 83       	std	Y+1, r24	; 0x01
     5fa:	0e c0       	rjmp	.+28     	; 0x618 <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
     5fc:	88 e3       	ldi	r24, 0x38	; 56
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	9a 83       	std	Y+2, r25	; 0x02
     602:	89 83       	std	Y+1, r24	; 0x01
     604:	09 c0       	rjmp	.+18     	; 0x618 <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
     606:	85 e3       	ldi	r24, 0x35	; 53
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	9a 83       	std	Y+2, r25	; 0x02
     60c:	89 83       	std	Y+1, r24	; 0x01
     60e:	04 c0       	rjmp	.+8      	; 0x618 <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
     610:	82 e3       	ldi	r24, 0x32	; 50
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	9a 83       	std	Y+2, r25	; 0x02
     616:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
     618:	8d 81       	ldd	r24, Y+5	; 0x05
     61a:	28 2f       	mov	r18, r24
     61c:	30 e0       	ldi	r19, 0x00	; 0
     61e:	3f 83       	std	Y+7, r19	; 0x07
     620:	2e 83       	std	Y+6, r18	; 0x06
     622:	8e 81       	ldd	r24, Y+6	; 0x06
     624:	9f 81       	ldd	r25, Y+7	; 0x07
     626:	00 97       	sbiw	r24, 0x00	; 0
     628:	31 f0       	breq	.+12     	; 0x636 <gpioPinWrite+0xa0>
     62a:	2e 81       	ldd	r18, Y+6	; 0x06
     62c:	3f 81       	ldd	r19, Y+7	; 0x07
     62e:	2f 3f       	cpi	r18, 0xFF	; 255
     630:	31 05       	cpc	r19, r1
     632:	61 f0       	breq	.+24     	; 0x64c <gpioPinWrite+0xb6>
     634:	13 c0       	rjmp	.+38     	; 0x65c <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
     636:	e9 81       	ldd	r30, Y+1	; 0x01
     638:	fa 81       	ldd	r31, Y+2	; 0x02
     63a:	80 81       	ld	r24, Z
     63c:	98 2f       	mov	r25, r24
     63e:	8c 81       	ldd	r24, Y+4	; 0x04
     640:	80 95       	com	r24
     642:	89 23       	and	r24, r25
     644:	e9 81       	ldd	r30, Y+1	; 0x01
     646:	fa 81       	ldd	r31, Y+2	; 0x02
     648:	80 83       	st	Z, r24
     64a:	08 c0       	rjmp	.+16     	; 0x65c <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
     64c:	e9 81       	ldd	r30, Y+1	; 0x01
     64e:	fa 81       	ldd	r31, Y+2	; 0x02
     650:	90 81       	ld	r25, Z
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	89 2b       	or	r24, r25
     656:	e9 81       	ldd	r30, Y+1	; 0x01
     658:	fa 81       	ldd	r31, Y+2	; 0x02
     65a:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     65c:	29 96       	adiw	r28, 0x09	; 9
     65e:	0f b6       	in	r0, 0x3f	; 63
     660:	f8 94       	cli
     662:	de bf       	out	0x3e, r29	; 62
     664:	0f be       	out	0x3f, r0	; 63
     666:	cd bf       	out	0x3d, r28	; 61
     668:	cf 91       	pop	r28
     66a:	df 91       	pop	r29
     66c:	08 95       	ret

0000066e <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
     66e:	df 93       	push	r29
     670:	cf 93       	push	r28
     672:	00 d0       	rcall	.+0      	; 0x674 <gpioPinToggle+0x6>
     674:	00 d0       	rcall	.+0      	; 0x676 <gpioPinToggle+0x8>
     676:	cd b7       	in	r28, 0x3d	; 61
     678:	de b7       	in	r29, 0x3e	; 62
     67a:	89 83       	std	Y+1, r24	; 0x01
     67c:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
     67e:	89 81       	ldd	r24, Y+1	; 0x01
     680:	28 2f       	mov	r18, r24
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	3c 83       	std	Y+4, r19	; 0x04
     686:	2b 83       	std	Y+3, r18	; 0x03
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	81 30       	cpi	r24, 0x01	; 1
     68e:	91 05       	cpc	r25, r1
     690:	f1 f0       	breq	.+60     	; 0x6ce <gpioPinToggle+0x60>
     692:	2b 81       	ldd	r18, Y+3	; 0x03
     694:	3c 81       	ldd	r19, Y+4	; 0x04
     696:	22 30       	cpi	r18, 0x02	; 2
     698:	31 05       	cpc	r19, r1
     69a:	2c f4       	brge	.+10     	; 0x6a6 <gpioPinToggle+0x38>
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	00 97       	sbiw	r24, 0x00	; 0
     6a2:	61 f0       	breq	.+24     	; 0x6bc <gpioPinToggle+0x4e>
     6a4:	2e c0       	rjmp	.+92     	; 0x702 <gpioPinToggle+0x94>
     6a6:	2b 81       	ldd	r18, Y+3	; 0x03
     6a8:	3c 81       	ldd	r19, Y+4	; 0x04
     6aa:	22 30       	cpi	r18, 0x02	; 2
     6ac:	31 05       	cpc	r19, r1
     6ae:	c1 f0       	breq	.+48     	; 0x6e0 <gpioPinToggle+0x72>
     6b0:	8b 81       	ldd	r24, Y+3	; 0x03
     6b2:	9c 81       	ldd	r25, Y+4	; 0x04
     6b4:	83 30       	cpi	r24, 0x03	; 3
     6b6:	91 05       	cpc	r25, r1
     6b8:	e1 f0       	breq	.+56     	; 0x6f2 <gpioPinToggle+0x84>
     6ba:	23 c0       	rjmp	.+70     	; 0x702 <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
     6bc:	ab e3       	ldi	r26, 0x3B	; 59
     6be:	b0 e0       	ldi	r27, 0x00	; 0
     6c0:	eb e3       	ldi	r30, 0x3B	; 59
     6c2:	f0 e0       	ldi	r31, 0x00	; 0
     6c4:	90 81       	ld	r25, Z
     6c6:	8a 81       	ldd	r24, Y+2	; 0x02
     6c8:	89 27       	eor	r24, r25
     6ca:	8c 93       	st	X, r24
     6cc:	1a c0       	rjmp	.+52     	; 0x702 <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
     6ce:	a8 e3       	ldi	r26, 0x38	; 56
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	e8 e3       	ldi	r30, 0x38	; 56
     6d4:	f0 e0       	ldi	r31, 0x00	; 0
     6d6:	90 81       	ld	r25, Z
     6d8:	8a 81       	ldd	r24, Y+2	; 0x02
     6da:	89 27       	eor	r24, r25
     6dc:	8c 93       	st	X, r24
     6de:	11 c0       	rjmp	.+34     	; 0x702 <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
     6e0:	a5 e3       	ldi	r26, 0x35	; 53
     6e2:	b0 e0       	ldi	r27, 0x00	; 0
     6e4:	e5 e3       	ldi	r30, 0x35	; 53
     6e6:	f0 e0       	ldi	r31, 0x00	; 0
     6e8:	90 81       	ld	r25, Z
     6ea:	8a 81       	ldd	r24, Y+2	; 0x02
     6ec:	89 27       	eor	r24, r25
     6ee:	8c 93       	st	X, r24
     6f0:	08 c0       	rjmp	.+16     	; 0x702 <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
     6f2:	a2 e3       	ldi	r26, 0x32	; 50
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	e2 e3       	ldi	r30, 0x32	; 50
     6f8:	f0 e0       	ldi	r31, 0x00	; 0
     6fa:	90 81       	ld	r25, Z
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	89 27       	eor	r24, r25
     700:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     702:	0f 90       	pop	r0
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	cf 91       	pop	r28
     70c:	df 91       	pop	r29
     70e:	08 95       	ret

00000710 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
     710:	df 93       	push	r29
     712:	cf 93       	push	r28
     714:	cd b7       	in	r28, 0x3d	; 61
     716:	de b7       	in	r29, 0x3e	; 62
     718:	29 97       	sbiw	r28, 0x09	; 9
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	28 2f       	mov	r18, r24
     72c:	30 e0       	ldi	r19, 0x00	; 0
     72e:	3d 83       	std	Y+5, r19	; 0x05
     730:	2c 83       	std	Y+4, r18	; 0x04
     732:	8c 81       	ldd	r24, Y+4	; 0x04
     734:	9d 81       	ldd	r25, Y+5	; 0x05
     736:	81 30       	cpi	r24, 0x01	; 1
     738:	91 05       	cpc	r25, r1
     73a:	19 f1       	breq	.+70     	; 0x782 <gpioPinRead+0x72>
     73c:	2c 81       	ldd	r18, Y+4	; 0x04
     73e:	3d 81       	ldd	r19, Y+5	; 0x05
     740:	22 30       	cpi	r18, 0x02	; 2
     742:	31 05       	cpc	r19, r1
     744:	2c f4       	brge	.+10     	; 0x750 <gpioPinRead+0x40>
     746:	8c 81       	ldd	r24, Y+4	; 0x04
     748:	9d 81       	ldd	r25, Y+5	; 0x05
     74a:	00 97       	sbiw	r24, 0x00	; 0
     74c:	61 f0       	breq	.+24     	; 0x766 <gpioPinRead+0x56>
     74e:	43 c0       	rjmp	.+134    	; 0x7d6 <gpioPinRead+0xc6>
     750:	2c 81       	ldd	r18, Y+4	; 0x04
     752:	3d 81       	ldd	r19, Y+5	; 0x05
     754:	22 30       	cpi	r18, 0x02	; 2
     756:	31 05       	cpc	r19, r1
     758:	11 f1       	breq	.+68     	; 0x79e <gpioPinRead+0x8e>
     75a:	8c 81       	ldd	r24, Y+4	; 0x04
     75c:	9d 81       	ldd	r25, Y+5	; 0x05
     75e:	83 30       	cpi	r24, 0x03	; 3
     760:	91 05       	cpc	r25, r1
     762:	59 f1       	breq	.+86     	; 0x7ba <gpioPinRead+0xaa>
     764:	38 c0       	rjmp	.+112    	; 0x7d6 <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
     766:	e9 e3       	ldi	r30, 0x39	; 57
     768:	f0 e0       	ldi	r31, 0x00	; 0
     76a:	90 81       	ld	r25, Z
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	89 23       	and	r24, r25
     770:	8e 83       	std	Y+6, r24	; 0x06
     772:	9e 81       	ldd	r25, Y+6	; 0x06
     774:	99 23       	and	r25, r25
     776:	11 f0       	breq	.+4      	; 0x77c <gpioPinRead+0x6c>
     778:	21 e0       	ldi	r18, 0x01	; 1
     77a:	2e 83       	std	Y+6, r18	; 0x06
     77c:	3e 81       	ldd	r19, Y+6	; 0x06
     77e:	3b 83       	std	Y+3, r19	; 0x03
     780:	2c c0       	rjmp	.+88     	; 0x7da <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
     782:	e6 e3       	ldi	r30, 0x36	; 54
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	90 81       	ld	r25, Z
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	89 23       	and	r24, r25
     78c:	8f 83       	std	Y+7, r24	; 0x07
     78e:	8f 81       	ldd	r24, Y+7	; 0x07
     790:	88 23       	and	r24, r24
     792:	11 f0       	breq	.+4      	; 0x798 <gpioPinRead+0x88>
     794:	91 e0       	ldi	r25, 0x01	; 1
     796:	9f 83       	std	Y+7, r25	; 0x07
     798:	2f 81       	ldd	r18, Y+7	; 0x07
     79a:	2b 83       	std	Y+3, r18	; 0x03
     79c:	1e c0       	rjmp	.+60     	; 0x7da <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
     79e:	e3 e3       	ldi	r30, 0x33	; 51
     7a0:	f0 e0       	ldi	r31, 0x00	; 0
     7a2:	90 81       	ld	r25, Z
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	89 23       	and	r24, r25
     7a8:	88 87       	std	Y+8, r24	; 0x08
     7aa:	38 85       	ldd	r19, Y+8	; 0x08
     7ac:	33 23       	and	r19, r19
     7ae:	11 f0       	breq	.+4      	; 0x7b4 <gpioPinRead+0xa4>
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	88 87       	std	Y+8, r24	; 0x08
     7b4:	98 85       	ldd	r25, Y+8	; 0x08
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	10 c0       	rjmp	.+32     	; 0x7da <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
     7ba:	e0 e3       	ldi	r30, 0x30	; 48
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	90 81       	ld	r25, Z
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	89 23       	and	r24, r25
     7c4:	89 87       	std	Y+9, r24	; 0x09
     7c6:	29 85       	ldd	r18, Y+9	; 0x09
     7c8:	22 23       	and	r18, r18
     7ca:	11 f0       	breq	.+4      	; 0x7d0 <gpioPinRead+0xc0>
     7cc:	31 e0       	ldi	r19, 0x01	; 1
     7ce:	39 87       	std	Y+9, r19	; 0x09
     7d0:	89 85       	ldd	r24, Y+9	; 0x09
     7d2:	8b 83       	std	Y+3, r24	; 0x03
     7d4:	02 c0       	rjmp	.+4      	; 0x7da <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
     7d6:	9f ef       	ldi	r25, 0xFF	; 255
     7d8:	9b 83       	std	Y+3, r25	; 0x03
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
     7dc:	29 96       	adiw	r28, 0x09	; 9
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	f8 94       	cli
     7e2:	de bf       	out	0x3e, r29	; 62
     7e4:	0f be       	out	0x3f, r0	; 63
     7e6:	cd bf       	out	0x3d, r28	; 61
     7e8:	cf 91       	pop	r28
     7ea:	df 91       	pop	r29
     7ec:	08 95       	ret

000007ee <__vector_1>:
volatile static uint16_t gu16_global_interrupt_variable = 0;

/*- INTERRUPT APIs IMPLEMENTATION --------------------------*/

void EXTERNAL_INTERRUPT0 (void)
{
     7ee:	78 94       	sei
     7f0:	1f 92       	push	r1
     7f2:	0f 92       	push	r0
     7f4:	0f b6       	in	r0, 0x3f	; 63
     7f6:	0f 92       	push	r0
     7f8:	11 24       	eor	r1, r1
     7fa:	df 93       	push	r29
     7fc:	cf 93       	push	r28
     7fe:	cd b7       	in	r28, 0x3d	; 61
     800:	de b7       	in	r29, 0x3e	; 62

}
     802:	cf 91       	pop	r28
     804:	df 91       	pop	r29
     806:	0f 90       	pop	r0
     808:	0f be       	out	0x3f, r0	; 63
     80a:	0f 90       	pop	r0
     80c:	1f 90       	pop	r1
     80e:	18 95       	reti

00000810 <__vector_2>:

void EXTERNAL_INTERRUPT1 (void)
{
     810:	78 94       	sei
     812:	1f 92       	push	r1
     814:	0f 92       	push	r0
     816:	0f b6       	in	r0, 0x3f	; 63
     818:	0f 92       	push	r0
     81a:	11 24       	eor	r1, r1
     81c:	df 93       	push	r29
     81e:	cf 93       	push	r28
     820:	cd b7       	in	r28, 0x3d	; 61
     822:	de b7       	in	r29, 0x3e	; 62

}
     824:	cf 91       	pop	r28
     826:	df 91       	pop	r29
     828:	0f 90       	pop	r0
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	0f 90       	pop	r0
     82e:	1f 90       	pop	r1
     830:	18 95       	reti

00000832 <__vector_3>:

void EXTERNAL_INTERRUPT2 (void)
{
     832:	78 94       	sei
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	df 93       	push	r29
     840:	cf 93       	push	r28
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62

}
     846:	cf 91       	pop	r28
     848:	df 91       	pop	r29
     84a:	0f 90       	pop	r0
     84c:	0f be       	out	0x3f, r0	; 63
     84e:	0f 90       	pop	r0
     850:	1f 90       	pop	r1
     852:	18 95       	reti

00000854 <__vector_10>:

void TIMER0_CTC_MODE_INTERRUPT (void)
{
     854:	78 94       	sei
     856:	1f 92       	push	r1
     858:	0f 92       	push	r0
     85a:	0f b6       	in	r0, 0x3f	; 63
     85c:	0f 92       	push	r0
     85e:	11 24       	eor	r1, r1
     860:	df 93       	push	r29
     862:	cf 93       	push	r28
     864:	cd b7       	in	r28, 0x3d	; 61
     866:	de b7       	in	r29, 0x3e	; 62

}
     868:	cf 91       	pop	r28
     86a:	df 91       	pop	r29
     86c:	0f 90       	pop	r0
     86e:	0f be       	out	0x3f, r0	; 63
     870:	0f 90       	pop	r0
     872:	1f 90       	pop	r1
     874:	18 95       	reti

00000876 <__vector_11>:

void TIMER0_OVF_MODE_INTERRUPT (void)
{
     876:	78 94       	sei
     878:	1f 92       	push	r1
     87a:	0f 92       	push	r0
     87c:	0f b6       	in	r0, 0x3f	; 63
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	df 93       	push	r29
     884:	cf 93       	push	r28
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62

}
     88a:	cf 91       	pop	r28
     88c:	df 91       	pop	r29
     88e:	0f 90       	pop	r0
     890:	0f be       	out	0x3f, r0	; 63
     892:	0f 90       	pop	r0
     894:	1f 90       	pop	r1
     896:	18 95       	reti

00000898 <__vector_6>:

void TIMER1_ICU_MODE_INTERRUPT (void)
{
     898:	78 94       	sei
     89a:	1f 92       	push	r1
     89c:	0f 92       	push	r0
     89e:	0f b6       	in	r0, 0x3f	; 63
     8a0:	0f 92       	push	r0
     8a2:	11 24       	eor	r1, r1
     8a4:	df 93       	push	r29
     8a6:	cf 93       	push	r28
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62

}
     8ac:	cf 91       	pop	r28
     8ae:	df 91       	pop	r29
     8b0:	0f 90       	pop	r0
     8b2:	0f be       	out	0x3f, r0	; 63
     8b4:	0f 90       	pop	r0
     8b6:	1f 90       	pop	r1
     8b8:	18 95       	reti

000008ba <__vector_7>:

void TIMER1_CTC_A_MODE_INTERRUPT (void)
{
     8ba:	78 94       	sei
     8bc:	1f 92       	push	r1
     8be:	0f 92       	push	r0
     8c0:	0f b6       	in	r0, 0x3f	; 63
     8c2:	0f 92       	push	r0
     8c4:	11 24       	eor	r1, r1
     8c6:	df 93       	push	r29
     8c8:	cf 93       	push	r28
     8ca:	cd b7       	in	r28, 0x3d	; 61
     8cc:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
     8ce:	cf 91       	pop	r28
     8d0:	df 91       	pop	r29
     8d2:	0f 90       	pop	r0
     8d4:	0f be       	out	0x3f, r0	; 63
     8d6:	0f 90       	pop	r0
     8d8:	1f 90       	pop	r1
     8da:	18 95       	reti

000008dc <__vector_8>:

void TIMER1_CTC_B_MODE_INTERRUPT (void)
{
     8dc:	78 94       	sei
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	df 93       	push	r29
     8ea:	cf 93       	push	r28
     8ec:	cd b7       	in	r28, 0x3d	; 61
     8ee:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
     8f0:	cf 91       	pop	r28
     8f2:	df 91       	pop	r29
     8f4:	0f 90       	pop	r0
     8f6:	0f be       	out	0x3f, r0	; 63
     8f8:	0f 90       	pop	r0
     8fa:	1f 90       	pop	r1
     8fc:	18 95       	reti

000008fe <__vector_9>:

void TIMER1_OVF_MODE_INTERRUPT (void)
{
     8fe:	78 94       	sei
     900:	1f 92       	push	r1
     902:	0f 92       	push	r0
     904:	0f b6       	in	r0, 0x3f	; 63
     906:	0f 92       	push	r0
     908:	11 24       	eor	r1, r1
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
//	timer1Set(49911);
}
     912:	cf 91       	pop	r28
     914:	df 91       	pop	r29
     916:	0f 90       	pop	r0
     918:	0f be       	out	0x3f, r0	; 63
     91a:	0f 90       	pop	r0
     91c:	1f 90       	pop	r1
     91e:	18 95       	reti

00000920 <__vector_4>:

void TIMER2_CTC_MODE_INTERRUPT (void)
{
     920:	78 94       	sei
     922:	1f 92       	push	r1
     924:	0f 92       	push	r0
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	0f 92       	push	r0
     92a:	11 24       	eor	r1, r1
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	cd b7       	in	r28, 0x3d	; 61
     932:	de b7       	in	r29, 0x3e	; 62
//	if(global_variable == 125)
//	{
//		Led_Toggle(LED_0);
//		global_variable = 0;
//	}
}
     934:	cf 91       	pop	r28
     936:	df 91       	pop	r29
     938:	0f 90       	pop	r0
     93a:	0f be       	out	0x3f, r0	; 63
     93c:	0f 90       	pop	r0
     93e:	1f 90       	pop	r1
     940:	18 95       	reti

00000942 <__vector_5>:

void TIMER2_OVF_MODE_INTERRUPT (void)
{
     942:	78 94       	sei
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	0f b6       	in	r0, 0x3f	; 63
     94a:	0f 92       	push	r0
     94c:	11 24       	eor	r1, r1
     94e:	df 93       	push	r29
     950:	cf 93       	push	r28
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
//	if(global_variable == 250)
//	{
//		Led_Toggle(LED_0);
//		global_variable = 0;
//	}
}
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	0f 90       	pop	r0
     95c:	0f be       	out	0x3f, r0	; 63
     95e:	0f 90       	pop	r0
     960:	1f 90       	pop	r1
     962:	18 95       	reti

00000964 <__vector_12>:

void SPI_STC_INTERRUPT (void)
{
     964:	78 94       	sei
     966:	1f 92       	push	r1
     968:	0f 92       	push	r0
     96a:	0f b6       	in	r0, 0x3f	; 63
     96c:	0f 92       	push	r0
     96e:	11 24       	eor	r1, r1
     970:	df 93       	push	r29
     972:	cf 93       	push	r28
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62

}
     978:	cf 91       	pop	r28
     97a:	df 91       	pop	r29
     97c:	0f 90       	pop	r0
     97e:	0f be       	out	0x3f, r0	; 63
     980:	0f 90       	pop	r0
     982:	1f 90       	pop	r1
     984:	18 95       	reti

00000986 <__vector_13>:

void USART_RXC_INTERRUPT (void)
{
     986:	78 94       	sei
     988:	1f 92       	push	r1
     98a:	0f 92       	push	r0
     98c:	0f b6       	in	r0, 0x3f	; 63
     98e:	0f 92       	push	r0
     990:	11 24       	eor	r1, r1
     992:	df 93       	push	r29
     994:	cf 93       	push	r28
     996:	cd b7       	in	r28, 0x3d	; 61
     998:	de b7       	in	r29, 0x3e	; 62

}
     99a:	cf 91       	pop	r28
     99c:	df 91       	pop	r29
     99e:	0f 90       	pop	r0
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	0f 90       	pop	r0
     9a4:	1f 90       	pop	r1
     9a6:	18 95       	reti

000009a8 <__vector_14>:

void USART_UDRE_INTERRUPT (void)
{
     9a8:	78 94       	sei
     9aa:	1f 92       	push	r1
     9ac:	0f 92       	push	r0
     9ae:	0f b6       	in	r0, 0x3f	; 63
     9b0:	0f 92       	push	r0
     9b2:	11 24       	eor	r1, r1
     9b4:	df 93       	push	r29
     9b6:	cf 93       	push	r28
     9b8:	cd b7       	in	r28, 0x3d	; 61
     9ba:	de b7       	in	r29, 0x3e	; 62

}
     9bc:	cf 91       	pop	r28
     9be:	df 91       	pop	r29
     9c0:	0f 90       	pop	r0
     9c2:	0f be       	out	0x3f, r0	; 63
     9c4:	0f 90       	pop	r0
     9c6:	1f 90       	pop	r1
     9c8:	18 95       	reti

000009ca <__vector_15>:

void USART_TXC_INTERRUPT (void)
{
     9ca:	78 94       	sei
     9cc:	1f 92       	push	r1
     9ce:	0f 92       	push	r0
     9d0:	0f b6       	in	r0, 0x3f	; 63
     9d2:	0f 92       	push	r0
     9d4:	11 24       	eor	r1, r1
     9d6:	df 93       	push	r29
     9d8:	cf 93       	push	r28
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62

}
     9de:	cf 91       	pop	r28
     9e0:	df 91       	pop	r29
     9e2:	0f 90       	pop	r0
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	0f 90       	pop	r0
     9e8:	1f 90       	pop	r1
     9ea:	18 95       	reti

000009ec <__vector_16>:

void ADC_INTERRUPT (void)
{
     9ec:	78 94       	sei
     9ee:	1f 92       	push	r1
     9f0:	0f 92       	push	r0
     9f2:	0f b6       	in	r0, 0x3f	; 63
     9f4:	0f 92       	push	r0
     9f6:	11 24       	eor	r1, r1
     9f8:	df 93       	push	r29
     9fa:	cf 93       	push	r28
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62

}
     a00:	cf 91       	pop	r28
     a02:	df 91       	pop	r29
     a04:	0f 90       	pop	r0
     a06:	0f be       	out	0x3f, r0	; 63
     a08:	0f 90       	pop	r0
     a0a:	1f 90       	pop	r1
     a0c:	18 95       	reti

00000a0e <__vector_17>:

void EE_RDY_INTERRUPT (void)
{
     a0e:	78 94       	sei
     a10:	1f 92       	push	r1
     a12:	0f 92       	push	r0
     a14:	0f b6       	in	r0, 0x3f	; 63
     a16:	0f 92       	push	r0
     a18:	11 24       	eor	r1, r1
     a1a:	df 93       	push	r29
     a1c:	cf 93       	push	r28
     a1e:	cd b7       	in	r28, 0x3d	; 61
     a20:	de b7       	in	r29, 0x3e	; 62

}
     a22:	cf 91       	pop	r28
     a24:	df 91       	pop	r29
     a26:	0f 90       	pop	r0
     a28:	0f be       	out	0x3f, r0	; 63
     a2a:	0f 90       	pop	r0
     a2c:	1f 90       	pop	r1
     a2e:	18 95       	reti

00000a30 <__vector_18>:

void ANA_COMP_INTERRUPT (void)
{
     a30:	78 94       	sei
     a32:	1f 92       	push	r1
     a34:	0f 92       	push	r0
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	0f 92       	push	r0
     a3a:	11 24       	eor	r1, r1
     a3c:	df 93       	push	r29
     a3e:	cf 93       	push	r28
     a40:	cd b7       	in	r28, 0x3d	; 61
     a42:	de b7       	in	r29, 0x3e	; 62

}
     a44:	cf 91       	pop	r28
     a46:	df 91       	pop	r29
     a48:	0f 90       	pop	r0
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	0f 90       	pop	r0
     a4e:	1f 90       	pop	r1
     a50:	18 95       	reti

00000a52 <__vector_19>:

void TWI_INTERRUPT (void)
{
     a52:	78 94       	sei
     a54:	1f 92       	push	r1
     a56:	0f 92       	push	r0
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	0f 92       	push	r0
     a5c:	11 24       	eor	r1, r1
     a5e:	df 93       	push	r29
     a60:	cf 93       	push	r28
     a62:	cd b7       	in	r28, 0x3d	; 61
     a64:	de b7       	in	r29, 0x3e	; 62

}
     a66:	cf 91       	pop	r28
     a68:	df 91       	pop	r29
     a6a:	0f 90       	pop	r0
     a6c:	0f be       	out	0x3f, r0	; 63
     a6e:	0f 90       	pop	r0
     a70:	1f 90       	pop	r1
     a72:	18 95       	reti

00000a74 <__vector_20>:

void SPM_RDY_INTERRUPT (void)
{
     a74:	78 94       	sei
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	df 93       	push	r29
     a82:	cf 93       	push	r28
     a84:	cd b7       	in	r28, 0x3d	; 61
     a86:	de b7       	in	r29, 0x3e	; 62

}
     a88:	cf 91       	pop	r28
     a8a:	df 91       	pop	r29
     a8c:	0f 90       	pop	r0
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	0f 90       	pop	r0
     a92:	1f 90       	pop	r1
     a94:	18 95       	reti

00000a96 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
     a96:	df 93       	push	r29
     a98:	cf 93       	push	r28
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <Led_Init+0x6>
     a9c:	0f 92       	push	r0
     a9e:	cd b7       	in	r28, 0x3d	; 61
     aa0:	de b7       	in	r29, 0x3e	; 62
     aa2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
     aa4:	89 81       	ldd	r24, Y+1	; 0x01
     aa6:	28 2f       	mov	r18, r24
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	3b 83       	std	Y+3, r19	; 0x03
     aac:	2a 83       	std	Y+2, r18	; 0x02
     aae:	8a 81       	ldd	r24, Y+2	; 0x02
     ab0:	9b 81       	ldd	r25, Y+3	; 0x03
     ab2:	81 30       	cpi	r24, 0x01	; 1
     ab4:	91 05       	cpc	r25, r1
     ab6:	d9 f0       	breq	.+54     	; 0xaee <Led_Init+0x58>
     ab8:	2a 81       	ldd	r18, Y+2	; 0x02
     aba:	3b 81       	ldd	r19, Y+3	; 0x03
     abc:	22 30       	cpi	r18, 0x02	; 2
     abe:	31 05       	cpc	r19, r1
     ac0:	2c f4       	brge	.+10     	; 0xacc <Led_Init+0x36>
     ac2:	8a 81       	ldd	r24, Y+2	; 0x02
     ac4:	9b 81       	ldd	r25, Y+3	; 0x03
     ac6:	00 97       	sbiw	r24, 0x00	; 0
     ac8:	61 f0       	breq	.+24     	; 0xae2 <Led_Init+0x4c>
     aca:	22 c0       	rjmp	.+68     	; 0xb10 <Led_Init+0x7a>
     acc:	2a 81       	ldd	r18, Y+2	; 0x02
     ace:	3b 81       	ldd	r19, Y+3	; 0x03
     ad0:	22 30       	cpi	r18, 0x02	; 2
     ad2:	31 05       	cpc	r19, r1
     ad4:	91 f0       	breq	.+36     	; 0xafa <Led_Init+0x64>
     ad6:	8a 81       	ldd	r24, Y+2	; 0x02
     ad8:	9b 81       	ldd	r25, Y+3	; 0x03
     ada:	83 30       	cpi	r24, 0x03	; 3
     adc:	91 05       	cpc	r25, r1
     ade:	99 f0       	breq	.+38     	; 0xb06 <Led_Init+0x70>
     ae0:	17 c0       	rjmp	.+46     	; 0xb10 <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	60 e1       	ldi	r22, 0x10	; 16
     ae6:	4f ef       	ldi	r20, 0xFF	; 255
     ae8:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
     aec:	11 c0       	rjmp	.+34     	; 0xb10 <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	60 e2       	ldi	r22, 0x20	; 32
     af2:	4f ef       	ldi	r20, 0xFF	; 255
     af4:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
     af8:	0b c0       	rjmp	.+22     	; 0xb10 <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	60 e4       	ldi	r22, 0x40	; 64
     afe:	4f ef       	ldi	r20, 0xFF	; 255
     b00:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
     b04:	05 c0       	rjmp	.+10     	; 0xb10 <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
     b06:	81 e0       	ldi	r24, 0x01	; 1
     b08:	60 e8       	ldi	r22, 0x80	; 128
     b0a:	4f ef       	ldi	r20, 0xFF	; 255
     b0c:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		break;
	default:

		break;
	}
}
     b10:	0f 90       	pop	r0
     b12:	0f 90       	pop	r0
     b14:	0f 90       	pop	r0
     b16:	cf 91       	pop	r28
     b18:	df 91       	pop	r29
     b1a:	08 95       	ret

00000b1c <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
     b1c:	df 93       	push	r29
     b1e:	cf 93       	push	r28
     b20:	00 d0       	rcall	.+0      	; 0xb22 <Led_On+0x6>
     b22:	0f 92       	push	r0
     b24:	cd b7       	in	r28, 0x3d	; 61
     b26:	de b7       	in	r29, 0x3e	; 62
     b28:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
     b2a:	89 81       	ldd	r24, Y+1	; 0x01
     b2c:	28 2f       	mov	r18, r24
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	3b 83       	std	Y+3, r19	; 0x03
     b32:	2a 83       	std	Y+2, r18	; 0x02
     b34:	8a 81       	ldd	r24, Y+2	; 0x02
     b36:	9b 81       	ldd	r25, Y+3	; 0x03
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	91 05       	cpc	r25, r1
     b3c:	d9 f0       	breq	.+54     	; 0xb74 <Led_On+0x58>
     b3e:	2a 81       	ldd	r18, Y+2	; 0x02
     b40:	3b 81       	ldd	r19, Y+3	; 0x03
     b42:	22 30       	cpi	r18, 0x02	; 2
     b44:	31 05       	cpc	r19, r1
     b46:	2c f4       	brge	.+10     	; 0xb52 <Led_On+0x36>
     b48:	8a 81       	ldd	r24, Y+2	; 0x02
     b4a:	9b 81       	ldd	r25, Y+3	; 0x03
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	61 f0       	breq	.+24     	; 0xb68 <Led_On+0x4c>
     b50:	22 c0       	rjmp	.+68     	; 0xb96 <Led_On+0x7a>
     b52:	2a 81       	ldd	r18, Y+2	; 0x02
     b54:	3b 81       	ldd	r19, Y+3	; 0x03
     b56:	22 30       	cpi	r18, 0x02	; 2
     b58:	31 05       	cpc	r19, r1
     b5a:	91 f0       	breq	.+36     	; 0xb80 <Led_On+0x64>
     b5c:	8a 81       	ldd	r24, Y+2	; 0x02
     b5e:	9b 81       	ldd	r25, Y+3	; 0x03
     b60:	83 30       	cpi	r24, 0x03	; 3
     b62:	91 05       	cpc	r25, r1
     b64:	99 f0       	breq	.+38     	; 0xb8c <Led_On+0x70>
     b66:	17 c0       	rjmp	.+46     	; 0xb96 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
     b68:	81 e0       	ldi	r24, 0x01	; 1
     b6a:	60 e1       	ldi	r22, 0x10	; 16
     b6c:	4f ef       	ldi	r20, 0xFF	; 255
     b6e:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     b72:	11 c0       	rjmp	.+34     	; 0xb96 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	60 e2       	ldi	r22, 0x20	; 32
     b78:	4f ef       	ldi	r20, 0xFF	; 255
     b7a:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     b7e:	0b c0       	rjmp	.+22     	; 0xb96 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	60 e4       	ldi	r22, 0x40	; 64
     b84:	4f ef       	ldi	r20, 0xFF	; 255
     b86:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     b8a:	05 c0       	rjmp	.+10     	; 0xb96 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	60 e8       	ldi	r22, 0x80	; 128
     b90:	4f ef       	ldi	r20, 0xFF	; 255
     b92:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		break;
	default:

		break;
	}
}
     b96:	0f 90       	pop	r0
     b98:	0f 90       	pop	r0
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	00 d0       	rcall	.+0      	; 0xba8 <Led_Off+0x6>
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	28 2f       	mov	r18, r24
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	3b 83       	std	Y+3, r19	; 0x03
     bb8:	2a 83       	std	Y+2, r18	; 0x02
     bba:	8a 81       	ldd	r24, Y+2	; 0x02
     bbc:	9b 81       	ldd	r25, Y+3	; 0x03
     bbe:	81 30       	cpi	r24, 0x01	; 1
     bc0:	91 05       	cpc	r25, r1
     bc2:	d9 f0       	breq	.+54     	; 0xbfa <Led_Off+0x58>
     bc4:	2a 81       	ldd	r18, Y+2	; 0x02
     bc6:	3b 81       	ldd	r19, Y+3	; 0x03
     bc8:	22 30       	cpi	r18, 0x02	; 2
     bca:	31 05       	cpc	r19, r1
     bcc:	2c f4       	brge	.+10     	; 0xbd8 <Led_Off+0x36>
     bce:	8a 81       	ldd	r24, Y+2	; 0x02
     bd0:	9b 81       	ldd	r25, Y+3	; 0x03
     bd2:	00 97       	sbiw	r24, 0x00	; 0
     bd4:	61 f0       	breq	.+24     	; 0xbee <Led_Off+0x4c>
     bd6:	22 c0       	rjmp	.+68     	; 0xc1c <Led_Off+0x7a>
     bd8:	2a 81       	ldd	r18, Y+2	; 0x02
     bda:	3b 81       	ldd	r19, Y+3	; 0x03
     bdc:	22 30       	cpi	r18, 0x02	; 2
     bde:	31 05       	cpc	r19, r1
     be0:	91 f0       	breq	.+36     	; 0xc06 <Led_Off+0x64>
     be2:	8a 81       	ldd	r24, Y+2	; 0x02
     be4:	9b 81       	ldd	r25, Y+3	; 0x03
     be6:	83 30       	cpi	r24, 0x03	; 3
     be8:	91 05       	cpc	r25, r1
     bea:	99 f0       	breq	.+38     	; 0xc12 <Led_Off+0x70>
     bec:	17 c0       	rjmp	.+46     	; 0xc1c <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	60 e1       	ldi	r22, 0x10	; 16
     bf2:	40 e0       	ldi	r20, 0x00	; 0
     bf4:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     bf8:	11 c0       	rjmp	.+34     	; 0xc1c <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
     bfa:	81 e0       	ldi	r24, 0x01	; 1
     bfc:	60 e2       	ldi	r22, 0x20	; 32
     bfe:	40 e0       	ldi	r20, 0x00	; 0
     c00:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     c04:	0b c0       	rjmp	.+22     	; 0xc1c <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
     c06:	81 e0       	ldi	r24, 0x01	; 1
     c08:	60 e4       	ldi	r22, 0x40	; 64
     c0a:	40 e0       	ldi	r20, 0x00	; 0
     c0c:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
     c10:	05 c0       	rjmp	.+10     	; 0xc1c <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
     c12:	81 e0       	ldi	r24, 0x01	; 1
     c14:	60 e8       	ldi	r22, 0x80	; 128
     c16:	40 e0       	ldi	r20, 0x00	; 0
     c18:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		break;
	default:

		break;
	}
}
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	0f 90       	pop	r0
     c22:	cf 91       	pop	r28
     c24:	df 91       	pop	r29
     c26:	08 95       	ret

00000c28 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
     c28:	df 93       	push	r29
     c2a:	cf 93       	push	r28
     c2c:	00 d0       	rcall	.+0      	; 0xc2e <Led_Toggle+0x6>
     c2e:	0f 92       	push	r0
     c30:	cd b7       	in	r28, 0x3d	; 61
     c32:	de b7       	in	r29, 0x3e	; 62
     c34:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
     c36:	89 81       	ldd	r24, Y+1	; 0x01
     c38:	28 2f       	mov	r18, r24
     c3a:	30 e0       	ldi	r19, 0x00	; 0
     c3c:	3b 83       	std	Y+3, r19	; 0x03
     c3e:	2a 83       	std	Y+2, r18	; 0x02
     c40:	8a 81       	ldd	r24, Y+2	; 0x02
     c42:	9b 81       	ldd	r25, Y+3	; 0x03
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	91 05       	cpc	r25, r1
     c48:	d1 f0       	breq	.+52     	; 0xc7e <Led_Toggle+0x56>
     c4a:	2a 81       	ldd	r18, Y+2	; 0x02
     c4c:	3b 81       	ldd	r19, Y+3	; 0x03
     c4e:	22 30       	cpi	r18, 0x02	; 2
     c50:	31 05       	cpc	r19, r1
     c52:	2c f4       	brge	.+10     	; 0xc5e <Led_Toggle+0x36>
     c54:	8a 81       	ldd	r24, Y+2	; 0x02
     c56:	9b 81       	ldd	r25, Y+3	; 0x03
     c58:	00 97       	sbiw	r24, 0x00	; 0
     c5a:	61 f0       	breq	.+24     	; 0xc74 <Led_Toggle+0x4c>
     c5c:	1e c0       	rjmp	.+60     	; 0xc9a <Led_Toggle+0x72>
     c5e:	2a 81       	ldd	r18, Y+2	; 0x02
     c60:	3b 81       	ldd	r19, Y+3	; 0x03
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	81 f0       	breq	.+32     	; 0xc88 <Led_Toggle+0x60>
     c68:	8a 81       	ldd	r24, Y+2	; 0x02
     c6a:	9b 81       	ldd	r25, Y+3	; 0x03
     c6c:	83 30       	cpi	r24, 0x03	; 3
     c6e:	91 05       	cpc	r25, r1
     c70:	81 f0       	breq	.+32     	; 0xc92 <Led_Toggle+0x6a>
     c72:	13 c0       	rjmp	.+38     	; 0xc9a <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	60 e1       	ldi	r22, 0x10	; 16
     c78:	0e 94 37 03 	call	0x66e	; 0x66e <gpioPinToggle>
     c7c:	0e c0       	rjmp	.+28     	; 0xc9a <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
     c7e:	81 e0       	ldi	r24, 0x01	; 1
     c80:	60 e2       	ldi	r22, 0x20	; 32
     c82:	0e 94 37 03 	call	0x66e	; 0x66e <gpioPinToggle>
     c86:	09 c0       	rjmp	.+18     	; 0xc9a <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	60 e4       	ldi	r22, 0x40	; 64
     c8c:	0e 94 37 03 	call	0x66e	; 0x66e <gpioPinToggle>
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
     c92:	81 e0       	ldi	r24, 0x01	; 1
     c94:	60 e8       	ldi	r22, 0x80	; 128
     c96:	0e 94 37 03 	call	0x66e	; 0x66e <gpioPinToggle>
		break;
	default:

		break;
	}
}
     c9a:	0f 90       	pop	r0
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	cf 91       	pop	r28
     ca2:	df 91       	pop	r29
     ca4:	08 95       	ret

00000ca6 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
     ca6:	df 93       	push	r29
     ca8:	cf 93       	push	r28
     caa:	00 d0       	rcall	.+0      	; 0xcac <pushButtonInit+0x6>
     cac:	0f 92       	push	r0
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	28 2f       	mov	r18, r24
     cb8:	30 e0       	ldi	r19, 0x00	; 0
     cba:	3b 83       	std	Y+3, r19	; 0x03
     cbc:	2a 83       	std	Y+2, r18	; 0x02
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	31 f0       	breq	.+12     	; 0xcd2 <pushButtonInit+0x2c>
     cc6:	2a 81       	ldd	r18, Y+2	; 0x02
     cc8:	3b 81       	ldd	r19, Y+3	; 0x03
     cca:	21 30       	cpi	r18, 0x01	; 1
     ccc:	31 05       	cpc	r19, r1
     cce:	39 f0       	breq	.+14     	; 0xcde <pushButtonInit+0x38>
     cd0:	0b c0       	rjmp	.+22     	; 0xce8 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
     cd2:	82 e0       	ldi	r24, 0x02	; 2
     cd4:	60 e1       	ldi	r22, 0x10	; 16
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
     cdc:	05 c0       	rjmp	.+10     	; 0xce8 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	64 e0       	ldi	r22, 0x04	; 4
     ce2:	40 e0       	ldi	r20, 0x00	; 0
     ce4:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		break;
	default:

		break;
	}
}
     ce8:	0f 90       	pop	r0
     cea:	0f 90       	pop	r0
     cec:	0f 90       	pop	r0
     cee:	cf 91       	pop	r28
     cf0:	df 91       	pop	r29
     cf2:	08 95       	ret

00000cf4 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
     cf4:	df 93       	push	r29
     cf6:	cf 93       	push	r28
     cf8:	cd b7       	in	r28, 0x3d	; 61
     cfa:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
     cfc:	cf 91       	pop	r28
     cfe:	df 91       	pop	r29
     d00:	08 95       	ret

00000d02 <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
     d02:	df 93       	push	r29
     d04:	cf 93       	push	r28
     d06:	00 d0       	rcall	.+0      	; 0xd08 <pushButtonGetStatus+0x6>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <pushButtonGetStatus+0x8>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
     d10:	89 81       	ldd	r24, Y+1	; 0x01
     d12:	28 2f       	mov	r18, r24
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	3c 83       	std	Y+4, r19	; 0x04
     d18:	2b 83       	std	Y+3, r18	; 0x03
     d1a:	8b 81       	ldd	r24, Y+3	; 0x03
     d1c:	9c 81       	ldd	r25, Y+4	; 0x04
     d1e:	81 30       	cpi	r24, 0x01	; 1
     d20:	91 05       	cpc	r25, r1
     d22:	71 f1       	breq	.+92     	; 0xd80 <pushButtonGetStatus+0x7e>
     d24:	2b 81       	ldd	r18, Y+3	; 0x03
     d26:	3c 81       	ldd	r19, Y+4	; 0x04
     d28:	22 30       	cpi	r18, 0x02	; 2
     d2a:	31 05       	cpc	r19, r1
     d2c:	2c f4       	brge	.+10     	; 0xd38 <pushButtonGetStatus+0x36>
     d2e:	8b 81       	ldd	r24, Y+3	; 0x03
     d30:	9c 81       	ldd	r25, Y+4	; 0x04
     d32:	00 97       	sbiw	r24, 0x00	; 0
     d34:	61 f0       	breq	.+24     	; 0xd4e <pushButtonGetStatus+0x4c>
     d36:	43 c0       	rjmp	.+134    	; 0xdbe <pushButtonGetStatus+0xbc>
     d38:	2b 81       	ldd	r18, Y+3	; 0x03
     d3a:	3c 81       	ldd	r19, Y+4	; 0x04
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	c1 f1       	breq	.+112    	; 0xdb2 <pushButtonGetStatus+0xb0>
     d42:	8b 81       	ldd	r24, Y+3	; 0x03
     d44:	9c 81       	ldd	r25, Y+4	; 0x04
     d46:	83 30       	cpi	r24, 0x03	; 3
     d48:	91 05       	cpc	r25, r1
     d4a:	b1 f1       	breq	.+108    	; 0xdb8 <pushButtonGetStatus+0xb6>
     d4c:	38 c0       	rjmp	.+112    	; 0xdbe <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	60 e1       	ldi	r22, 0x10	; 16
     d52:	0e 94 88 03 	call	0x710	; 0x710 <gpioPinRead>
     d56:	88 23       	and	r24, r24
     d58:	89 f0       	breq	.+34     	; 0xd7c <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
     d5a:	64 e1       	ldi	r22, 0x14	; 20
     d5c:	70 e0       	ldi	r23, 0x00	; 0
     d5e:	80 e0       	ldi	r24, 0x00	; 0
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
     d66:	82 e0       	ldi	r24, 0x02	; 2
     d68:	60 e1       	ldi	r22, 0x10	; 16
     d6a:	0e 94 88 03 	call	0x710	; 0x710 <gpioPinRead>
     d6e:	88 23       	and	r24, r24
     d70:	19 f0       	breq	.+6      	; 0xd78 <pushButtonGetStatus+0x76>
			{
				return Pressed;
     d72:	92 e0       	ldi	r25, 0x02	; 2
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	25 c0       	rjmp	.+74     	; 0xdc2 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
     d78:	1a 82       	std	Y+2, r1	; 0x02
     d7a:	23 c0       	rjmp	.+70     	; 0xdc2 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
     d7c:	1a 82       	std	Y+2, r1	; 0x02
     d7e:	21 c0       	rjmp	.+66     	; 0xdc2 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	64 e0       	ldi	r22, 0x04	; 4
     d84:	0e 94 88 03 	call	0x710	; 0x710 <gpioPinRead>
     d88:	88 23       	and	r24, r24
     d8a:	89 f0       	breq	.+34     	; 0xdae <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
     d8c:	64 e1       	ldi	r22, 0x14	; 20
     d8e:	70 e0       	ldi	r23, 0x00	; 0
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	0e 94 c1 07 	call	0xf82	; 0xf82 <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
     d98:	81 e0       	ldi	r24, 0x01	; 1
     d9a:	64 e0       	ldi	r22, 0x04	; 4
     d9c:	0e 94 88 03 	call	0x710	; 0x710 <gpioPinRead>
     da0:	88 23       	and	r24, r24
     da2:	19 f0       	breq	.+6      	; 0xdaa <pushButtonGetStatus+0xa8>
			{
				return Pressed;
     da4:	22 e0       	ldi	r18, 0x02	; 2
     da6:	2a 83       	std	Y+2, r18	; 0x02
     da8:	0c c0       	rjmp	.+24     	; 0xdc2 <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
     daa:	1a 82       	std	Y+2, r1	; 0x02
     dac:	0a c0       	rjmp	.+20     	; 0xdc2 <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
     dae:	1a 82       	std	Y+2, r1	; 0x02
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
     db2:	3f ef       	ldi	r19, 0xFF	; 255
     db4:	3a 83       	std	Y+2, r19	; 0x02
     db6:	05 c0       	rjmp	.+10     	; 0xdc2 <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
     db8:	8f ef       	ldi	r24, 0xFF	; 255
     dba:	8a 83       	std	Y+2, r24	; 0x02
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
     dbe:	9f ef       	ldi	r25, 0xFF	; 255
     dc0:	9a 83       	std	Y+2, r25	; 0x02
     dc2:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     dc4:	0f 90       	pop	r0
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	0f 90       	pop	r0
     dcc:	cf 91       	pop	r28
     dce:	df 91       	pop	r29
     dd0:	08 95       	ret

00000dd2 <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
     dd2:	df 93       	push	r29
     dd4:	cf 93       	push	r28
     dd6:	00 d0       	rcall	.+0      	; 0xdd8 <sevenSegInit+0x6>
     dd8:	0f 92       	push	r0
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
     dde:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	28 2f       	mov	r18, r24
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	3b 83       	std	Y+3, r19	; 0x03
     de8:	2a 83       	std	Y+2, r18	; 0x02
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	31 f0       	breq	.+12     	; 0xdfe <sevenSegInit+0x2c>
     df2:	2a 81       	ldd	r18, Y+2	; 0x02
     df4:	3b 81       	ldd	r19, Y+3	; 0x03
     df6:	21 30       	cpi	r18, 0x01	; 1
     df8:	31 05       	cpc	r19, r1
     dfa:	c9 f0       	breq	.+50     	; 0xe2e <sevenSegInit+0x5c>
     dfc:	2f c0       	rjmp	.+94     	; 0xe5c <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
     dfe:	81 e0       	ldi	r24, 0x01	; 1
     e00:	6f e0       	ldi	r22, 0x0F	; 15
     e02:	4f ef       	ldi	r20, 0xFF	; 255
     e04:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	64 e1       	ldi	r22, 0x14	; 20
     e0c:	4f ef       	ldi	r20, 0xFF	; 255
     e0e:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
     e12:	81 e0       	ldi	r24, 0x01	; 1
     e14:	6f e0       	ldi	r22, 0x0F	; 15
     e16:	40 e0       	ldi	r20, 0x00	; 0
     e18:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
     e1c:	83 e0       	ldi	r24, 0x03	; 3
     e1e:	60 e1       	ldi	r22, 0x10	; 16
     e20:	40 e0       	ldi	r20, 0x00	; 0
     e22:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		sevenSegDisable(SEG_0);
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	0e 94 61 07 	call	0xec2	; 0xec2 <sevenSegDisable>
     e2c:	17 c0       	rjmp	.+46     	; 0xe5c <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	6f e0       	ldi	r22, 0x0F	; 15
     e32:	4f ef       	ldi	r20, 0xFF	; 255
     e34:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
     e38:	83 e0       	ldi	r24, 0x03	; 3
     e3a:	68 e1       	ldi	r22, 0x18	; 24
     e3c:	4f ef       	ldi	r20, 0xFF	; 255
     e3e:	0e 94 5f 02 	call	0x4be	; 0x4be <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	6f e0       	ldi	r22, 0x0F	; 15
     e46:	40 e0       	ldi	r20, 0x00	; 0
     e48:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	60 e1       	ldi	r22, 0x10	; 16
     e50:	40 e0       	ldi	r20, 0x00	; 0
     e52:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		sevenSegDisable(SEG_1);
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	0e 94 61 07 	call	0xec2	; 0xec2 <sevenSegDisable>
		break;
	}
}
     e5c:	0f 90       	pop	r0
     e5e:	0f 90       	pop	r0
     e60:	0f 90       	pop	r0
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	00 d0       	rcall	.+0      	; 0xe6e <sevenSegEnable+0x6>
     e6e:	0f 92       	push	r0
     e70:	cd b7       	in	r28, 0x3d	; 61
     e72:	de b7       	in	r29, 0x3e	; 62
     e74:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
     e76:	89 81       	ldd	r24, Y+1	; 0x01
     e78:	28 2f       	mov	r18, r24
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	3b 83       	std	Y+3, r19	; 0x03
     e7e:	2a 83       	std	Y+2, r18	; 0x02
     e80:	8a 81       	ldd	r24, Y+2	; 0x02
     e82:	9b 81       	ldd	r25, Y+3	; 0x03
     e84:	00 97       	sbiw	r24, 0x00	; 0
     e86:	31 f0       	breq	.+12     	; 0xe94 <sevenSegEnable+0x2c>
     e88:	2a 81       	ldd	r18, Y+2	; 0x02
     e8a:	3b 81       	ldd	r19, Y+3	; 0x03
     e8c:	21 30       	cpi	r18, 0x01	; 1
     e8e:	31 05       	cpc	r19, r1
     e90:	51 f0       	breq	.+20     	; 0xea6 <sevenSegEnable+0x3e>
     e92:	11 c0       	rjmp	.+34     	; 0xeb6 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
     e94:	83 e0       	ldi	r24, 0x03	; 3
     e96:	64 e0       	ldi	r22, 0x04	; 4
     e98:	40 e0       	ldi	r20, 0x00	; 0
     e9a:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	80 93 64 00 	sts	0x0064, r24
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	68 e0       	ldi	r22, 0x08	; 8
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
     eb0:	8f ef       	ldi	r24, 0xFF	; 255
     eb2:	80 93 60 00 	sts	0x0060, r24
		break;
	}
}
     eb6:	0f 90       	pop	r0
     eb8:	0f 90       	pop	r0
     eba:	0f 90       	pop	r0
     ebc:	cf 91       	pop	r28
     ebe:	df 91       	pop	r29
     ec0:	08 95       	ret

00000ec2 <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
     ec2:	df 93       	push	r29
     ec4:	cf 93       	push	r28
     ec6:	00 d0       	rcall	.+0      	; 0xec8 <sevenSegDisable+0x6>
     ec8:	0f 92       	push	r0
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
     ed0:	89 81       	ldd	r24, Y+1	; 0x01
     ed2:	28 2f       	mov	r18, r24
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	3b 83       	std	Y+3, r19	; 0x03
     ed8:	2a 83       	std	Y+2, r18	; 0x02
     eda:	8a 81       	ldd	r24, Y+2	; 0x02
     edc:	9b 81       	ldd	r25, Y+3	; 0x03
     ede:	00 97       	sbiw	r24, 0x00	; 0
     ee0:	31 f0       	breq	.+12     	; 0xeee <sevenSegDisable+0x2c>
     ee2:	2a 81       	ldd	r18, Y+2	; 0x02
     ee4:	3b 81       	ldd	r19, Y+3	; 0x03
     ee6:	21 30       	cpi	r18, 0x01	; 1
     ee8:	31 05       	cpc	r19, r1
     eea:	49 f0       	breq	.+18     	; 0xefe <sevenSegDisable+0x3c>
     eec:	0f c0       	rjmp	.+30     	; 0xf0c <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
     eee:	83 e0       	ldi	r24, 0x03	; 3
     ef0:	64 e0       	ldi	r22, 0x04	; 4
     ef2:	4f ef       	ldi	r20, 0xFF	; 255
     ef4:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
     ef8:	10 92 64 00 	sts	0x0064, r1
     efc:	07 c0       	rjmp	.+14     	; 0xf0c <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	68 e0       	ldi	r22, 0x08	; 8
     f02:	4f ef       	ldi	r20, 0xFF	; 255
     f04:	0e 94 cb 02 	call	0x596	; 0x596 <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
     f08:	10 92 60 00 	sts	0x0060, r1
		break;
	}
}
     f0c:	0f 90       	pop	r0
     f0e:	0f 90       	pop	r0
     f10:	0f 90       	pop	r0
     f12:	cf 91       	pop	r28
     f14:	df 91       	pop	r29
     f16:	08 95       	ret

00000f18 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	00 d0       	rcall	.+0      	; 0xf1e <sevenSegWrite+0x6>
     f1e:	00 d0       	rcall	.+0      	; 0xf20 <sevenSegWrite+0x8>
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
     f24:	89 83       	std	Y+1, r24	; 0x01
     f26:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
     f28:	89 81       	ldd	r24, Y+1	; 0x01
     f2a:	28 2f       	mov	r18, r24
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	3c 83       	std	Y+4, r19	; 0x04
     f30:	2b 83       	std	Y+3, r18	; 0x03
     f32:	8b 81       	ldd	r24, Y+3	; 0x03
     f34:	9c 81       	ldd	r25, Y+4	; 0x04
     f36:	00 97       	sbiw	r24, 0x00	; 0
     f38:	31 f0       	breq	.+12     	; 0xf46 <sevenSegWrite+0x2e>
     f3a:	2b 81       	ldd	r18, Y+3	; 0x03
     f3c:	3c 81       	ldd	r19, Y+4	; 0x04
     f3e:	21 30       	cpi	r18, 0x01	; 1
     f40:	31 05       	cpc	r19, r1
     f42:	69 f0       	breq	.+26     	; 0xf5e <sevenSegWrite+0x46>
     f44:	17 c0       	rjmp	.+46     	; 0xf74 <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
     f46:	80 91 64 00 	lds	r24, 0x0064
     f4a:	8f 3f       	cpi	r24, 0xFF	; 255
     f4c:	99 f4       	brne	.+38     	; 0xf74 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
     f4e:	8a 81       	ldd	r24, Y+2	; 0x02
     f50:	98 2f       	mov	r25, r24
     f52:	9f 70       	andi	r25, 0x0F	; 15
     f54:	81 e0       	ldi	r24, 0x01	; 1
     f56:	69 2f       	mov	r22, r25
     f58:	0e 94 8f 01 	call	0x31e	; 0x31e <gpioPortWrite>
     f5c:	0b c0       	rjmp	.+22     	; 0xf74 <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
     f5e:	80 91 60 00 	lds	r24, 0x0060
     f62:	8f 3f       	cpi	r24, 0xFF	; 255
     f64:	39 f4       	brne	.+14     	; 0xf74 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	98 2f       	mov	r25, r24
     f6a:	9f 70       	andi	r25, 0x0F	; 15
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	69 2f       	mov	r22, r25
     f70:	0e 94 8f 01 	call	0x31e	; 0x31e <gpioPortWrite>
		}
		break;
	}
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	0f 90       	pop	r0
     f7a:	0f 90       	pop	r0
     f7c:	cf 91       	pop	r28
     f7e:	df 91       	pop	r29
     f80:	08 95       	ret

00000f82 <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
     f82:	df 93       	push	r29
     f84:	cf 93       	push	r28
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	60 97       	sbiw	r28, 0x10	; 16
     f8c:	0f b6       	in	r0, 0x3f	; 63
     f8e:	f8 94       	cli
     f90:	de bf       	out	0x3e, r29	; 62
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	cd bf       	out	0x3d, r28	; 61
     f96:	6d 87       	std	Y+13, r22	; 0x0d
     f98:	7e 87       	std	Y+14, r23	; 0x0e
     f9a:	8f 87       	std	Y+15, r24	; 0x0f
     f9c:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=380, i, j;
     f9e:	8c e7       	ldi	r24, 0x7C	; 124
     fa0:	91 e0       	ldi	r25, 0x01	; 1
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	89 87       	std	Y+9, r24	; 0x09
     fa8:	9a 87       	std	Y+10, r25	; 0x0a
     faa:	ab 87       	std	Y+11, r26	; 0x0b
     fac:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
     fae:	1d 82       	std	Y+5, r1	; 0x05
     fb0:	1e 82       	std	Y+6, r1	; 0x06
     fb2:	1f 82       	std	Y+7, r1	; 0x07
     fb4:	18 86       	std	Y+8, r1	; 0x08
     fb6:	28 c0       	rjmp	.+80     	; 0x1008 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
     fb8:	19 82       	std	Y+1, r1	; 0x01
     fba:	1a 82       	std	Y+2, r1	; 0x02
     fbc:	1b 82       	std	Y+3, r1	; 0x03
     fbe:	1c 82       	std	Y+4, r1	; 0x04
     fc0:	0b c0       	rjmp	.+22     	; 0xfd8 <softwareDelayMs+0x56>
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	ab 81       	ldd	r26, Y+3	; 0x03
     fc8:	bc 81       	ldd	r27, Y+4	; 0x04
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	a1 1d       	adc	r26, r1
     fce:	b1 1d       	adc	r27, r1
     fd0:	89 83       	std	Y+1, r24	; 0x01
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	ab 83       	std	Y+3, r26	; 0x03
     fd6:	bc 83       	std	Y+4, r27	; 0x04
     fd8:	29 81       	ldd	r18, Y+1	; 0x01
     fda:	3a 81       	ldd	r19, Y+2	; 0x02
     fdc:	4b 81       	ldd	r20, Y+3	; 0x03
     fde:	5c 81       	ldd	r21, Y+4	; 0x04
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	ab 85       	ldd	r26, Y+11	; 0x0b
     fe6:	bc 85       	ldd	r27, Y+12	; 0x0c
     fe8:	28 17       	cp	r18, r24
     fea:	39 07       	cpc	r19, r25
     fec:	4a 07       	cpc	r20, r26
     fee:	5b 07       	cpc	r21, r27
     ff0:	40 f3       	brcs	.-48     	; 0xfc2 <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=380, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
     ff2:	8d 81       	ldd	r24, Y+5	; 0x05
     ff4:	9e 81       	ldd	r25, Y+6	; 0x06
     ff6:	af 81       	ldd	r26, Y+7	; 0x07
     ff8:	b8 85       	ldd	r27, Y+8	; 0x08
     ffa:	01 96       	adiw	r24, 0x01	; 1
     ffc:	a1 1d       	adc	r26, r1
     ffe:	b1 1d       	adc	r27, r1
    1000:	8d 83       	std	Y+5, r24	; 0x05
    1002:	9e 83       	std	Y+6, r25	; 0x06
    1004:	af 83       	std	Y+7, r26	; 0x07
    1006:	b8 87       	std	Y+8, r27	; 0x08
    1008:	2d 81       	ldd	r18, Y+5	; 0x05
    100a:	3e 81       	ldd	r19, Y+6	; 0x06
    100c:	4f 81       	ldd	r20, Y+7	; 0x07
    100e:	58 85       	ldd	r21, Y+8	; 0x08
    1010:	8d 85       	ldd	r24, Y+13	; 0x0d
    1012:	9e 85       	ldd	r25, Y+14	; 0x0e
    1014:	af 85       	ldd	r26, Y+15	; 0x0f
    1016:	b8 89       	ldd	r27, Y+16	; 0x10
    1018:	28 17       	cp	r18, r24
    101a:	39 07       	cpc	r19, r25
    101c:	4a 07       	cpc	r20, r26
    101e:	5b 07       	cpc	r21, r27
    1020:	58 f2       	brcs	.-106    	; 0xfb8 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    1022:	60 96       	adiw	r28, 0x10	; 16
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	08 95       	ret

00001034 <timer0Init>:
static uint8_t gu8_timer2PreScaler = 0;

/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    1034:	ef 92       	push	r14
    1036:	0f 93       	push	r16
    1038:	df 93       	push	r29
    103a:	cf 93       	push	r28
    103c:	00 d0       	rcall	.+0      	; 0x103e <timer0Init+0xa>
    103e:	00 d0       	rcall	.+0      	; 0x1040 <timer0Init+0xc>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <timer0Init+0xe>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	89 83       	std	Y+1, r24	; 0x01
    1048:	6a 83       	std	Y+2, r22	; 0x02
    104a:	4b 83       	std	Y+3, r20	; 0x03
    104c:	2c 83       	std	Y+4, r18	; 0x04
    104e:	0d 83       	std	Y+5, r16	; 0x05
    1050:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    1052:	a3 e5       	ldi	r26, 0x53	; 83
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	e3 e5       	ldi	r30, 0x53	; 83
    1058:	f0 e0       	ldi	r31, 0x00	; 0
    105a:	80 81       	ld	r24, Z
    105c:	80 68       	ori	r24, 0x80	; 128
    105e:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    1060:	a3 e5       	ldi	r26, 0x53	; 83
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	e3 e5       	ldi	r30, 0x53	; 83
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	80 81       	ld	r24, Z
    106a:	98 2f       	mov	r25, r24
    106c:	97 7b       	andi	r25, 0xB7	; 183
    106e:	89 81       	ldd	r24, Y+1	; 0x01
    1070:	89 2b       	or	r24, r25
    1072:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    1074:	a3 e5       	ldi	r26, 0x53	; 83
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e3 e5       	ldi	r30, 0x53	; 83
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	98 2f       	mov	r25, r24
    1080:	9f 7c       	andi	r25, 0xCF	; 207
    1082:	8a 81       	ldd	r24, Y+2	; 0x02
    1084:	89 2b       	or	r24, r25
    1086:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1088:	8b 81       	ldd	r24, Y+3	; 0x03
    108a:	80 93 65 00 	sts	0x0065, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    108e:	e2 e5       	ldi	r30, 0x52	; 82
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	8c 81       	ldd	r24, Y+4	; 0x04
    1094:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    1096:	ec e5       	ldi	r30, 0x5C	; 92
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	8d 81       	ldd	r24, Y+5	; 0x05
    109c:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    109e:	a9 e5       	ldi	r26, 0x59	; 89
    10a0:	b0 e0       	ldi	r27, 0x00	; 0
    10a2:	e9 e5       	ldi	r30, 0x59	; 89
    10a4:	f0 e0       	ldi	r31, 0x00	; 0
    10a6:	80 81       	ld	r24, Z
    10a8:	98 2f       	mov	r25, r24
    10aa:	9c 7f       	andi	r25, 0xFC	; 252
    10ac:	8e 81       	ldd	r24, Y+6	; 0x06
    10ae:	89 2b       	or	r24, r25
    10b0:	8c 93       	st	X, r24
}
    10b2:	26 96       	adiw	r28, 0x06	; 6
    10b4:	0f b6       	in	r0, 0x3f	; 63
    10b6:	f8 94       	cli
    10b8:	de bf       	out	0x3e, r29	; 62
    10ba:	0f be       	out	0x3f, r0	; 63
    10bc:	cd bf       	out	0x3d, r28	; 61
    10be:	cf 91       	pop	r28
    10c0:	df 91       	pop	r29
    10c2:	0f 91       	pop	r16
    10c4:	ef 90       	pop	r14
    10c6:	08 95       	ret

000010c8 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	0f 92       	push	r0
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    10d4:	e2 e5       	ldi	r30, 0x52	; 82
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	80 83       	st	Z, r24
}
    10dc:	0f 90       	pop	r0
    10de:	cf 91       	pop	r28
    10e0:	df 91       	pop	r29
    10e2:	08 95       	ret

000010e4 <timer0Read>:

uint8_t timer0Read(void)
{
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	cd b7       	in	r28, 0x3d	; 61
    10ea:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    10ec:	e2 e5       	ldi	r30, 0x52	; 82
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
}
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	08 95       	ret

000010f8 <timer0Start>:

void timer0Start(void)
{
    10f8:	df 93       	push	r29
    10fa:	cf 93       	push	r28
    10fc:	cd b7       	in	r28, 0x3d	; 61
    10fe:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    1100:	a3 e5       	ldi	r26, 0x53	; 83
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	e3 e5       	ldi	r30, 0x53	; 83
    1106:	f0 e0       	ldi	r31, 0x00	; 0
    1108:	80 81       	ld	r24, Z
    110a:	98 2f       	mov	r25, r24
    110c:	98 7f       	andi	r25, 0xF8	; 248
    110e:	80 91 65 00 	lds	r24, 0x0065
    1112:	89 2b       	or	r24, r25
    1114:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    1116:	e2 e5       	ldi	r30, 0x52	; 82
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	10 82       	st	Z, r1
}
    111c:	cf 91       	pop	r28
    111e:	df 91       	pop	r29
    1120:	08 95       	ret

00001122 <timer0Stop>:

void timer0Stop(void)
{
    1122:	df 93       	push	r29
    1124:	cf 93       	push	r28
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    112a:	a3 e5       	ldi	r26, 0x53	; 83
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e3 e5       	ldi	r30, 0x53	; 83
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	88 7f       	andi	r24, 0xF8	; 248
    1136:	8c 93       	st	X, r24
}
    1138:	cf 91       	pop	r28
    113a:	df 91       	pop	r29
    113c:	08 95       	ret

0000113e <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    113e:	ef 92       	push	r14
    1140:	0f 93       	push	r16
    1142:	df 93       	push	r29
    1144:	cf 93       	push	r28
    1146:	00 d0       	rcall	.+0      	; 0x1148 <timer0DelayMs+0xa>
    1148:	00 d0       	rcall	.+0      	; 0x114a <timer0DelayMs+0xc>
    114a:	0f 92       	push	r0
    114c:	cd b7       	in	r28, 0x3d	; 61
    114e:	de b7       	in	r29, 0x3e	; 62
    1150:	9d 83       	std	Y+5, r25	; 0x05
    1152:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1154:	1b 82       	std	Y+3, r1	; 0x03
    1156:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1158:	8a ef       	ldi	r24, 0xFA	; 250
    115a:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	60 e0       	ldi	r22, 0x00	; 0
    1160:	43 e0       	ldi	r20, 0x03	; 3
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	00 e0       	ldi	r16, 0x00	; 0
    1166:	ee 24       	eor	r14, r14
    1168:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer0Init>
	timer0Start();
    116c:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1170:	1b 82       	std	Y+3, r1	; 0x03
    1172:	1a 82       	std	Y+2, r1	; 0x02
    1174:	0e c0       	rjmp	.+28     	; 0x1192 <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    1176:	e2 e5       	ldi	r30, 0x52	; 82
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	90 81       	ld	r25, Z
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	98 17       	cp	r25, r24
    1180:	d0 f3       	brcs	.-12     	; 0x1176 <timer0DelayMs+0x38>
		TCNT0 = 0;
    1182:	e2 e5       	ldi	r30, 0x52	; 82
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	01 96       	adiw	r24, 0x01	; 1
    118e:	9b 83       	std	Y+3, r25	; 0x03
    1190:	8a 83       	std	Y+2, r24	; 0x02
    1192:	2a 81       	ldd	r18, Y+2	; 0x02
    1194:	3b 81       	ldd	r19, Y+3	; 0x03
    1196:	8c 81       	ldd	r24, Y+4	; 0x04
    1198:	9d 81       	ldd	r25, Y+5	; 0x05
    119a:	28 17       	cp	r18, r24
    119c:	39 07       	cpc	r19, r25
    119e:	58 f3       	brcs	.-42     	; 0x1176 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	0f 91       	pop	r16
    11b0:	ef 90       	pop	r14
    11b2:	08 95       	ret

000011b4 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    11b4:	ef 92       	push	r14
    11b6:	0f 93       	push	r16
    11b8:	df 93       	push	r29
    11ba:	cf 93       	push	r28
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	29 97       	sbiw	r28, 0x09	; 9
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	de bf       	out	0x3e, r29	; 62
    11c8:	0f be       	out	0x3f, r0	; 63
    11ca:	cd bf       	out	0x3d, r28	; 61
    11cc:	6e 83       	std	Y+6, r22	; 0x06
    11ce:	7f 83       	std	Y+7, r23	; 0x07
    11d0:	88 87       	std	Y+8, r24	; 0x08
    11d2:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    11d4:	1a 82       	std	Y+2, r1	; 0x02
    11d6:	1b 82       	std	Y+3, r1	; 0x03
    11d8:	1c 82       	std	Y+4, r1	; 0x04
    11da:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    11dc:	80 e1       	ldi	r24, 0x10	; 16
    11de:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    11e0:	88 e0       	ldi	r24, 0x08	; 8
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	41 e0       	ldi	r20, 0x01	; 1
    11e6:	20 e0       	ldi	r18, 0x00	; 0
    11e8:	09 81       	ldd	r16, Y+1	; 0x01
    11ea:	ee 24       	eor	r14, r14
    11ec:	0e 94 1a 08 	call	0x1034	; 0x1034 <timer0Init>
	timer0Start();
    11f0:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	1b 82       	std	Y+3, r1	; 0x03
    11f8:	1c 82       	std	Y+4, r1	; 0x04
    11fa:	1d 82       	std	Y+5, r1	; 0x05
    11fc:	1e c0       	rjmp	.+60     	; 0x123a <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    11fe:	e8 e5       	ldi	r30, 0x58	; 88
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	88 2f       	mov	r24, r24
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	82 70       	andi	r24, 0x02	; 2
    120a:	90 70       	andi	r25, 0x00	; 0
    120c:	00 97       	sbiw	r24, 0x00	; 0
    120e:	b9 f3       	breq	.-18     	; 0x11fe <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    1210:	a8 e5       	ldi	r26, 0x58	; 88
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e8 e5       	ldi	r30, 0x58	; 88
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	82 60       	ori	r24, 0x02	; 2
    121c:	8c 93       	st	X, r24
		TCNT0 = 0;
    121e:	e2 e5       	ldi	r30, 0x52	; 82
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1224:	8a 81       	ldd	r24, Y+2	; 0x02
    1226:	9b 81       	ldd	r25, Y+3	; 0x03
    1228:	ac 81       	ldd	r26, Y+4	; 0x04
    122a:	bd 81       	ldd	r27, Y+5	; 0x05
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	a1 1d       	adc	r26, r1
    1230:	b1 1d       	adc	r27, r1
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	ac 83       	std	Y+4, r26	; 0x04
    1238:	bd 83       	std	Y+5, r27	; 0x05
    123a:	2a 81       	ldd	r18, Y+2	; 0x02
    123c:	3b 81       	ldd	r19, Y+3	; 0x03
    123e:	4c 81       	ldd	r20, Y+4	; 0x04
    1240:	5d 81       	ldd	r21, Y+5	; 0x05
    1242:	8e 81       	ldd	r24, Y+6	; 0x06
    1244:	9f 81       	ldd	r25, Y+7	; 0x07
    1246:	a8 85       	ldd	r26, Y+8	; 0x08
    1248:	b9 85       	ldd	r27, Y+9	; 0x09
    124a:	28 17       	cp	r18, r24
    124c:	39 07       	cpc	r19, r25
    124e:	4a 07       	cpc	r20, r26
    1250:	5b 07       	cpc	r21, r27
    1252:	a8 f2       	brcs	.-86     	; 0x11fe <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    1254:	29 96       	adiw	r28, 0x09	; 9
    1256:	0f b6       	in	r0, 0x3f	; 63
    1258:	f8 94       	cli
    125a:	de bf       	out	0x3e, r29	; 62
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	cd bf       	out	0x3d, r28	; 61
    1260:	cf 91       	pop	r28
    1262:	df 91       	pop	r29
    1264:	0f 91       	pop	r16
    1266:	ef 90       	pop	r14
    1268:	08 95       	ret

0000126a <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    126a:	df 93       	push	r29
    126c:	cf 93       	push	r28
    126e:	00 d0       	rcall	.+0      	; 0x1270 <timer0SwPWM+0x6>
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
    1276:	6a 83       	std	Y+2, r22	; 0x02

}
    1278:	0f 90       	pop	r0
    127a:	0f 90       	pop	r0
    127c:	cf 91       	pop	r28
    127e:	df 91       	pop	r29
    1280:	08 95       	ret

00001282 <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    1282:	af 92       	push	r10
    1284:	cf 92       	push	r12
    1286:	df 92       	push	r13
    1288:	ef 92       	push	r14
    128a:	ff 92       	push	r15
    128c:	0f 93       	push	r16
    128e:	1f 93       	push	r17
    1290:	df 93       	push	r29
    1292:	cf 93       	push	r28
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	2d 97       	sbiw	r28, 0x0d	; 13
    129a:	0f b6       	in	r0, 0x3f	; 63
    129c:	f8 94       	cli
    129e:	de bf       	out	0x3e, r29	; 62
    12a0:	0f be       	out	0x3f, r0	; 63
    12a2:	cd bf       	out	0x3d, r28	; 61
    12a4:	89 83       	std	Y+1, r24	; 0x01
    12a6:	7b 83       	std	Y+3, r23	; 0x03
    12a8:	6a 83       	std	Y+2, r22	; 0x02
    12aa:	4c 83       	std	Y+4, r20	; 0x04
    12ac:	3e 83       	std	Y+6, r19	; 0x06
    12ae:	2d 83       	std	Y+5, r18	; 0x05
    12b0:	18 87       	std	Y+8, r17	; 0x08
    12b2:	0f 83       	std	Y+7, r16	; 0x07
    12b4:	fa 86       	std	Y+10, r15	; 0x0a
    12b6:	e9 86       	std	Y+9, r14	; 0x09
    12b8:	dc 86       	std	Y+12, r13	; 0x0c
    12ba:	cb 86       	std	Y+11, r12	; 0x0b
    12bc:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    12be:	af e4       	ldi	r26, 0x4F	; 79
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	ef e4       	ldi	r30, 0x4F	; 79
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	88 60       	ori	r24, 0x08	; 8
    12ca:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    12cc:	af e4       	ldi	r26, 0x4F	; 79
    12ce:	b0 e0       	ldi	r27, 0x00	; 0
    12d0:	ef e4       	ldi	r30, 0x4F	; 79
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	80 81       	ld	r24, Z
    12d6:	84 60       	ori	r24, 0x04	; 4
    12d8:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    12da:	ee e4       	ldi	r30, 0x4E	; 78
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	11 82       	std	Z+1, r1	; 0x01
    12e0:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    12e2:	ee e4       	ldi	r30, 0x4E	; 78
    12e4:	f0 e0       	ldi	r31, 0x00	; 0
    12e6:	89 81       	ldd	r24, Y+1	; 0x01
    12e8:	28 2f       	mov	r18, r24
    12ea:	30 e0       	ldi	r19, 0x00	; 0
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	9b 81       	ldd	r25, Y+3	; 0x03
    12f0:	82 2b       	or	r24, r18
    12f2:	93 2b       	or	r25, r19
    12f4:	91 83       	std	Z+1, r25	; 0x01
    12f6:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    12f8:	8c 81       	ldd	r24, Y+4	; 0x04
    12fa:	80 93 65 00 	sts	0x0065, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    12fe:	ec e4       	ldi	r30, 0x4C	; 76
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	8d 81       	ldd	r24, Y+5	; 0x05
    1304:	9e 81       	ldd	r25, Y+6	; 0x06
    1306:	91 83       	std	Z+1, r25	; 0x01
    1308:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    130a:	ea e4       	ldi	r30, 0x4A	; 74
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	8f 81       	ldd	r24, Y+7	; 0x07
    1310:	98 85       	ldd	r25, Y+8	; 0x08
    1312:	91 83       	std	Z+1, r25	; 0x01
    1314:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    1316:	e8 e4       	ldi	r30, 0x48	; 72
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	89 85       	ldd	r24, Y+9	; 0x09
    131c:	9a 85       	ldd	r25, Y+10	; 0x0a
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    1322:	a9 e5       	ldi	r26, 0x59	; 89
    1324:	b0 e0       	ldi	r27, 0x00	; 0
    1326:	e9 e5       	ldi	r30, 0x59	; 89
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	98 2f       	mov	r25, r24
    132e:	93 7c       	andi	r25, 0xC3	; 195
    1330:	8d 85       	ldd	r24, Y+13	; 0x0d
    1332:	89 2b       	or	r24, r25
    1334:	8c 93       	st	X, r24
}
    1336:	2d 96       	adiw	r28, 0x0d	; 13
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	cf 91       	pop	r28
    1344:	df 91       	pop	r29
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	af 90       	pop	r10
    1354:	08 95       	ret

00001356 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    1356:	df 93       	push	r29
    1358:	cf 93       	push	r28
    135a:	00 d0       	rcall	.+0      	; 0x135c <timer1Set+0x6>
    135c:	cd b7       	in	r28, 0x3d	; 61
    135e:	de b7       	in	r29, 0x3e	; 62
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    1364:	ec e4       	ldi	r30, 0x4C	; 76
    1366:	f0 e0       	ldi	r31, 0x00	; 0
    1368:	89 81       	ldd	r24, Y+1	; 0x01
    136a:	9a 81       	ldd	r25, Y+2	; 0x02
    136c:	91 83       	std	Z+1, r25	; 0x01
    136e:	80 83       	st	Z, r24
}
    1370:	0f 90       	pop	r0
    1372:	0f 90       	pop	r0
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <timer1Read>:

uint16_t timer1Read(void)
{
    137a:	df 93       	push	r29
    137c:	cf 93       	push	r28
    137e:	cd b7       	in	r28, 0x3d	; 61
    1380:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    1382:	ec e4       	ldi	r30, 0x4C	; 76
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 81       	ld	r24, Z
    1388:	91 81       	ldd	r25, Z+1	; 0x01
}
    138a:	cf 91       	pop	r28
    138c:	df 91       	pop	r29
    138e:	08 95       	ret

00001390 <timer1Start>:

void timer1Start(void)
{
    1390:	df 93       	push	r29
    1392:	cf 93       	push	r28
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    1398:	ae e4       	ldi	r26, 0x4E	; 78
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	ee e4       	ldi	r30, 0x4E	; 78
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	98 2f       	mov	r25, r24
    13a4:	98 7f       	andi	r25, 0xF8	; 248
    13a6:	80 91 65 00 	lds	r24, 0x0065
    13aa:	89 2b       	or	r24, r25
    13ac:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    13ae:	ec e4       	ldi	r30, 0x4C	; 76
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	11 82       	std	Z+1, r1	; 0x01
    13b4:	10 82       	st	Z, r1
}
    13b6:	cf 91       	pop	r28
    13b8:	df 91       	pop	r29
    13ba:	08 95       	ret

000013bc <timer1Stop>:

void timer1Stop(void)
{
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	cd b7       	in	r28, 0x3d	; 61
    13c2:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    13c4:	ae e4       	ldi	r26, 0x4E	; 78
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	ee e4       	ldi	r30, 0x4E	; 78
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	88 7f       	andi	r24, 0xF8	; 248
    13d0:	8c 93       	st	X, r24
}
    13d2:	cf 91       	pop	r28
    13d4:	df 91       	pop	r29
    13d6:	08 95       	ret

000013d8 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    13d8:	af 92       	push	r10
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <timer1DelayMs+0x14>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <timer1DelayMs+0x16>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <timer1DelayMs+0x18>
    13f0:	cd b7       	in	r28, 0x3d	; 61
    13f2:	de b7       	in	r29, 0x3e	; 62
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    13f8:	1c 82       	std	Y+4, r1	; 0x04
    13fa:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    13fc:	8a ef       	ldi	r24, 0xFA	; 250
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	9a 83       	std	Y+2, r25	; 0x02
    1402:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	43 e0       	ldi	r20, 0x03	; 3
    140c:	20 e0       	ldi	r18, 0x00	; 0
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	00 e0       	ldi	r16, 0x00	; 0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	ee 24       	eor	r14, r14
    1416:	ff 24       	eor	r15, r15
    1418:	cc 24       	eor	r12, r12
    141a:	dd 24       	eor	r13, r13
    141c:	aa 24       	eor	r10, r10
    141e:	0e 94 41 09 	call	0x1282	; 0x1282 <timer1Init>
	timer1Start();
    1422:	0e 94 c8 09 	call	0x1390	; 0x1390 <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1426:	1c 82       	std	Y+4, r1	; 0x04
    1428:	1b 82       	std	Y+3, r1	; 0x03
    142a:	12 c0       	rjmp	.+36     	; 0x1450 <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    142c:	ec e4       	ldi	r30, 0x4C	; 76
    142e:	f0 e0       	ldi	r31, 0x00	; 0
    1430:	20 81       	ld	r18, Z
    1432:	31 81       	ldd	r19, Z+1	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	28 17       	cp	r18, r24
    143a:	39 07       	cpc	r19, r25
    143c:	b8 f3       	brcs	.-18     	; 0x142c <timer1DelayMs+0x54>
		TCNT1 = 0;
    143e:	ec e4       	ldi	r30, 0x4C	; 76
    1440:	f0 e0       	ldi	r31, 0x00	; 0
    1442:	11 82       	std	Z+1, r1	; 0x01
    1444:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	01 96       	adiw	r24, 0x01	; 1
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
    1450:	2b 81       	ldd	r18, Y+3	; 0x03
    1452:	3c 81       	ldd	r19, Y+4	; 0x04
    1454:	8d 81       	ldd	r24, Y+5	; 0x05
    1456:	9e 81       	ldd	r25, Y+6	; 0x06
    1458:	28 17       	cp	r18, r24
    145a:	39 07       	cpc	r19, r25
    145c:	38 f3       	brcs	.-50     	; 0x142c <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    145e:	26 96       	adiw	r28, 0x06	; 6
    1460:	0f b6       	in	r0, 0x3f	; 63
    1462:	f8 94       	cli
    1464:	de bf       	out	0x3e, r29	; 62
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	cd bf       	out	0x3d, r28	; 61
    146a:	cf 91       	pop	r28
    146c:	df 91       	pop	r29
    146e:	1f 91       	pop	r17
    1470:	0f 91       	pop	r16
    1472:	ff 90       	pop	r15
    1474:	ef 90       	pop	r14
    1476:	df 90       	pop	r13
    1478:	cf 90       	pop	r12
    147a:	af 90       	pop	r10
    147c:	08 95       	ret

0000147e <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    147e:	af 92       	push	r10
    1480:	cf 92       	push	r12
    1482:	df 92       	push	r13
    1484:	ef 92       	push	r14
    1486:	ff 92       	push	r15
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	df 93       	push	r29
    148e:	cf 93       	push	r28
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	2a 97       	sbiw	r28, 0x0a	; 10
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
    14a0:	6f 83       	std	Y+7, r22	; 0x07
    14a2:	78 87       	std	Y+8, r23	; 0x08
    14a4:	89 87       	std	Y+9, r24	; 0x09
    14a6:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    14a8:	1b 82       	std	Y+3, r1	; 0x03
    14aa:	1c 82       	std	Y+4, r1	; 0x04
    14ac:	1d 82       	std	Y+5, r1	; 0x05
    14ae:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    14b0:	80 e1       	ldi	r24, 0x10	; 16
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    14b8:	e9 81       	ldd	r30, Y+1	; 0x01
    14ba:	fa 81       	ldd	r31, Y+2	; 0x02
    14bc:	88 e0       	ldi	r24, 0x08	; 8
    14be:	60 e0       	ldi	r22, 0x00	; 0
    14c0:	70 e0       	ldi	r23, 0x00	; 0
    14c2:	41 e0       	ldi	r20, 0x01	; 1
    14c4:	20 e0       	ldi	r18, 0x00	; 0
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	8f 01       	movw	r16, r30
    14ca:	ee 24       	eor	r14, r14
    14cc:	ff 24       	eor	r15, r15
    14ce:	cc 24       	eor	r12, r12
    14d0:	dd 24       	eor	r13, r13
    14d2:	aa 24       	eor	r10, r10
    14d4:	0e 94 41 09 	call	0x1282	; 0x1282 <timer1Init>
	timer1Start();
    14d8:	0e 94 c8 09 	call	0x1390	; 0x1390 <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    14dc:	1b 82       	std	Y+3, r1	; 0x03
    14de:	1c 82       	std	Y+4, r1	; 0x04
    14e0:	1d 82       	std	Y+5, r1	; 0x05
    14e2:	1e 82       	std	Y+6, r1	; 0x06
    14e4:	1f c0       	rjmp	.+62     	; 0x1524 <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    14e6:	e8 e5       	ldi	r30, 0x58	; 88
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	80 81       	ld	r24, Z
    14ec:	88 2f       	mov	r24, r24
    14ee:	90 e0       	ldi	r25, 0x00	; 0
    14f0:	80 71       	andi	r24, 0x10	; 16
    14f2:	90 70       	andi	r25, 0x00	; 0
    14f4:	00 97       	sbiw	r24, 0x00	; 0
    14f6:	b9 f3       	breq	.-18     	; 0x14e6 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    14f8:	a8 e5       	ldi	r26, 0x58	; 88
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e8 e5       	ldi	r30, 0x58	; 88
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	80 61       	ori	r24, 0x10	; 16
    1504:	8c 93       	st	X, r24
		TCNT1 = 0;
    1506:	ec e4       	ldi	r30, 0x4C	; 76
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	11 82       	std	Z+1, r1	; 0x01
    150c:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	9c 81       	ldd	r25, Y+4	; 0x04
    1512:	ad 81       	ldd	r26, Y+5	; 0x05
    1514:	be 81       	ldd	r27, Y+6	; 0x06
    1516:	01 96       	adiw	r24, 0x01	; 1
    1518:	a1 1d       	adc	r26, r1
    151a:	b1 1d       	adc	r27, r1
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	ad 83       	std	Y+5, r26	; 0x05
    1522:	be 83       	std	Y+6, r27	; 0x06
    1524:	2b 81       	ldd	r18, Y+3	; 0x03
    1526:	3c 81       	ldd	r19, Y+4	; 0x04
    1528:	4d 81       	ldd	r20, Y+5	; 0x05
    152a:	5e 81       	ldd	r21, Y+6	; 0x06
    152c:	8f 81       	ldd	r24, Y+7	; 0x07
    152e:	98 85       	ldd	r25, Y+8	; 0x08
    1530:	a9 85       	ldd	r26, Y+9	; 0x09
    1532:	ba 85       	ldd	r27, Y+10	; 0x0a
    1534:	28 17       	cp	r18, r24
    1536:	39 07       	cpc	r19, r25
    1538:	4a 07       	cpc	r20, r26
    153a:	5b 07       	cpc	r21, r27
    153c:	a0 f2       	brcs	.-88     	; 0x14e6 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    153e:	2a 96       	adiw	r28, 0x0a	; 10
    1540:	0f b6       	in	r0, 0x3f	; 63
    1542:	f8 94       	cli
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	0f be       	out	0x3f, r0	; 63
    1548:	cd bf       	out	0x3d, r28	; 61
    154a:	cf 91       	pop	r28
    154c:	df 91       	pop	r29
    154e:	1f 91       	pop	r17
    1550:	0f 91       	pop	r16
    1552:	ff 90       	pop	r15
    1554:	ef 90       	pop	r14
    1556:	df 90       	pop	r13
    1558:	cf 90       	pop	r12
    155a:	af 90       	pop	r10
    155c:	08 95       	ret

0000155e <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <timer1SwPWM+0x6>
    1564:	cd b7       	in	r28, 0x3d	; 61
    1566:	de b7       	in	r29, 0x3e	; 62
    1568:	89 83       	std	Y+1, r24	; 0x01
    156a:	6a 83       	std	Y+2, r22	; 0x02

}
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	cf 91       	pop	r28
    1572:	df 91       	pop	r29
    1574:	08 95       	ret

00001576 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    1576:	cf 92       	push	r12
    1578:	ef 92       	push	r14
    157a:	0f 93       	push	r16
    157c:	df 93       	push	r29
    157e:	cf 93       	push	r28
    1580:	cd b7       	in	r28, 0x3d	; 61
    1582:	de b7       	in	r29, 0x3e	; 62
    1584:	27 97       	sbiw	r28, 0x07	; 7
    1586:	0f b6       	in	r0, 0x3f	; 63
    1588:	f8 94       	cli
    158a:	de bf       	out	0x3e, r29	; 62
    158c:	0f be       	out	0x3f, r0	; 63
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	89 83       	std	Y+1, r24	; 0x01
    1592:	6a 83       	std	Y+2, r22	; 0x02
    1594:	4b 83       	std	Y+3, r20	; 0x03
    1596:	2c 83       	std	Y+4, r18	; 0x04
    1598:	0d 83       	std	Y+5, r16	; 0x05
    159a:	ee 82       	std	Y+6, r14	; 0x06
    159c:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    159e:	a5 e4       	ldi	r26, 0x45	; 69
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e4       	ldi	r30, 0x45	; 69
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 68       	ori	r24, 0x80	; 128
    15aa:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    15ac:	a5 e4       	ldi	r26, 0x45	; 69
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	e5 e4       	ldi	r30, 0x45	; 69
    15b2:	f0 e0       	ldi	r31, 0x00	; 0
    15b4:	80 81       	ld	r24, Z
    15b6:	98 2f       	mov	r25, r24
    15b8:	97 7b       	andi	r25, 0xB7	; 183
    15ba:	89 81       	ldd	r24, Y+1	; 0x01
    15bc:	89 2b       	or	r24, r25
    15be:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    15c0:	a5 e4       	ldi	r26, 0x45	; 69
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 e4       	ldi	r30, 0x45	; 69
    15c6:	f0 e0       	ldi	r31, 0x00	; 0
    15c8:	80 81       	ld	r24, Z
    15ca:	98 2f       	mov	r25, r24
    15cc:	9f 7c       	andi	r25, 0xCF	; 207
    15ce:	8a 81       	ldd	r24, Y+2	; 0x02
    15d0:	89 2b       	or	r24, r25
    15d2:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    15d4:	8b 81       	ldd	r24, Y+3	; 0x03
    15d6:	80 93 66 00 	sts	0x0066, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    15da:	e4 e4       	ldi	r30, 0x44	; 68
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    15e2:	e3 e4       	ldi	r30, 0x43	; 67
    15e4:	f0 e0       	ldi	r31, 0x00	; 0
    15e6:	8d 81       	ldd	r24, Y+5	; 0x05
    15e8:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    15ea:	a9 e5       	ldi	r26, 0x59	; 89
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e9 e5       	ldi	r30, 0x59	; 89
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	98 2f       	mov	r25, r24
    15f6:	9f 73       	andi	r25, 0x3F	; 63
    15f8:	8f 81       	ldd	r24, Y+7	; 0x07
    15fa:	89 2b       	or	r24, r25
    15fc:	8c 93       	st	X, r24
}
    15fe:	27 96       	adiw	r28, 0x07	; 7
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	de bf       	out	0x3e, r29	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	cd bf       	out	0x3d, r28	; 61
    160a:	cf 91       	pop	r28
    160c:	df 91       	pop	r29
    160e:	0f 91       	pop	r16
    1610:	ef 90       	pop	r14
    1612:	cf 90       	pop	r12
    1614:	08 95       	ret

00001616 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	0f 92       	push	r0
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
    1620:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    1622:	e4 e4       	ldi	r30, 0x44	; 68
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	89 81       	ldd	r24, Y+1	; 0x01
    1628:	80 83       	st	Z, r24
}
    162a:	0f 90       	pop	r0
    162c:	cf 91       	pop	r28
    162e:	df 91       	pop	r29
    1630:	08 95       	ret

00001632 <timer2Read>:

uint8_t timer2Read(void)
{
    1632:	df 93       	push	r29
    1634:	cf 93       	push	r28
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    163a:	e4 e4       	ldi	r30, 0x44	; 68
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	80 81       	ld	r24, Z
}
    1640:	cf 91       	pop	r28
    1642:	df 91       	pop	r29
    1644:	08 95       	ret

00001646 <timer2Start>:

void timer2Start(void)
{
    1646:	df 93       	push	r29
    1648:	cf 93       	push	r28
    164a:	cd b7       	in	r28, 0x3d	; 61
    164c:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    164e:	a5 e4       	ldi	r26, 0x45	; 69
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e5 e4       	ldi	r30, 0x45	; 69
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	98 2f       	mov	r25, r24
    165a:	98 7f       	andi	r25, 0xF8	; 248
    165c:	80 91 66 00 	lds	r24, 0x0066
    1660:	89 2b       	or	r24, r25
    1662:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    1664:	e4 e4       	ldi	r30, 0x44	; 68
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	10 82       	st	Z, r1
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <timer2Stop>:

void timer2Stop(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    1678:	a5 e4       	ldi	r26, 0x45	; 69
    167a:	b0 e0       	ldi	r27, 0x00	; 0
    167c:	e5 e4       	ldi	r30, 0x45	; 69
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	88 7f       	andi	r24, 0xF8	; 248
    1684:	8c 93       	st	X, r24
}
    1686:	cf 91       	pop	r28
    1688:	df 91       	pop	r29
    168a:	08 95       	ret

0000168c <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    168c:	cf 92       	push	r12
    168e:	ef 92       	push	r14
    1690:	0f 93       	push	r16
    1692:	df 93       	push	r29
    1694:	cf 93       	push	r28
    1696:	00 d0       	rcall	.+0      	; 0x1698 <timer2DelayMs+0xc>
    1698:	00 d0       	rcall	.+0      	; 0x169a <timer2DelayMs+0xe>
    169a:	0f 92       	push	r0
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
    16a0:	9d 83       	std	Y+5, r25	; 0x05
    16a2:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    16a4:	1b 82       	std	Y+3, r1	; 0x03
    16a6:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    16a8:	8a ef       	ldi	r24, 0xFA	; 250
    16aa:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	44 e0       	ldi	r20, 0x04	; 4
    16b2:	20 e0       	ldi	r18, 0x00	; 0
    16b4:	00 e0       	ldi	r16, 0x00	; 0
    16b6:	ee 24       	eor	r14, r14
    16b8:	cc 24       	eor	r12, r12
    16ba:	0e 94 bb 0a 	call	0x1576	; 0x1576 <timer2Init>
	timer2Start();
    16be:	0e 94 23 0b 	call	0x1646	; 0x1646 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    16c2:	1b 82       	std	Y+3, r1	; 0x03
    16c4:	1a 82       	std	Y+2, r1	; 0x02
    16c6:	0e c0       	rjmp	.+28     	; 0x16e4 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    16c8:	e4 e4       	ldi	r30, 0x44	; 68
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	90 81       	ld	r25, Z
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	98 17       	cp	r25, r24
    16d2:	d0 f3       	brcs	.-12     	; 0x16c8 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    16d4:	e4 e4       	ldi	r30, 0x44	; 68
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	9b 81       	ldd	r25, Y+3	; 0x03
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	9b 83       	std	Y+3, r25	; 0x03
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    16e4:	2a 81       	ldd	r18, Y+2	; 0x02
    16e6:	3b 81       	ldd	r19, Y+3	; 0x03
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	28 17       	cp	r18, r24
    16ee:	39 07       	cpc	r19, r25
    16f0:	58 f3       	brcs	.-42     	; 0x16c8 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	cf 91       	pop	r28
    16fe:	df 91       	pop	r29
    1700:	0f 91       	pop	r16
    1702:	ef 90       	pop	r14
    1704:	cf 90       	pop	r12
    1706:	08 95       	ret

00001708 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    1708:	cf 92       	push	r12
    170a:	ef 92       	push	r14
    170c:	0f 93       	push	r16
    170e:	df 93       	push	r29
    1710:	cf 93       	push	r28
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
    1716:	29 97       	sbiw	r28, 0x09	; 9
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	de bf       	out	0x3e, r29	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	cd bf       	out	0x3d, r28	; 61
    1722:	6e 83       	std	Y+6, r22	; 0x06
    1724:	7f 83       	std	Y+7, r23	; 0x07
    1726:	88 87       	std	Y+8, r24	; 0x08
    1728:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    172a:	1a 82       	std	Y+2, r1	; 0x02
    172c:	1b 82       	std	Y+3, r1	; 0x03
    172e:	1c 82       	std	Y+4, r1	; 0x04
    1730:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    1732:	80 e1       	ldi	r24, 0x10	; 16
    1734:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    1736:	88 e0       	ldi	r24, 0x08	; 8
    1738:	60 e0       	ldi	r22, 0x00	; 0
    173a:	41 e0       	ldi	r20, 0x01	; 1
    173c:	20 e0       	ldi	r18, 0x00	; 0
    173e:	09 81       	ldd	r16, Y+1	; 0x01
    1740:	ee 24       	eor	r14, r14
    1742:	cc 24       	eor	r12, r12
    1744:	0e 94 bb 0a 	call	0x1576	; 0x1576 <timer2Init>
	timer2Start();
    1748:	0e 94 23 0b 	call	0x1646	; 0x1646 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    174c:	1a 82       	std	Y+2, r1	; 0x02
    174e:	1b 82       	std	Y+3, r1	; 0x03
    1750:	1c 82       	std	Y+4, r1	; 0x04
    1752:	1d 82       	std	Y+5, r1	; 0x05
    1754:	1a c0       	rjmp	.+52     	; 0x178a <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    1756:	e8 e5       	ldi	r30, 0x58	; 88
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	88 23       	and	r24, r24
    175e:	dc f7       	brge	.-10     	; 0x1756 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    1760:	a8 e5       	ldi	r26, 0x58	; 88
    1762:	b0 e0       	ldi	r27, 0x00	; 0
    1764:	e8 e5       	ldi	r30, 0x58	; 88
    1766:	f0 e0       	ldi	r31, 0x00	; 0
    1768:	80 81       	ld	r24, Z
    176a:	80 68       	ori	r24, 0x80	; 128
    176c:	8c 93       	st	X, r24
		TCNT2 = 0;
    176e:	e4 e4       	ldi	r30, 0x44	; 68
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1774:	8a 81       	ldd	r24, Y+2	; 0x02
    1776:	9b 81       	ldd	r25, Y+3	; 0x03
    1778:	ac 81       	ldd	r26, Y+4	; 0x04
    177a:	bd 81       	ldd	r27, Y+5	; 0x05
    177c:	01 96       	adiw	r24, 0x01	; 1
    177e:	a1 1d       	adc	r26, r1
    1780:	b1 1d       	adc	r27, r1
    1782:	8a 83       	std	Y+2, r24	; 0x02
    1784:	9b 83       	std	Y+3, r25	; 0x03
    1786:	ac 83       	std	Y+4, r26	; 0x04
    1788:	bd 83       	std	Y+5, r27	; 0x05
    178a:	2a 81       	ldd	r18, Y+2	; 0x02
    178c:	3b 81       	ldd	r19, Y+3	; 0x03
    178e:	4c 81       	ldd	r20, Y+4	; 0x04
    1790:	5d 81       	ldd	r21, Y+5	; 0x05
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	a8 85       	ldd	r26, Y+8	; 0x08
    1798:	b9 85       	ldd	r27, Y+9	; 0x09
    179a:	28 17       	cp	r18, r24
    179c:	39 07       	cpc	r19, r25
    179e:	4a 07       	cpc	r20, r26
    17a0:	5b 07       	cpc	r21, r27
    17a2:	c8 f2       	brcs	.-78     	; 0x1756 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    17a4:	29 96       	adiw	r28, 0x09	; 9
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	f8 94       	cli
    17aa:	de bf       	out	0x3e, r29	; 62
    17ac:	0f be       	out	0x3f, r0	; 63
    17ae:	cd bf       	out	0x3d, r28	; 61
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	0f 91       	pop	r16
    17b6:	ef 90       	pop	r14
    17b8:	cf 90       	pop	r12
    17ba:	08 95       	ret

000017bc <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <timer2SwPWM+0x6>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	6a 83       	std	Y+2, r22	; 0x02

}
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	cf 91       	pop	r28
    17d0:	df 91       	pop	r29
    17d2:	08 95       	ret

000017d4 <__udivmodqi4>:
    17d4:	99 1b       	sub	r25, r25
    17d6:	79 e0       	ldi	r23, 0x09	; 9
    17d8:	04 c0       	rjmp	.+8      	; 0x17e2 <__udivmodqi4_ep>

000017da <__udivmodqi4_loop>:
    17da:	99 1f       	adc	r25, r25
    17dc:	96 17       	cp	r25, r22
    17de:	08 f0       	brcs	.+2      	; 0x17e2 <__udivmodqi4_ep>
    17e0:	96 1b       	sub	r25, r22

000017e2 <__udivmodqi4_ep>:
    17e2:	88 1f       	adc	r24, r24
    17e4:	7a 95       	dec	r23
    17e6:	c9 f7       	brne	.-14     	; 0x17da <__udivmodqi4_loop>
    17e8:	80 95       	com	r24
    17ea:	08 95       	ret

000017ec <__udivmodsi4>:
    17ec:	a1 e2       	ldi	r26, 0x21	; 33
    17ee:	1a 2e       	mov	r1, r26
    17f0:	aa 1b       	sub	r26, r26
    17f2:	bb 1b       	sub	r27, r27
    17f4:	fd 01       	movw	r30, r26
    17f6:	0d c0       	rjmp	.+26     	; 0x1812 <__udivmodsi4_ep>

000017f8 <__udivmodsi4_loop>:
    17f8:	aa 1f       	adc	r26, r26
    17fa:	bb 1f       	adc	r27, r27
    17fc:	ee 1f       	adc	r30, r30
    17fe:	ff 1f       	adc	r31, r31
    1800:	a2 17       	cp	r26, r18
    1802:	b3 07       	cpc	r27, r19
    1804:	e4 07       	cpc	r30, r20
    1806:	f5 07       	cpc	r31, r21
    1808:	20 f0       	brcs	.+8      	; 0x1812 <__udivmodsi4_ep>
    180a:	a2 1b       	sub	r26, r18
    180c:	b3 0b       	sbc	r27, r19
    180e:	e4 0b       	sbc	r30, r20
    1810:	f5 0b       	sbc	r31, r21

00001812 <__udivmodsi4_ep>:
    1812:	66 1f       	adc	r22, r22
    1814:	77 1f       	adc	r23, r23
    1816:	88 1f       	adc	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	1a 94       	dec	r1
    181c:	69 f7       	brne	.-38     	; 0x17f8 <__udivmodsi4_loop>
    181e:	60 95       	com	r22
    1820:	70 95       	com	r23
    1822:	80 95       	com	r24
    1824:	90 95       	com	r25
    1826:	9b 01       	movw	r18, r22
    1828:	ac 01       	movw	r20, r24
    182a:	bd 01       	movw	r22, r26
    182c:	cf 01       	movw	r24, r30
    182e:	08 95       	ret

00001830 <_exit>:
    1830:	f8 94       	cli

00001832 <__stop_program>:
    1832:	ff cf       	rjmp	.-2      	; 0x1832 <__stop_program>
