
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001b36  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00001b36  00001bca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800062  00800062  00001bcc  2**0
                  ALLOC
  3 .stab         000029f4  00000000  00000000  00001bcc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000017ac  00000000  00000000  000045c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 20 04 	jmp	0x840	; 0x840 <__vector_1>
       8:	0c 94 31 04 	jmp	0x862	; 0x862 <__vector_2>
       c:	0c 94 42 04 	jmp	0x884	; 0x884 <__vector_3>
      10:	0c 94 8e 05 	jmp	0xb1c	; 0xb1c <__vector_4>
      14:	0c 94 9f 05 	jmp	0xb3e	; 0xb3e <__vector_5>
      18:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_6>
      1c:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <__vector_7>
      20:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_8>
      24:	0c 94 7d 05 	jmp	0xafa	; 0xafa <__vector_9>
      28:	0c 94 53 04 	jmp	0x8a6	; 0x8a6 <__vector_10>
      2c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__vector_11>
      30:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__vector_12>
      34:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__vector_13>
      38:	0c 94 d2 05 	jmp	0xba4	; 0xba4 <__vector_14>
      3c:	0c 94 e3 05 	jmp	0xbc6	; 0xbc6 <__vector_15>
      40:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__vector_16>
      44:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <__vector_17>
      48:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__vector_18>
      4c:	0c 94 27 06 	jmp	0xc4e	; 0xc4e <__vector_19>
      50:	0c 94 38 06 	jmp	0xc70	; 0xc70 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e3       	ldi	r30, 0x36	; 54
      68:	fb e1       	ldi	r31, 0x1B	; 27
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 36       	cpi	r26, 0x62	; 98
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 e6       	ldi	r26, 0x62	; 98
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 36       	cpi	r26, 0x6D	; 109
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 01 	call	0x292	; 0x292 <main>
      8a:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <GPIO_REQ7>:
}En_GpioReq9State_t;

/*- APIs IMPLEMENTATION ------------------------------------*/

void GPIO_REQ7(void)
{
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <GPIO_REQ7+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <GPIO_REQ7+0x8>
      9a:	0f 92       	push	r0
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_countUpCounter = 0;
      a0:	1d 82       	std	Y+5, r1	; 0x05
	uint32_t u32_delayCounter = 0;
      a2:	19 82       	std	Y+1, r1	; 0x01
      a4:	1a 82       	std	Y+2, r1	; 0x02
      a6:	1b 82       	std	Y+3, r1	; 0x03
      a8:	1c 82       	std	Y+4, r1	; 0x04

	sevenSegInit(SEG_0);
      aa:	80 e0       	ldi	r24, 0x00	; 0
      ac:	0e 94 e7 07 	call	0xfce	; 0xfce <sevenSegInit>
	sevenSegInit(SEG_1);
      b0:	81 e0       	ldi	r24, 0x01	; 1
      b2:	0e 94 e7 07 	call	0xfce	; 0xfce <sevenSegInit>
      b6:	52 c0       	rjmp	.+164    	; 0x15c <GPIO_REQ7+0xca>

	while(1)
	{
		while(u8_countUpCounter <= 99)
		{
			sevenSegEnable(SEG_0);
      b8:	80 e0       	ldi	r24, 0x00	; 0
      ba:	0e 94 32 08 	call	0x1064	; 0x1064 <sevenSegEnable>
			sevenSegWrite(SEG_0, ((u8_countUpCounter / 10) % 10));
      be:	8d 81       	ldd	r24, Y+5	; 0x05
      c0:	9a e0       	ldi	r25, 0x0A	; 10
      c2:	69 2f       	mov	r22, r25
      c4:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__udivmodqi4>
      c8:	9a e0       	ldi	r25, 0x0A	; 10
      ca:	69 2f       	mov	r22, r25
      cc:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__udivmodqi4>
      d0:	89 2f       	mov	r24, r25
      d2:	98 2f       	mov	r25, r24
      d4:	80 e0       	ldi	r24, 0x00	; 0
      d6:	69 2f       	mov	r22, r25
      d8:	0e 94 8a 08 	call	0x1114	; 0x1114 <sevenSegWrite>
			softwareDelayMs(1);
      dc:	61 e0       	ldi	r22, 0x01	; 1
      de:	70 e0       	ldi	r23, 0x00	; 0
      e0:	80 e0       	ldi	r24, 0x00	; 0
      e2:	90 e0       	ldi	r25, 0x00	; 0
      e4:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
			sevenSegDisable(SEG_0);
      e8:	80 e0       	ldi	r24, 0x00	; 0
      ea:	0e 94 5f 08 	call	0x10be	; 0x10be <sevenSegDisable>

			sevenSegEnable(SEG_1);
      ee:	81 e0       	ldi	r24, 0x01	; 1
      f0:	0e 94 32 08 	call	0x1064	; 0x1064 <sevenSegEnable>
			sevenSegWrite(SEG_1, (u8_countUpCounter % 10));
      f4:	8d 81       	ldd	r24, Y+5	; 0x05
      f6:	9a e0       	ldi	r25, 0x0A	; 10
      f8:	69 2f       	mov	r22, r25
      fa:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__udivmodqi4>
      fe:	89 2f       	mov	r24, r25
     100:	98 2f       	mov	r25, r24
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	69 2f       	mov	r22, r25
     106:	0e 94 8a 08 	call	0x1114	; 0x1114 <sevenSegWrite>
			softwareDelayMs(1);
     10a:	61 e0       	ldi	r22, 0x01	; 1
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	80 e0       	ldi	r24, 0x00	; 0
     110:	90 e0       	ldi	r25, 0x00	; 0
     112:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
			sevenSegDisable(SEG_1);
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	0e 94 5f 08 	call	0x10be	; 0x10be <sevenSegDisable>

			u32_delayCounter++;
     11c:	89 81       	ldd	r24, Y+1	; 0x01
     11e:	9a 81       	ldd	r25, Y+2	; 0x02
     120:	ab 81       	ldd	r26, Y+3	; 0x03
     122:	bc 81       	ldd	r27, Y+4	; 0x04
     124:	01 96       	adiw	r24, 0x01	; 1
     126:	a1 1d       	adc	r26, r1
     128:	b1 1d       	adc	r27, r1
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	ab 83       	std	Y+3, r26	; 0x03
     130:	bc 83       	std	Y+4, r27	; 0x04

			if(u32_delayCounter % 469 == 0)
     132:	89 81       	ldd	r24, Y+1	; 0x01
     134:	9a 81       	ldd	r25, Y+2	; 0x02
     136:	ab 81       	ldd	r26, Y+3	; 0x03
     138:	bc 81       	ldd	r27, Y+4	; 0x04
     13a:	25 ed       	ldi	r18, 0xD5	; 213
     13c:	31 e0       	ldi	r19, 0x01	; 1
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	bc 01       	movw	r22, r24
     144:	cd 01       	movw	r24, r26
     146:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
     14a:	dc 01       	movw	r26, r24
     14c:	cb 01       	movw	r24, r22
     14e:	00 97       	sbiw	r24, 0x00	; 0
     150:	a1 05       	cpc	r26, r1
     152:	b1 05       	cpc	r27, r1
     154:	19 f4       	brne	.+6      	; 0x15c <GPIO_REQ7+0xca>
				u8_countUpCounter++;
     156:	8d 81       	ldd	r24, Y+5	; 0x05
     158:	8f 5f       	subi	r24, 0xFF	; 255
     15a:	8d 83       	std	Y+5, r24	; 0x05
	sevenSegInit(SEG_0);
	sevenSegInit(SEG_1);

	while(1)
	{
		while(u8_countUpCounter <= 99)
     15c:	8d 81       	ldd	r24, Y+5	; 0x05
     15e:	84 36       	cpi	r24, 0x64	; 100
     160:	08 f4       	brcc	.+2      	; 0x164 <GPIO_REQ7+0xd2>
     162:	aa cf       	rjmp	.-172    	; 0xb8 <GPIO_REQ7+0x26>
     164:	fb cf       	rjmp	.-10     	; 0x15c <GPIO_REQ7+0xca>

00000166 <GPIO_REQ8>:
		}
	}
}

void GPIO_REQ8(void)
{
     166:	df 93       	push	r29
     168:	cf 93       	push	r28
     16a:	00 d0       	rcall	.+0      	; 0x16c <GPIO_REQ8+0x6>
     16c:	cd b7       	in	r28, 0x3d	; 61
     16e:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_appCounter = 0, u8_delayDivider = 20;
     170:	1a 82       	std	Y+2, r1	; 0x02
     172:	84 e1       	ldi	r24, 0x14	; 20
     174:	89 83       	std	Y+1, r24	; 0x01

	Led_Init(LED_1);
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	0e 94 49 06 	call	0xc92	; 0xc92 <Led_Init>
	pushButtonInit(BTN_1);
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	0e 94 51 07 	call	0xea2	; 0xea2 <pushButtonInit>

	while(1)
	{
		u8_delayDivider = 20;
     182:	84 e1       	ldi	r24, 0x14	; 20
     184:	89 83       	std	Y+1, r24	; 0x01
		if(pushButtonGetStatus(BTN_1) == Pressed)
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	0e 94 7f 07 	call	0xefe	; 0xefe <pushButtonGetStatus>
     18c:	82 30       	cpi	r24, 0x02	; 2
     18e:	c9 f7       	brne	.-14     	; 0x182 <GPIO_REQ8+0x1c>
		{
			while(pushButtonGetStatus(BTN_1) != Released);
     190:	81 e0       	ldi	r24, 0x01	; 1
     192:	0e 94 7f 07 	call	0xefe	; 0xefe <pushButtonGetStatus>
     196:	88 23       	and	r24, r24
     198:	d9 f7       	brne	.-10     	; 0x190 <GPIO_REQ8+0x2a>
			u8_appCounter++;
     19a:	8a 81       	ldd	r24, Y+2	; 0x02
     19c:	8f 5f       	subi	r24, 0xFF	; 255
     19e:	8a 83       	std	Y+2, r24	; 0x02
     1a0:	24 c0       	rjmp	.+72     	; 0x1ea <GPIO_REQ8+0x84>
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
     1a2:	81 e0       	ldi	r24, 0x01	; 1
     1a4:	0e 94 8c 06 	call	0xd18	; 0xd18 <Led_On>
     1a8:	17 c0       	rjmp	.+46     	; 0x1d8 <GPIO_REQ8+0x72>
				while(u8_delayDivider > 0)
				{
					softwareDelayMs(49);
     1aa:	61 e3       	ldi	r22, 0x31	; 49
     1ac:	70 e0       	ldi	r23, 0x00	; 0
     1ae:	80 e0       	ldi	r24, 0x00	; 0
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
					if(pushButtonGetStatus(BTN_1) == Pressed)
     1b6:	81 e0       	ldi	r24, 0x01	; 1
     1b8:	0e 94 7f 07 	call	0xefe	; 0xefe <pushButtonGetStatus>
     1bc:	82 30       	cpi	r24, 0x02	; 2
     1be:	49 f4       	brne	.+18     	; 0x1d2 <GPIO_REQ8+0x6c>
					{
						softwareDelayMs(300);
     1c0:	6c e2       	ldi	r22, 0x2C	; 44
     1c2:	71 e0       	ldi	r23, 0x01	; 1
     1c4:	80 e0       	ldi	r24, 0x00	; 0
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
						u8_delayDivider += 14;
     1cc:	89 81       	ldd	r24, Y+1	; 0x01
     1ce:	82 5f       	subi	r24, 0xF2	; 242
     1d0:	89 83       	std	Y+1, r24	; 0x01
					}
					u8_delayDivider--;
     1d2:	89 81       	ldd	r24, Y+1	; 0x01
     1d4:	81 50       	subi	r24, 0x01	; 1
     1d6:	89 83       	std	Y+1, r24	; 0x01
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
			{
				Led_On(LED_1);
				while(u8_delayDivider > 0)
     1d8:	89 81       	ldd	r24, Y+1	; 0x01
     1da:	88 23       	and	r24, r24
     1dc:	31 f7       	brne	.-52     	; 0x1aa <GPIO_REQ8+0x44>
						softwareDelayMs(300);
						u8_delayDivider += 14;
					}
					u8_delayDivider--;
				}
				Led_Off(LED_1);
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
				u8_appCounter--;
     1e4:	8a 81       	ldd	r24, Y+2	; 0x02
     1e6:	81 50       	subi	r24, 0x01	; 1
     1e8:	8a 83       	std	Y+2, r24	; 0x02
		u8_delayDivider = 20;
		if(pushButtonGetStatus(BTN_1) == Pressed)
		{
			while(pushButtonGetStatus(BTN_1) != Released);
			u8_appCounter++;
			while(u8_appCounter > 0)
     1ea:	8a 81       	ldd	r24, Y+2	; 0x02
     1ec:	88 23       	and	r24, r24
     1ee:	c9 f6       	brne	.-78     	; 0x1a2 <GPIO_REQ8+0x3c>
				Led_Off(LED_1);
				u8_appCounter--;
			}
			break;
		}
	}
     1f0:	0f 90       	pop	r0
     1f2:	0f 90       	pop	r0
     1f4:	cf 91       	pop	r28
     1f6:	df 91       	pop	r29
     1f8:	08 95       	ret

000001fa <GPIO_REQ9>:
}

void GPIO_REQ9(void)
{
     1fa:	df 93       	push	r29
     1fc:	cf 93       	push	r28
     1fe:	00 d0       	rcall	.+0      	; 0x200 <GPIO_REQ9+0x6>
     200:	0f 92       	push	r0
     202:	cd b7       	in	r28, 0x3d	; 61
     204:	de b7       	in	r29, 0x3e	; 62
	uint8_t u8_currentState = GO;
     206:	19 82       	std	Y+1, r1	; 0x01

	Led_Init(LED_1);
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	0e 94 49 06 	call	0xc92	; 0xc92 <Led_Init>
	Led_Init(LED_2);
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	0e 94 49 06 	call	0xc92	; 0xc92 <Led_Init>
	Led_Init(LED_3);
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	0e 94 49 06 	call	0xc92	; 0xc92 <Led_Init>

	while(1)
	{
		switch(u8_currentState)
     21a:	89 81       	ldd	r24, Y+1	; 0x01
     21c:	28 2f       	mov	r18, r24
     21e:	30 e0       	ldi	r19, 0x00	; 0
     220:	3b 83       	std	Y+3, r19	; 0x03
     222:	2a 83       	std	Y+2, r18	; 0x02
     224:	8a 81       	ldd	r24, Y+2	; 0x02
     226:	9b 81       	ldd	r25, Y+3	; 0x03
     228:	81 30       	cpi	r24, 0x01	; 1
     22a:	91 05       	cpc	r25, r1
     22c:	a9 f0       	breq	.+42     	; 0x258 <GPIO_REQ9+0x5e>
     22e:	2a 81       	ldd	r18, Y+2	; 0x02
     230:	3b 81       	ldd	r19, Y+3	; 0x03
     232:	22 30       	cpi	r18, 0x02	; 2
     234:	31 05       	cpc	r19, r1
     236:	e1 f0       	breq	.+56     	; 0x270 <GPIO_REQ9+0x76>
     238:	8a 81       	ldd	r24, Y+2	; 0x02
     23a:	9b 81       	ldd	r25, Y+3	; 0x03
     23c:	00 97       	sbiw	r24, 0x00	; 0
     23e:	11 f5       	brne	.+68     	; 0x284 <GPIO_REQ9+0x8a>
		{
		case GO:
			Led_On(LED_1);
     240:	81 e0       	ldi	r24, 0x01	; 1
     242:	0e 94 8c 06 	call	0xd18	; 0xd18 <Led_On>
			Led_Off(LED_2);
     246:	82 e0       	ldi	r24, 0x02	; 2
     248:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			Led_Off(LED_3);
     24c:	83 e0       	ldi	r24, 0x03	; 3
     24e:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			u8_currentState = STOP;
     252:	81 e0       	ldi	r24, 0x01	; 1
     254:	89 83       	std	Y+1, r24	; 0x01
     256:	16 c0       	rjmp	.+44     	; 0x284 <GPIO_REQ9+0x8a>
			break;
		case STOP:
			Led_Off(LED_1);
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			Led_On(LED_2);
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	0e 94 8c 06 	call	0xd18	; 0xd18 <Led_On>
			Led_Off(LED_3);
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			u8_currentState = GET_READY;
     26a:	82 e0       	ldi	r24, 0x02	; 2
     26c:	89 83       	std	Y+1, r24	; 0x01
     26e:	0a c0       	rjmp	.+20     	; 0x284 <GPIO_REQ9+0x8a>
			break;
		case GET_READY:
			Led_Off(LED_1);
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			Led_Off(LED_2);
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	0e 94 cf 06 	call	0xd9e	; 0xd9e <Led_Off>
			Led_On(LED_3);
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	0e 94 8c 06 	call	0xd18	; 0xd18 <Led_On>
			u8_currentState = GO;
     282:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		softwareDelayMs(1000);
     284:	68 ee       	ldi	r22, 0xE8	; 232
     286:	73 e0       	ldi	r23, 0x03	; 3
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
     290:	c4 cf       	rjmp	.-120    	; 0x21a <GPIO_REQ9+0x20>

00000292 <main>:
	}
}

int main(void)
{
     292:	df 93       	push	r29
     294:	cf 93       	push	r28
     296:	cd b7       	in	r28, 0x3d	; 61
     298:	de b7       	in	r29, 0x3e	; 62
	gpioPinDirection(GPIOD, BIT2 | BIT3 | BIT4, OUTPUT);
     29a:	83 e0       	ldi	r24, 0x03	; 3
     29c:	6c e1       	ldi	r22, 0x1C	; 28
     29e:	4f ef       	ldi	r20, 0xFF	; 255
     2a0:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
	gpioPinDirection(GPIOD, BIT5 | BIT6 | BIT7, OUTPUT);
     2a4:	83 e0       	ldi	r24, 0x03	; 3
     2a6:	60 ee       	ldi	r22, 0xE0	; 224
     2a8:	4f ef       	ldi	r20, 0xFF	; 255
     2aa:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>

	gpioPinWrite(GPIOD, BIT4, HIGH);
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	60 e1       	ldi	r22, 0x10	; 16
     2b2:	4f ef       	ldi	r20, 0xFF	; 255
     2b4:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
	gpioPinWrite(GPIOD, BIT5, HIGH);
     2b8:	83 e0       	ldi	r24, 0x03	; 3
     2ba:	60 e2       	ldi	r22, 0x20	; 32
     2bc:	4f ef       	ldi	r20, 0xFF	; 255
     2be:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>

	gu8_dutyCycle = 0;
     2c2:	10 92 63 00 	sts	0x0063, r1

	timer0SwPWM(gu8_dutyCycle, 200);
     2c6:	80 91 63 00 	lds	r24, 0x0063
     2ca:	68 ec       	ldi	r22, 0xC8	; 200
     2cc:	0e 94 33 0a 	call	0x1466	; 0x1466 <timer0SwPWM>

	while(1)
	{
		if(lastflag == 1)
     2d0:	80 91 62 00 	lds	r24, 0x0062
     2d4:	81 30       	cpi	r24, 0x01	; 1
     2d6:	e1 f7       	brne	.-8      	; 0x2d0 <main+0x3e>
		{
			softwareDelayMs(2000);
     2d8:	60 ed       	ldi	r22, 0xD0	; 208
     2da:	77 e0       	ldi	r23, 0x07	; 7
     2dc:	80 e0       	ldi	r24, 0x00	; 0
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
     2e4:	80 e0       	ldi	r24, 0x00	; 0
     2e6:	90 e0       	ldi	r25, 0x00	; 0
			break;
		}
	}
}
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	08 95       	ret

000002ee <gpioPortDirection>:


/*- APIs IMPLEMENTATION ------------------------------------*/

void gpioPortDirection(uint8_t u8_port, uint8_t u8_direction)
{
     2ee:	df 93       	push	r29
     2f0:	cf 93       	push	r28
     2f2:	00 d0       	rcall	.+0      	; 0x2f4 <gpioPortDirection+0x6>
     2f4:	00 d0       	rcall	.+0      	; 0x2f6 <gpioPortDirection+0x8>
     2f6:	cd b7       	in	r28, 0x3d	; 61
     2f8:	de b7       	in	r29, 0x3e	; 62
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to manipulate its direction */
	switch(u8_port)
     2fe:	89 81       	ldd	r24, Y+1	; 0x01
     300:	28 2f       	mov	r18, r24
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	3c 83       	std	Y+4, r19	; 0x04
     306:	2b 83       	std	Y+3, r18	; 0x03
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	81 30       	cpi	r24, 0x01	; 1
     30e:	91 05       	cpc	r25, r1
     310:	d1 f0       	breq	.+52     	; 0x346 <gpioPortDirection+0x58>
     312:	2b 81       	ldd	r18, Y+3	; 0x03
     314:	3c 81       	ldd	r19, Y+4	; 0x04
     316:	22 30       	cpi	r18, 0x02	; 2
     318:	31 05       	cpc	r19, r1
     31a:	2c f4       	brge	.+10     	; 0x326 <gpioPortDirection+0x38>
     31c:	8b 81       	ldd	r24, Y+3	; 0x03
     31e:	9c 81       	ldd	r25, Y+4	; 0x04
     320:	00 97       	sbiw	r24, 0x00	; 0
     322:	61 f0       	breq	.+24     	; 0x33c <gpioPortDirection+0x4e>
     324:	1e c0       	rjmp	.+60     	; 0x362 <gpioPortDirection+0x74>
     326:	2b 81       	ldd	r18, Y+3	; 0x03
     328:	3c 81       	ldd	r19, Y+4	; 0x04
     32a:	22 30       	cpi	r18, 0x02	; 2
     32c:	31 05       	cpc	r19, r1
     32e:	81 f0       	breq	.+32     	; 0x350 <gpioPortDirection+0x62>
     330:	8b 81       	ldd	r24, Y+3	; 0x03
     332:	9c 81       	ldd	r25, Y+4	; 0x04
     334:	83 30       	cpi	r24, 0x03	; 3
     336:	91 05       	cpc	r25, r1
     338:	81 f0       	breq	.+32     	; 0x35a <gpioPortDirection+0x6c>
     33a:	13 c0       	rjmp	.+38     	; 0x362 <gpioPortDirection+0x74>
	{
	case GPIOA:
		PORTA_DIR = u8_direction;
     33c:	ea e3       	ldi	r30, 0x3A	; 58
     33e:	f0 e0       	ldi	r31, 0x00	; 0
     340:	8a 81       	ldd	r24, Y+2	; 0x02
     342:	80 83       	st	Z, r24
     344:	0e c0       	rjmp	.+28     	; 0x362 <gpioPortDirection+0x74>
		break;
	case GPIOB:
		PORTB_DIR = u8_direction;
     346:	e7 e3       	ldi	r30, 0x37	; 55
     348:	f0 e0       	ldi	r31, 0x00	; 0
     34a:	8a 81       	ldd	r24, Y+2	; 0x02
     34c:	80 83       	st	Z, r24
     34e:	09 c0       	rjmp	.+18     	; 0x362 <gpioPortDirection+0x74>
		break;
	case GPIOC:
		PORTC_DIR = u8_direction;
     350:	e4 e3       	ldi	r30, 0x34	; 52
     352:	f0 e0       	ldi	r31, 0x00	; 0
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	80 83       	st	Z, r24
     358:	04 c0       	rjmp	.+8      	; 0x362 <gpioPortDirection+0x74>
		break;
	case GPIOD:
		PORTD_DIR = u8_direction;
     35a:	e1 e3       	ldi	r30, 0x31	; 49
     35c:	f0 e0       	ldi	r31, 0x00	; 0
     35e:	8a 81       	ldd	r24, Y+2	; 0x02
     360:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	cf 91       	pop	r28
     36c:	df 91       	pop	r29
     36e:	08 95       	ret

00000370 <gpioPortWrite>:

void gpioPortWrite(uint8_t u8_port, uint8_t u8_value)
{
     370:	df 93       	push	r29
     372:	cf 93       	push	r28
     374:	00 d0       	rcall	.+0      	; 0x376 <gpioPortWrite+0x6>
     376:	00 d0       	rcall	.+0      	; 0x378 <gpioPortWrite+0x8>
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	89 83       	std	Y+1, r24	; 0x01
     37e:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to assign the value to */
	switch(u8_port)
     380:	89 81       	ldd	r24, Y+1	; 0x01
     382:	28 2f       	mov	r18, r24
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	3c 83       	std	Y+4, r19	; 0x04
     388:	2b 83       	std	Y+3, r18	; 0x03
     38a:	8b 81       	ldd	r24, Y+3	; 0x03
     38c:	9c 81       	ldd	r25, Y+4	; 0x04
     38e:	81 30       	cpi	r24, 0x01	; 1
     390:	91 05       	cpc	r25, r1
     392:	d1 f0       	breq	.+52     	; 0x3c8 <gpioPortWrite+0x58>
     394:	2b 81       	ldd	r18, Y+3	; 0x03
     396:	3c 81       	ldd	r19, Y+4	; 0x04
     398:	22 30       	cpi	r18, 0x02	; 2
     39a:	31 05       	cpc	r19, r1
     39c:	2c f4       	brge	.+10     	; 0x3a8 <gpioPortWrite+0x38>
     39e:	8b 81       	ldd	r24, Y+3	; 0x03
     3a0:	9c 81       	ldd	r25, Y+4	; 0x04
     3a2:	00 97       	sbiw	r24, 0x00	; 0
     3a4:	61 f0       	breq	.+24     	; 0x3be <gpioPortWrite+0x4e>
     3a6:	1e c0       	rjmp	.+60     	; 0x3e4 <gpioPortWrite+0x74>
     3a8:	2b 81       	ldd	r18, Y+3	; 0x03
     3aa:	3c 81       	ldd	r19, Y+4	; 0x04
     3ac:	22 30       	cpi	r18, 0x02	; 2
     3ae:	31 05       	cpc	r19, r1
     3b0:	81 f0       	breq	.+32     	; 0x3d2 <gpioPortWrite+0x62>
     3b2:	8b 81       	ldd	r24, Y+3	; 0x03
     3b4:	9c 81       	ldd	r25, Y+4	; 0x04
     3b6:	83 30       	cpi	r24, 0x03	; 3
     3b8:	91 05       	cpc	r25, r1
     3ba:	81 f0       	breq	.+32     	; 0x3dc <gpioPortWrite+0x6c>
     3bc:	13 c0       	rjmp	.+38     	; 0x3e4 <gpioPortWrite+0x74>
	{
	case GPIOA:
		PORTA_DATA = u8_value;
     3be:	eb e3       	ldi	r30, 0x3B	; 59
     3c0:	f0 e0       	ldi	r31, 0x00	; 0
     3c2:	8a 81       	ldd	r24, Y+2	; 0x02
     3c4:	80 83       	st	Z, r24
     3c6:	0e c0       	rjmp	.+28     	; 0x3e4 <gpioPortWrite+0x74>
		break;
	case GPIOB:
		PORTB_DATA = u8_value;
     3c8:	e8 e3       	ldi	r30, 0x38	; 56
     3ca:	f0 e0       	ldi	r31, 0x00	; 0
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	80 83       	st	Z, r24
     3d0:	09 c0       	rjmp	.+18     	; 0x3e4 <gpioPortWrite+0x74>
		break;
	case GPIOC:
		PORTC_DATA = u8_value;
     3d2:	e5 e3       	ldi	r30, 0x35	; 53
     3d4:	f0 e0       	ldi	r31, 0x00	; 0
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	80 83       	st	Z, r24
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <gpioPortWrite+0x74>
		break;
	case GPIOD:
		PORTD_DATA = u8_value;
     3dc:	e2 e3       	ldi	r30, 0x32	; 50
     3de:	f0 e0       	ldi	r31, 0x00	; 0
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     3e4:	0f 90       	pop	r0
     3e6:	0f 90       	pop	r0
     3e8:	0f 90       	pop	r0
     3ea:	0f 90       	pop	r0
     3ec:	cf 91       	pop	r28
     3ee:	df 91       	pop	r29
     3f0:	08 95       	ret

000003f2 <gpioPortToggle>:

void gpioPortToggle(uint8_t u8_port)
{
     3f2:	df 93       	push	r29
     3f4:	cf 93       	push	r28
     3f6:	00 d0       	rcall	.+0      	; 0x3f8 <gpioPortToggle+0x6>
     3f8:	0f 92       	push	r0
     3fa:	cd b7       	in	r28, 0x3d	; 61
     3fc:	de b7       	in	r29, 0x3e	; 62
     3fe:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to toggle its value */
	switch(u8_port)
     400:	89 81       	ldd	r24, Y+1	; 0x01
     402:	28 2f       	mov	r18, r24
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	3b 83       	std	Y+3, r19	; 0x03
     408:	2a 83       	std	Y+2, r18	; 0x02
     40a:	8a 81       	ldd	r24, Y+2	; 0x02
     40c:	9b 81       	ldd	r25, Y+3	; 0x03
     40e:	81 30       	cpi	r24, 0x01	; 1
     410:	91 05       	cpc	r25, r1
     412:	e9 f0       	breq	.+58     	; 0x44e <gpioPortToggle+0x5c>
     414:	2a 81       	ldd	r18, Y+2	; 0x02
     416:	3b 81       	ldd	r19, Y+3	; 0x03
     418:	22 30       	cpi	r18, 0x02	; 2
     41a:	31 05       	cpc	r19, r1
     41c:	2c f4       	brge	.+10     	; 0x428 <gpioPortToggle+0x36>
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	9b 81       	ldd	r25, Y+3	; 0x03
     422:	00 97       	sbiw	r24, 0x00	; 0
     424:	61 f0       	breq	.+24     	; 0x43e <gpioPortToggle+0x4c>
     426:	2a c0       	rjmp	.+84     	; 0x47c <gpioPortToggle+0x8a>
     428:	2a 81       	ldd	r18, Y+2	; 0x02
     42a:	3b 81       	ldd	r19, Y+3	; 0x03
     42c:	22 30       	cpi	r18, 0x02	; 2
     42e:	31 05       	cpc	r19, r1
     430:	b1 f0       	breq	.+44     	; 0x45e <gpioPortToggle+0x6c>
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	83 30       	cpi	r24, 0x03	; 3
     438:	91 05       	cpc	r25, r1
     43a:	c9 f0       	breq	.+50     	; 0x46e <gpioPortToggle+0x7c>
     43c:	1f c0       	rjmp	.+62     	; 0x47c <gpioPortToggle+0x8a>
	{
	case GPIOA:
		PORTA_DATA ^= HIGH;
     43e:	ab e3       	ldi	r26, 0x3B	; 59
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	eb e3       	ldi	r30, 0x3B	; 59
     444:	f0 e0       	ldi	r31, 0x00	; 0
     446:	80 81       	ld	r24, Z
     448:	80 95       	com	r24
     44a:	8c 93       	st	X, r24
     44c:	17 c0       	rjmp	.+46     	; 0x47c <gpioPortToggle+0x8a>
		break;
	case GPIOB:
		PORTB_DATA ^= HIGH;
     44e:	a8 e3       	ldi	r26, 0x38	; 56
     450:	b0 e0       	ldi	r27, 0x00	; 0
     452:	e8 e3       	ldi	r30, 0x38	; 56
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	80 81       	ld	r24, Z
     458:	80 95       	com	r24
     45a:	8c 93       	st	X, r24
     45c:	0f c0       	rjmp	.+30     	; 0x47c <gpioPortToggle+0x8a>
		break;
	case GPIOC:
		PORTC_DATA ^= HIGH;
     45e:	a5 e3       	ldi	r26, 0x35	; 53
     460:	b0 e0       	ldi	r27, 0x00	; 0
     462:	e5 e3       	ldi	r30, 0x35	; 53
     464:	f0 e0       	ldi	r31, 0x00	; 0
     466:	80 81       	ld	r24, Z
     468:	80 95       	com	r24
     46a:	8c 93       	st	X, r24
     46c:	07 c0       	rjmp	.+14     	; 0x47c <gpioPortToggle+0x8a>
		break;
	case GPIOD:
		PORTD_DATA ^= HIGH;
     46e:	a2 e3       	ldi	r26, 0x32	; 50
     470:	b0 e0       	ldi	r27, 0x00	; 0
     472:	e2 e3       	ldi	r30, 0x32	; 50
     474:	f0 e0       	ldi	r31, 0x00	; 0
     476:	80 81       	ld	r24, Z
     478:	80 95       	com	r24
     47a:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     47c:	0f 90       	pop	r0
     47e:	0f 90       	pop	r0
     480:	0f 90       	pop	r0
     482:	cf 91       	pop	r28
     484:	df 91       	pop	r29
     486:	08 95       	ret

00000488 <gpioPortRead>:

uint8_t gpioPortRead(uint8_t u8_port)
{
     488:	df 93       	push	r29
     48a:	cf 93       	push	r28
     48c:	00 d0       	rcall	.+0      	; 0x48e <gpioPortRead+0x6>
     48e:	00 d0       	rcall	.+0      	; 0x490 <gpioPortRead+0x8>
     490:	cd b7       	in	r28, 0x3d	; 61
     492:	de b7       	in	r29, 0x3e	; 62
     494:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which port to be read */
	switch(u8_port)
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	28 2f       	mov	r18, r24
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	3c 83       	std	Y+4, r19	; 0x04
     49e:	2b 83       	std	Y+3, r18	; 0x03
     4a0:	8b 81       	ldd	r24, Y+3	; 0x03
     4a2:	9c 81       	ldd	r25, Y+4	; 0x04
     4a4:	81 30       	cpi	r24, 0x01	; 1
     4a6:	91 05       	cpc	r25, r1
     4a8:	d1 f0       	breq	.+52     	; 0x4de <gpioPortRead+0x56>
     4aa:	2b 81       	ldd	r18, Y+3	; 0x03
     4ac:	3c 81       	ldd	r19, Y+4	; 0x04
     4ae:	22 30       	cpi	r18, 0x02	; 2
     4b0:	31 05       	cpc	r19, r1
     4b2:	2c f4       	brge	.+10     	; 0x4be <gpioPortRead+0x36>
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	00 97       	sbiw	r24, 0x00	; 0
     4ba:	61 f0       	breq	.+24     	; 0x4d4 <gpioPortRead+0x4c>
     4bc:	1f c0       	rjmp	.+62     	; 0x4fc <gpioPortRead+0x74>
     4be:	2b 81       	ldd	r18, Y+3	; 0x03
     4c0:	3c 81       	ldd	r19, Y+4	; 0x04
     4c2:	22 30       	cpi	r18, 0x02	; 2
     4c4:	31 05       	cpc	r19, r1
     4c6:	81 f0       	breq	.+32     	; 0x4e8 <gpioPortRead+0x60>
     4c8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ca:	9c 81       	ldd	r25, Y+4	; 0x04
     4cc:	83 30       	cpi	r24, 0x03	; 3
     4ce:	91 05       	cpc	r25, r1
     4d0:	81 f0       	breq	.+32     	; 0x4f2 <gpioPortRead+0x6a>
     4d2:	14 c0       	rjmp	.+40     	; 0x4fc <gpioPortRead+0x74>
	{
	case GPIOA:
		return PORTA_PIN;
     4d4:	e9 e3       	ldi	r30, 0x39	; 57
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	90 81       	ld	r25, Z
     4da:	9a 83       	std	Y+2, r25	; 0x02
     4dc:	11 c0       	rjmp	.+34     	; 0x500 <gpioPortRead+0x78>
		break;
	case GPIOB:
		return PORTB_PIN;
     4de:	e6 e3       	ldi	r30, 0x36	; 54
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	20 81       	ld	r18, Z
     4e4:	2a 83       	std	Y+2, r18	; 0x02
     4e6:	0c c0       	rjmp	.+24     	; 0x500 <gpioPortRead+0x78>
		break;
	case GPIOC:
		return PORTC_PIN;
     4e8:	e3 e3       	ldi	r30, 0x33	; 51
     4ea:	f0 e0       	ldi	r31, 0x00	; 0
     4ec:	30 81       	ld	r19, Z
     4ee:	3a 83       	std	Y+2, r19	; 0x02
     4f0:	07 c0       	rjmp	.+14     	; 0x500 <gpioPortRead+0x78>
		break;
	case GPIOD:
		return PORTD_PIN;
     4f2:	e0 e3       	ldi	r30, 0x30	; 48
     4f4:	f0 e0       	ldi	r31, 0x00	; 0
     4f6:	80 81       	ld	r24, Z
     4f8:	8a 83       	std	Y+2, r24	; 0x02
     4fa:	02 c0       	rjmp	.+4      	; 0x500 <gpioPortRead+0x78>
		break;
	default:
		return ERROR;
     4fc:	9f ef       	ldi	r25, 0xFF	; 255
     4fe:	9a 83       	std	Y+2, r25	; 0x02
     500:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     502:	0f 90       	pop	r0
     504:	0f 90       	pop	r0
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	cf 91       	pop	r28
     50c:	df 91       	pop	r29
     50e:	08 95       	ret

00000510 <gpioPinDirection>:

void gpioPinDirection(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_direction)
{
     510:	df 93       	push	r29
     512:	cf 93       	push	r28
     514:	cd b7       	in	r28, 0x3d	; 61
     516:	de b7       	in	r29, 0x3e	; 62
     518:	29 97       	sbiw	r28, 0x09	; 9
     51a:	0f b6       	in	r0, 0x3f	; 63
     51c:	f8 94       	cli
     51e:	de bf       	out	0x3e, r29	; 62
     520:	0f be       	out	0x3f, r0	; 63
     522:	cd bf       	out	0x3d, r28	; 61
     524:	8b 83       	std	Y+3, r24	; 0x03
     526:	6c 83       	std	Y+4, r22	; 0x04
     528:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which direction is to be manipulated */
	uint8_t* pu8_portDirectionPointer = NULL;
     52a:	1a 82       	std	Y+2, r1	; 0x02
     52c:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     52e:	8b 81       	ldd	r24, Y+3	; 0x03
     530:	28 2f       	mov	r18, r24
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	39 87       	std	Y+9, r19	; 0x09
     536:	28 87       	std	Y+8, r18	; 0x08
     538:	88 85       	ldd	r24, Y+8	; 0x08
     53a:	99 85       	ldd	r25, Y+9	; 0x09
     53c:	81 30       	cpi	r24, 0x01	; 1
     53e:	91 05       	cpc	r25, r1
     540:	d1 f0       	breq	.+52     	; 0x576 <gpioPinDirection+0x66>
     542:	28 85       	ldd	r18, Y+8	; 0x08
     544:	39 85       	ldd	r19, Y+9	; 0x09
     546:	22 30       	cpi	r18, 0x02	; 2
     548:	31 05       	cpc	r19, r1
     54a:	2c f4       	brge	.+10     	; 0x556 <gpioPinDirection+0x46>
     54c:	88 85       	ldd	r24, Y+8	; 0x08
     54e:	99 85       	ldd	r25, Y+9	; 0x09
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	61 f0       	breq	.+24     	; 0x56c <gpioPinDirection+0x5c>
     554:	1e c0       	rjmp	.+60     	; 0x592 <gpioPinDirection+0x82>
     556:	28 85       	ldd	r18, Y+8	; 0x08
     558:	39 85       	ldd	r19, Y+9	; 0x09
     55a:	22 30       	cpi	r18, 0x02	; 2
     55c:	31 05       	cpc	r19, r1
     55e:	81 f0       	breq	.+32     	; 0x580 <gpioPinDirection+0x70>
     560:	88 85       	ldd	r24, Y+8	; 0x08
     562:	99 85       	ldd	r25, Y+9	; 0x09
     564:	83 30       	cpi	r24, 0x03	; 3
     566:	91 05       	cpc	r25, r1
     568:	81 f0       	breq	.+32     	; 0x58a <gpioPinDirection+0x7a>
     56a:	13 c0       	rjmp	.+38     	; 0x592 <gpioPinDirection+0x82>
	{
	case GPIOA:
		pu8_portDirectionPointer = (uint8_t*)(&PORTA_DIR);
     56c:	8a e3       	ldi	r24, 0x3A	; 58
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01
     574:	0e c0       	rjmp	.+28     	; 0x592 <gpioPinDirection+0x82>
		break;
	case GPIOB:
		pu8_portDirectionPointer = (uint8_t*)(&PORTB_DIR);
     576:	87 e3       	ldi	r24, 0x37	; 55
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01
     57e:	09 c0       	rjmp	.+18     	; 0x592 <gpioPinDirection+0x82>
		break;
	case GPIOC:
		pu8_portDirectionPointer = (uint8_t*)(&PORTC_DIR);
     580:	84 e3       	ldi	r24, 0x34	; 52
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	9a 83       	std	Y+2, r25	; 0x02
     586:	89 83       	std	Y+1, r24	; 0x01
     588:	04 c0       	rjmp	.+8      	; 0x592 <gpioPinDirection+0x82>
		break;
	case GPIOD:
		pu8_portDirectionPointer = (uint8_t*)(&PORTD_DIR);
     58a:	81 e3       	ldi	r24, 0x31	; 49
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	9a 83       	std	Y+2, r25	; 0x02
     590:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the pins are to be input or output */
	switch(u8_direction)
     592:	8d 81       	ldd	r24, Y+5	; 0x05
     594:	28 2f       	mov	r18, r24
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	3f 83       	std	Y+7, r19	; 0x07
     59a:	2e 83       	std	Y+6, r18	; 0x06
     59c:	8e 81       	ldd	r24, Y+6	; 0x06
     59e:	9f 81       	ldd	r25, Y+7	; 0x07
     5a0:	00 97       	sbiw	r24, 0x00	; 0
     5a2:	31 f0       	breq	.+12     	; 0x5b0 <gpioPinDirection+0xa0>
     5a4:	2e 81       	ldd	r18, Y+6	; 0x06
     5a6:	3f 81       	ldd	r19, Y+7	; 0x07
     5a8:	2f 3f       	cpi	r18, 0xFF	; 255
     5aa:	31 05       	cpc	r19, r1
     5ac:	61 f0       	breq	.+24     	; 0x5c6 <gpioPinDirection+0xb6>
     5ae:	13 c0       	rjmp	.+38     	; 0x5d6 <gpioPinDirection+0xc6>
	{
	case INPUT:
		*pu8_portDirectionPointer &= ~u8_pins;
     5b0:	e9 81       	ldd	r30, Y+1	; 0x01
     5b2:	fa 81       	ldd	r31, Y+2	; 0x02
     5b4:	80 81       	ld	r24, Z
     5b6:	98 2f       	mov	r25, r24
     5b8:	8c 81       	ldd	r24, Y+4	; 0x04
     5ba:	80 95       	com	r24
     5bc:	89 23       	and	r24, r25
     5be:	e9 81       	ldd	r30, Y+1	; 0x01
     5c0:	fa 81       	ldd	r31, Y+2	; 0x02
     5c2:	80 83       	st	Z, r24
     5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <gpioPinDirection+0xc6>
		break;
	case OUTPUT:
		*pu8_portDirectionPointer |= u8_pins;
     5c6:	e9 81       	ldd	r30, Y+1	; 0x01
     5c8:	fa 81       	ldd	r31, Y+2	; 0x02
     5ca:	90 81       	ld	r25, Z
     5cc:	8c 81       	ldd	r24, Y+4	; 0x04
     5ce:	89 2b       	or	r24, r25
     5d0:	e9 81       	ldd	r30, Y+1	; 0x01
     5d2:	fa 81       	ldd	r31, Y+2	; 0x02
     5d4:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     5d6:	29 96       	adiw	r28, 0x09	; 9
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
     5e2:	cf 91       	pop	r28
     5e4:	df 91       	pop	r29
     5e6:	08 95       	ret

000005e8 <gpioPinWrite>:

void gpioPinWrite(uint8_t u8_port, uint8_t u8_pins, uint8_t u8_value)
{
     5e8:	df 93       	push	r29
     5ea:	cf 93       	push	r28
     5ec:	cd b7       	in	r28, 0x3d	; 61
     5ee:	de b7       	in	r29, 0x3e	; 62
     5f0:	29 97       	sbiw	r28, 0x09	; 9
     5f2:	0f b6       	in	r0, 0x3f	; 63
     5f4:	f8 94       	cli
     5f6:	de bf       	out	0x3e, r29	; 62
     5f8:	0f be       	out	0x3f, r0	; 63
     5fa:	cd bf       	out	0x3d, r28	; 61
     5fc:	8b 83       	std	Y+3, r24	; 0x03
     5fe:	6c 83       	std	Y+4, r22	; 0x04
     600:	4d 83       	std	Y+5, r20	; 0x05
	/* A pointer to hold the address of the port which pins values are to be changed */
	uint8_t* pu8_portDataPointer = NULL;
     602:	1a 82       	std	Y+2, r1	; 0x02
     604:	19 82       	std	Y+1, r1	; 0x01

	/* A switch-case statement to assign the right port address to the pointer */
	switch(u8_port)
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	28 2f       	mov	r18, r24
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	39 87       	std	Y+9, r19	; 0x09
     60e:	28 87       	std	Y+8, r18	; 0x08
     610:	88 85       	ldd	r24, Y+8	; 0x08
     612:	99 85       	ldd	r25, Y+9	; 0x09
     614:	81 30       	cpi	r24, 0x01	; 1
     616:	91 05       	cpc	r25, r1
     618:	d1 f0       	breq	.+52     	; 0x64e <gpioPinWrite+0x66>
     61a:	28 85       	ldd	r18, Y+8	; 0x08
     61c:	39 85       	ldd	r19, Y+9	; 0x09
     61e:	22 30       	cpi	r18, 0x02	; 2
     620:	31 05       	cpc	r19, r1
     622:	2c f4       	brge	.+10     	; 0x62e <gpioPinWrite+0x46>
     624:	88 85       	ldd	r24, Y+8	; 0x08
     626:	99 85       	ldd	r25, Y+9	; 0x09
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	61 f0       	breq	.+24     	; 0x644 <gpioPinWrite+0x5c>
     62c:	1e c0       	rjmp	.+60     	; 0x66a <gpioPinWrite+0x82>
     62e:	28 85       	ldd	r18, Y+8	; 0x08
     630:	39 85       	ldd	r19, Y+9	; 0x09
     632:	22 30       	cpi	r18, 0x02	; 2
     634:	31 05       	cpc	r19, r1
     636:	81 f0       	breq	.+32     	; 0x658 <gpioPinWrite+0x70>
     638:	88 85       	ldd	r24, Y+8	; 0x08
     63a:	99 85       	ldd	r25, Y+9	; 0x09
     63c:	83 30       	cpi	r24, 0x03	; 3
     63e:	91 05       	cpc	r25, r1
     640:	81 f0       	breq	.+32     	; 0x662 <gpioPinWrite+0x7a>
     642:	13 c0       	rjmp	.+38     	; 0x66a <gpioPinWrite+0x82>
	{
	case GPIOA:
		pu8_portDataPointer = (uint8_t*)(&PORTA_DATA);
     644:	8b e3       	ldi	r24, 0x3B	; 59
     646:	90 e0       	ldi	r25, 0x00	; 0
     648:	9a 83       	std	Y+2, r25	; 0x02
     64a:	89 83       	std	Y+1, r24	; 0x01
     64c:	0e c0       	rjmp	.+28     	; 0x66a <gpioPinWrite+0x82>
		break;
	case GPIOB:
		pu8_portDataPointer = (uint8_t*)(&PORTB_DATA);
     64e:	88 e3       	ldi	r24, 0x38	; 56
     650:	90 e0       	ldi	r25, 0x00	; 0
     652:	9a 83       	std	Y+2, r25	; 0x02
     654:	89 83       	std	Y+1, r24	; 0x01
     656:	09 c0       	rjmp	.+18     	; 0x66a <gpioPinWrite+0x82>
		break;
	case GPIOC:
		pu8_portDataPointer = (uint8_t*)(&PORTC_DATA);
     658:	85 e3       	ldi	r24, 0x35	; 53
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	9a 83       	std	Y+2, r25	; 0x02
     65e:	89 83       	std	Y+1, r24	; 0x01
     660:	04 c0       	rjmp	.+8      	; 0x66a <gpioPinWrite+0x82>
		break;
	case GPIOD:
		pu8_portDataPointer = (uint8_t*)(&PORTD_DATA);
     662:	82 e3       	ldi	r24, 0x32	; 50
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	9a 83       	std	Y+2, r25	; 0x02
     668:	89 83       	std	Y+1, r24	; 0x01

		break;
	}

	/* A switch-case statement to decide whether the bits values are to be high or low */
	switch(u8_value)
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	28 2f       	mov	r18, r24
     66e:	30 e0       	ldi	r19, 0x00	; 0
     670:	3f 83       	std	Y+7, r19	; 0x07
     672:	2e 83       	std	Y+6, r18	; 0x06
     674:	8e 81       	ldd	r24, Y+6	; 0x06
     676:	9f 81       	ldd	r25, Y+7	; 0x07
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	31 f0       	breq	.+12     	; 0x688 <gpioPinWrite+0xa0>
     67c:	2e 81       	ldd	r18, Y+6	; 0x06
     67e:	3f 81       	ldd	r19, Y+7	; 0x07
     680:	2f 3f       	cpi	r18, 0xFF	; 255
     682:	31 05       	cpc	r19, r1
     684:	61 f0       	breq	.+24     	; 0x69e <gpioPinWrite+0xb6>
     686:	13 c0       	rjmp	.+38     	; 0x6ae <gpioPinWrite+0xc6>
	{
	case LOW:
		*pu8_portDataPointer &= ~u8_pins;
     688:	e9 81       	ldd	r30, Y+1	; 0x01
     68a:	fa 81       	ldd	r31, Y+2	; 0x02
     68c:	80 81       	ld	r24, Z
     68e:	98 2f       	mov	r25, r24
     690:	8c 81       	ldd	r24, Y+4	; 0x04
     692:	80 95       	com	r24
     694:	89 23       	and	r24, r25
     696:	e9 81       	ldd	r30, Y+1	; 0x01
     698:	fa 81       	ldd	r31, Y+2	; 0x02
     69a:	80 83       	st	Z, r24
     69c:	08 c0       	rjmp	.+16     	; 0x6ae <gpioPinWrite+0xc6>
		break;
	case HIGH:
		*pu8_portDataPointer |= u8_pins;
     69e:	e9 81       	ldd	r30, Y+1	; 0x01
     6a0:	fa 81       	ldd	r31, Y+2	; 0x02
     6a2:	90 81       	ld	r25, Z
     6a4:	8c 81       	ldd	r24, Y+4	; 0x04
     6a6:	89 2b       	or	r24, r25
     6a8:	e9 81       	ldd	r30, Y+1	; 0x01
     6aa:	fa 81       	ldd	r31, Y+2	; 0x02
     6ac:	80 83       	st	Z, r24
		break;
	default:

		break;
	}
}
     6ae:	29 96       	adiw	r28, 0x09	; 9
     6b0:	0f b6       	in	r0, 0x3f	; 63
     6b2:	f8 94       	cli
     6b4:	de bf       	out	0x3e, r29	; 62
     6b6:	0f be       	out	0x3f, r0	; 63
     6b8:	cd bf       	out	0x3d, r28	; 61
     6ba:	cf 91       	pop	r28
     6bc:	df 91       	pop	r29
     6be:	08 95       	ret

000006c0 <gpioPinToggle>:

void gpioPinToggle(uint8_t u8_port, uint8_t u8_pins)
{
     6c0:	df 93       	push	r29
     6c2:	cf 93       	push	r28
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <gpioPinToggle+0x6>
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <gpioPinToggle+0x8>
     6c8:	cd b7       	in	r28, 0x3d	; 61
     6ca:	de b7       	in	r29, 0x3e	; 62
     6cc:	89 83       	std	Y+1, r24	; 0x01
     6ce:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to toggle its pins */
	switch(u8_port)
     6d0:	89 81       	ldd	r24, Y+1	; 0x01
     6d2:	28 2f       	mov	r18, r24
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	3c 83       	std	Y+4, r19	; 0x04
     6d8:	2b 83       	std	Y+3, r18	; 0x03
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	81 30       	cpi	r24, 0x01	; 1
     6e0:	91 05       	cpc	r25, r1
     6e2:	f1 f0       	breq	.+60     	; 0x720 <gpioPinToggle+0x60>
     6e4:	2b 81       	ldd	r18, Y+3	; 0x03
     6e6:	3c 81       	ldd	r19, Y+4	; 0x04
     6e8:	22 30       	cpi	r18, 0x02	; 2
     6ea:	31 05       	cpc	r19, r1
     6ec:	2c f4       	brge	.+10     	; 0x6f8 <gpioPinToggle+0x38>
     6ee:	8b 81       	ldd	r24, Y+3	; 0x03
     6f0:	9c 81       	ldd	r25, Y+4	; 0x04
     6f2:	00 97       	sbiw	r24, 0x00	; 0
     6f4:	61 f0       	breq	.+24     	; 0x70e <gpioPinToggle+0x4e>
     6f6:	2e c0       	rjmp	.+92     	; 0x754 <gpioPinToggle+0x94>
     6f8:	2b 81       	ldd	r18, Y+3	; 0x03
     6fa:	3c 81       	ldd	r19, Y+4	; 0x04
     6fc:	22 30       	cpi	r18, 0x02	; 2
     6fe:	31 05       	cpc	r19, r1
     700:	c1 f0       	breq	.+48     	; 0x732 <gpioPinToggle+0x72>
     702:	8b 81       	ldd	r24, Y+3	; 0x03
     704:	9c 81       	ldd	r25, Y+4	; 0x04
     706:	83 30       	cpi	r24, 0x03	; 3
     708:	91 05       	cpc	r25, r1
     70a:	e1 f0       	breq	.+56     	; 0x744 <gpioPinToggle+0x84>
     70c:	23 c0       	rjmp	.+70     	; 0x754 <gpioPinToggle+0x94>
	{
	case GPIOA:
		PORTA_DATA ^= u8_pins;
     70e:	ab e3       	ldi	r26, 0x3B	; 59
     710:	b0 e0       	ldi	r27, 0x00	; 0
     712:	eb e3       	ldi	r30, 0x3B	; 59
     714:	f0 e0       	ldi	r31, 0x00	; 0
     716:	90 81       	ld	r25, Z
     718:	8a 81       	ldd	r24, Y+2	; 0x02
     71a:	89 27       	eor	r24, r25
     71c:	8c 93       	st	X, r24
     71e:	1a c0       	rjmp	.+52     	; 0x754 <gpioPinToggle+0x94>
		break;
	case GPIOB:
		PORTB_DATA ^= u8_pins;
     720:	a8 e3       	ldi	r26, 0x38	; 56
     722:	b0 e0       	ldi	r27, 0x00	; 0
     724:	e8 e3       	ldi	r30, 0x38	; 56
     726:	f0 e0       	ldi	r31, 0x00	; 0
     728:	90 81       	ld	r25, Z
     72a:	8a 81       	ldd	r24, Y+2	; 0x02
     72c:	89 27       	eor	r24, r25
     72e:	8c 93       	st	X, r24
     730:	11 c0       	rjmp	.+34     	; 0x754 <gpioPinToggle+0x94>
		break;
	case GPIOC:
		PORTC_DATA ^= u8_pins;
     732:	a5 e3       	ldi	r26, 0x35	; 53
     734:	b0 e0       	ldi	r27, 0x00	; 0
     736:	e5 e3       	ldi	r30, 0x35	; 53
     738:	f0 e0       	ldi	r31, 0x00	; 0
     73a:	90 81       	ld	r25, Z
     73c:	8a 81       	ldd	r24, Y+2	; 0x02
     73e:	89 27       	eor	r24, r25
     740:	8c 93       	st	X, r24
     742:	08 c0       	rjmp	.+16     	; 0x754 <gpioPinToggle+0x94>
		break;
	case GPIOD:
		PORTD_DATA ^= u8_pins;
     744:	a2 e3       	ldi	r26, 0x32	; 50
     746:	b0 e0       	ldi	r27, 0x00	; 0
     748:	e2 e3       	ldi	r30, 0x32	; 50
     74a:	f0 e0       	ldi	r31, 0x00	; 0
     74c:	90 81       	ld	r25, Z
     74e:	8a 81       	ldd	r24, Y+2	; 0x02
     750:	89 27       	eor	r24, r25
     752:	8c 93       	st	X, r24
		break;
	default:

		break;
	}
}
     754:	0f 90       	pop	r0
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	cf 91       	pop	r28
     75e:	df 91       	pop	r29
     760:	08 95       	ret

00000762 <gpioPinRead>:

uint8_t gpioPinRead(uint8_t u8_port, uint8_t u8_pin)
{
     762:	df 93       	push	r29
     764:	cf 93       	push	r28
     766:	cd b7       	in	r28, 0x3d	; 61
     768:	de b7       	in	r29, 0x3e	; 62
     76a:	29 97       	sbiw	r28, 0x09	; 9
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	f8 94       	cli
     770:	de bf       	out	0x3e, r29	; 62
     772:	0f be       	out	0x3f, r0	; 63
     774:	cd bf       	out	0x3d, r28	; 61
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which port to read its pin */
	switch(u8_port)
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	28 2f       	mov	r18, r24
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	3d 83       	std	Y+5, r19	; 0x05
     782:	2c 83       	std	Y+4, r18	; 0x04
     784:	8c 81       	ldd	r24, Y+4	; 0x04
     786:	9d 81       	ldd	r25, Y+5	; 0x05
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	91 05       	cpc	r25, r1
     78c:	19 f1       	breq	.+70     	; 0x7d4 <gpioPinRead+0x72>
     78e:	2c 81       	ldd	r18, Y+4	; 0x04
     790:	3d 81       	ldd	r19, Y+5	; 0x05
     792:	22 30       	cpi	r18, 0x02	; 2
     794:	31 05       	cpc	r19, r1
     796:	2c f4       	brge	.+10     	; 0x7a2 <gpioPinRead+0x40>
     798:	8c 81       	ldd	r24, Y+4	; 0x04
     79a:	9d 81       	ldd	r25, Y+5	; 0x05
     79c:	00 97       	sbiw	r24, 0x00	; 0
     79e:	61 f0       	breq	.+24     	; 0x7b8 <gpioPinRead+0x56>
     7a0:	43 c0       	rjmp	.+134    	; 0x828 <gpioPinRead+0xc6>
     7a2:	2c 81       	ldd	r18, Y+4	; 0x04
     7a4:	3d 81       	ldd	r19, Y+5	; 0x05
     7a6:	22 30       	cpi	r18, 0x02	; 2
     7a8:	31 05       	cpc	r19, r1
     7aa:	11 f1       	breq	.+68     	; 0x7f0 <gpioPinRead+0x8e>
     7ac:	8c 81       	ldd	r24, Y+4	; 0x04
     7ae:	9d 81       	ldd	r25, Y+5	; 0x05
     7b0:	83 30       	cpi	r24, 0x03	; 3
     7b2:	91 05       	cpc	r25, r1
     7b4:	59 f1       	breq	.+86     	; 0x80c <gpioPinRead+0xaa>
     7b6:	38 c0       	rjmp	.+112    	; 0x828 <gpioPinRead+0xc6>
	{
	case GPIOA:
		return ((PORTA_PIN & u8_pin)? 1:0);
     7b8:	e9 e3       	ldi	r30, 0x39	; 57
     7ba:	f0 e0       	ldi	r31, 0x00	; 0
     7bc:	90 81       	ld	r25, Z
     7be:	8a 81       	ldd	r24, Y+2	; 0x02
     7c0:	89 23       	and	r24, r25
     7c2:	8e 83       	std	Y+6, r24	; 0x06
     7c4:	9e 81       	ldd	r25, Y+6	; 0x06
     7c6:	99 23       	and	r25, r25
     7c8:	11 f0       	breq	.+4      	; 0x7ce <gpioPinRead+0x6c>
     7ca:	21 e0       	ldi	r18, 0x01	; 1
     7cc:	2e 83       	std	Y+6, r18	; 0x06
     7ce:	3e 81       	ldd	r19, Y+6	; 0x06
     7d0:	3b 83       	std	Y+3, r19	; 0x03
     7d2:	2c c0       	rjmp	.+88     	; 0x82c <gpioPinRead+0xca>
		break;
	case GPIOB:
		return ((PORTB_PIN & u8_pin)? 1:0);
     7d4:	e6 e3       	ldi	r30, 0x36	; 54
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	90 81       	ld	r25, Z
     7da:	8a 81       	ldd	r24, Y+2	; 0x02
     7dc:	89 23       	and	r24, r25
     7de:	8f 83       	std	Y+7, r24	; 0x07
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	88 23       	and	r24, r24
     7e4:	11 f0       	breq	.+4      	; 0x7ea <gpioPinRead+0x88>
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	9f 83       	std	Y+7, r25	; 0x07
     7ea:	2f 81       	ldd	r18, Y+7	; 0x07
     7ec:	2b 83       	std	Y+3, r18	; 0x03
     7ee:	1e c0       	rjmp	.+60     	; 0x82c <gpioPinRead+0xca>
		break;
	case GPIOC:
		return ((PORTC_PIN & u8_pin)? 1:0);
     7f0:	e3 e3       	ldi	r30, 0x33	; 51
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	90 81       	ld	r25, Z
     7f6:	8a 81       	ldd	r24, Y+2	; 0x02
     7f8:	89 23       	and	r24, r25
     7fa:	88 87       	std	Y+8, r24	; 0x08
     7fc:	38 85       	ldd	r19, Y+8	; 0x08
     7fe:	33 23       	and	r19, r19
     800:	11 f0       	breq	.+4      	; 0x806 <gpioPinRead+0xa4>
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	88 87       	std	Y+8, r24	; 0x08
     806:	98 85       	ldd	r25, Y+8	; 0x08
     808:	9b 83       	std	Y+3, r25	; 0x03
     80a:	10 c0       	rjmp	.+32     	; 0x82c <gpioPinRead+0xca>
		break;
	case GPIOD:
		return ((PORTD_PIN & u8_pin)? 1:0);
     80c:	e0 e3       	ldi	r30, 0x30	; 48
     80e:	f0 e0       	ldi	r31, 0x00	; 0
     810:	90 81       	ld	r25, Z
     812:	8a 81       	ldd	r24, Y+2	; 0x02
     814:	89 23       	and	r24, r25
     816:	89 87       	std	Y+9, r24	; 0x09
     818:	29 85       	ldd	r18, Y+9	; 0x09
     81a:	22 23       	and	r18, r18
     81c:	11 f0       	breq	.+4      	; 0x822 <gpioPinRead+0xc0>
     81e:	31 e0       	ldi	r19, 0x01	; 1
     820:	39 87       	std	Y+9, r19	; 0x09
     822:	89 85       	ldd	r24, Y+9	; 0x09
     824:	8b 83       	std	Y+3, r24	; 0x03
     826:	02 c0       	rjmp	.+4      	; 0x82c <gpioPinRead+0xca>
		break;
	default:
		return ERROR;
     828:	9f ef       	ldi	r25, 0xFF	; 255
     82a:	9b 83       	std	Y+3, r25	; 0x03
     82c:	8b 81       	ldd	r24, Y+3	; 0x03
		break;
	}
}
     82e:	29 96       	adiw	r28, 0x09	; 9
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	cf 91       	pop	r28
     83c:	df 91       	pop	r29
     83e:	08 95       	ret

00000840 <__vector_1>:
extern uint8_t lastflag;

/*- INTERRUPT APIs IMPLEMENTATION --------------------------*/

void EXTERNAL_INTERRUPT0 (void)
{
     840:	78 94       	sei
     842:	1f 92       	push	r1
     844:	0f 92       	push	r0
     846:	0f b6       	in	r0, 0x3f	; 63
     848:	0f 92       	push	r0
     84a:	11 24       	eor	r1, r1
     84c:	df 93       	push	r29
     84e:	cf 93       	push	r28
     850:	cd b7       	in	r28, 0x3d	; 61
     852:	de b7       	in	r29, 0x3e	; 62

}
     854:	cf 91       	pop	r28
     856:	df 91       	pop	r29
     858:	0f 90       	pop	r0
     85a:	0f be       	out	0x3f, r0	; 63
     85c:	0f 90       	pop	r0
     85e:	1f 90       	pop	r1
     860:	18 95       	reti

00000862 <__vector_2>:

void EXTERNAL_INTERRUPT1 (void)
{
     862:	78 94       	sei
     864:	1f 92       	push	r1
     866:	0f 92       	push	r0
     868:	0f b6       	in	r0, 0x3f	; 63
     86a:	0f 92       	push	r0
     86c:	11 24       	eor	r1, r1
     86e:	df 93       	push	r29
     870:	cf 93       	push	r28
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62

}
     876:	cf 91       	pop	r28
     878:	df 91       	pop	r29
     87a:	0f 90       	pop	r0
     87c:	0f be       	out	0x3f, r0	; 63
     87e:	0f 90       	pop	r0
     880:	1f 90       	pop	r1
     882:	18 95       	reti

00000884 <__vector_3>:

void EXTERNAL_INTERRUPT2 (void)
{
     884:	78 94       	sei
     886:	1f 92       	push	r1
     888:	0f 92       	push	r0
     88a:	0f b6       	in	r0, 0x3f	; 63
     88c:	0f 92       	push	r0
     88e:	11 24       	eor	r1, r1
     890:	df 93       	push	r29
     892:	cf 93       	push	r28
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62

}
     898:	cf 91       	pop	r28
     89a:	df 91       	pop	r29
     89c:	0f 90       	pop	r0
     89e:	0f be       	out	0x3f, r0	; 63
     8a0:	0f 90       	pop	r0
     8a2:	1f 90       	pop	r1
     8a4:	18 95       	reti

000008a6 <__vector_10>:

void TIMER0_CTC_MODE_INTERRUPT (void)
{
     8a6:	78 94       	sei
     8a8:	1f 92       	push	r1
     8aa:	0f 92       	push	r0
     8ac:	0f b6       	in	r0, 0x3f	; 63
     8ae:	0f 92       	push	r0
     8b0:	11 24       	eor	r1, r1
     8b2:	2f 93       	push	r18
     8b4:	3f 93       	push	r19
     8b6:	4f 93       	push	r20
     8b8:	5f 93       	push	r21
     8ba:	6f 93       	push	r22
     8bc:	7f 93       	push	r23
     8be:	8f 93       	push	r24
     8c0:	9f 93       	push	r25
     8c2:	af 93       	push	r26
     8c4:	bf 93       	push	r27
     8c6:	ef 93       	push	r30
     8c8:	ff 93       	push	r31
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
	// testing motor control :-
	gu16_globalInterruptVariable++;
     8d2:	80 91 64 00 	lds	r24, 0x0064
     8d6:	90 91 65 00 	lds	r25, 0x0065
     8da:	01 96       	adiw	r24, 0x01	; 1
     8dc:	90 93 65 00 	sts	0x0065, r25
     8e0:	80 93 64 00 	sts	0x0064, r24

	if(gu16_globalInterruptVariable % 100 == gu8_dutyCycle)
     8e4:	80 91 64 00 	lds	r24, 0x0064
     8e8:	90 91 65 00 	lds	r25, 0x0065
     8ec:	24 e6       	ldi	r18, 0x64	; 100
     8ee:	30 e0       	ldi	r19, 0x00	; 0
     8f0:	b9 01       	movw	r22, r18
     8f2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     8f6:	9c 01       	movw	r18, r24
     8f8:	80 91 63 00 	lds	r24, 0x0063
     8fc:	88 2f       	mov	r24, r24
     8fe:	90 e0       	ldi	r25, 0x00	; 0
     900:	28 17       	cp	r18, r24
     902:	39 07       	cpc	r19, r25
     904:	91 f4       	brne	.+36     	; 0x92a <__vector_10+0x84>
	{
		gpioPinWrite(GPIOD, BIT2, LOW);
     906:	83 e0       	ldi	r24, 0x03	; 3
     908:	64 e0       	ldi	r22, 0x04	; 4
     90a:	40 e0       	ldi	r20, 0x00	; 0
     90c:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		if(gu8_flag != 2)
     910:	80 91 68 00 	lds	r24, 0x0068
     914:	90 91 69 00 	lds	r25, 0x0069
     918:	82 30       	cpi	r24, 0x02	; 2
     91a:	91 05       	cpc	r25, r1
     91c:	59 f1       	breq	.+86     	; 0x974 <__vector_10+0xce>
			gpioPinWrite(GPIOD, BIT6, LOW);
     91e:	83 e0       	ldi	r24, 0x03	; 3
     920:	60 e4       	ldi	r22, 0x40	; 64
     922:	40 e0       	ldi	r20, 0x00	; 0
     924:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     928:	25 c0       	rjmp	.+74     	; 0x974 <__vector_10+0xce>
	}else if(gu16_globalInterruptVariable % 100 == 0)
     92a:	80 91 64 00 	lds	r24, 0x0064
     92e:	90 91 65 00 	lds	r25, 0x0065
     932:	24 e6       	ldi	r18, 0x64	; 100
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	b9 01       	movw	r22, r18
     938:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <__udivmodhi4>
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	d1 f4       	brne	.+52     	; 0x974 <__vector_10+0xce>
	{
		gpioPinWrite(GPIOD, BIT2, HIGH);
     940:	83 e0       	ldi	r24, 0x03	; 3
     942:	64 e0       	ldi	r22, 0x04	; 4
     944:	4f ef       	ldi	r20, 0xFF	; 255
     946:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		if(gu8_flag != 2)
     94a:	80 91 68 00 	lds	r24, 0x0068
     94e:	90 91 69 00 	lds	r25, 0x0069
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	91 05       	cpc	r25, r1
     956:	29 f0       	breq	.+10     	; 0x962 <__vector_10+0xbc>
			gpioPinWrite(GPIOD, BIT6, HIGH);
     958:	83 e0       	ldi	r24, 0x03	; 3
     95a:	60 e4       	ldi	r22, 0x40	; 64
     95c:	4f ef       	ldi	r20, 0xFF	; 255
     95e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gu16_globalInterruptVariable = 0;
     962:	10 92 65 00 	sts	0x0065, r1
     966:	10 92 64 00 	sts	0x0064, r1
		if(lastflag == 1)
     96a:	80 91 62 00 	lds	r24, 0x0062
     96e:	81 30       	cpi	r24, 0x01	; 1
     970:	09 f4       	brne	.+2      	; 0x974 <__vector_10+0xce>
		{
			cli();
     972:	f8 94       	cli
		}
	}

	gu16_test++;
     974:	80 91 66 00 	lds	r24, 0x0066
     978:	90 91 67 00 	lds	r25, 0x0067
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	90 93 67 00 	sts	0x0067, r25
     982:	80 93 66 00 	sts	0x0066, r24

	if(gu16_test == 650)
     986:	80 91 66 00 	lds	r24, 0x0066
     98a:	90 91 67 00 	lds	r25, 0x0067
     98e:	22 e0       	ldi	r18, 0x02	; 2
     990:	8a 38       	cpi	r24, 0x8A	; 138
     992:	92 07       	cpc	r25, r18
     994:	39 f5       	brne	.+78     	; 0x9e4 <__vector_10+0x13e>
	{
		if(gu8_flag == 0)
     996:	80 91 68 00 	lds	r24, 0x0068
     99a:	90 91 69 00 	lds	r25, 0x0069
     99e:	00 97       	sbiw	r24, 0x00	; 0
     9a0:	31 f4       	brne	.+12     	; 0x9ae <__vector_10+0x108>
			gu8_dutyCycle++;
     9a2:	80 91 63 00 	lds	r24, 0x0063
     9a6:	8f 5f       	subi	r24, 0xFF	; 255
     9a8:	80 93 63 00 	sts	0x0063, r24
     9ac:	17 c0       	rjmp	.+46     	; 0x9dc <__vector_10+0x136>
		else if(gu8_flag == 1)
     9ae:	80 91 68 00 	lds	r24, 0x0068
     9b2:	90 91 69 00 	lds	r25, 0x0069
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	91 05       	cpc	r25, r1
     9ba:	31 f4       	brne	.+12     	; 0x9c8 <__vector_10+0x122>
			gu8_dutyCycle--;
     9bc:	80 91 63 00 	lds	r24, 0x0063
     9c0:	81 50       	subi	r24, 0x01	; 1
     9c2:	80 93 63 00 	sts	0x0063, r24
     9c6:	0a c0       	rjmp	.+20     	; 0x9dc <__vector_10+0x136>
		else if(gu8_flag == 2)
     9c8:	80 91 68 00 	lds	r24, 0x0068
     9cc:	90 91 69 00 	lds	r25, 0x0069
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	91 05       	cpc	r25, r1
     9d4:	19 f4       	brne	.+6      	; 0x9dc <__vector_10+0x136>
			lastflag = 1;
     9d6:	81 e0       	ldi	r24, 0x01	; 1
     9d8:	80 93 62 00 	sts	0x0062, r24
		gu16_test = 0;
     9dc:	10 92 67 00 	sts	0x0067, r1
     9e0:	10 92 66 00 	sts	0x0066, r1
	}

	if(gu8_dutyCycle >= 100 && gu8_flag == 0)
     9e4:	80 91 63 00 	lds	r24, 0x0063
     9e8:	84 36       	cpi	r24, 0x64	; 100
     9ea:	a8 f0       	brcs	.+42     	; 0xa16 <__vector_10+0x170>
     9ec:	80 91 68 00 	lds	r24, 0x0068
     9f0:	90 91 69 00 	lds	r25, 0x0069
     9f4:	00 97       	sbiw	r24, 0x00	; 0
     9f6:	79 f4       	brne	.+30     	; 0xa16 <__vector_10+0x170>
	{
		gu8_flag = 1;
     9f8:	81 e0       	ldi	r24, 0x01	; 1
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	90 93 69 00 	sts	0x0069, r25
     a00:	80 93 68 00 	sts	0x0068, r24
		cli();
     a04:	f8 94       	cli
		softwareDelayMs(2000);
     a06:	60 ed       	ldi	r22, 0xD0	; 208
     a08:	77 e0       	ldi	r23, 0x07	; 7
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
		sei();
     a12:	78 94       	sei
     a14:	1b c0       	rjmp	.+54     	; 0xa4c <__vector_10+0x1a6>
	}
	else if(gu8_dutyCycle <= 0 && gu8_flag == 1)
     a16:	80 91 63 00 	lds	r24, 0x0063
     a1a:	88 23       	and	r24, r24
     a1c:	b9 f4       	brne	.+46     	; 0xa4c <__vector_10+0x1a6>
     a1e:	80 91 68 00 	lds	r24, 0x0068
     a22:	90 91 69 00 	lds	r25, 0x0069
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	91 05       	cpc	r25, r1
     a2a:	81 f4       	brne	.+32     	; 0xa4c <__vector_10+0x1a6>
	{
		gu8_flag = 2;
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	90 93 69 00 	sts	0x0069, r25
     a34:	80 93 68 00 	sts	0x0068, r24
		gu8_dutyCycle = 10;
     a38:	8a e0       	ldi	r24, 0x0A	; 10
     a3a:	80 93 63 00 	sts	0x0063, r24
		gpioPinWrite(GPIOD, BIT6, LOW);
     a3e:	83 e0       	ldi	r24, 0x03	; 3
     a40:	60 e4       	ldi	r22, 0x40	; 64
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		cli();
     a48:	f8 94       	cli
//		softwareDelayMs(2000);
		sei();
     a4a:	78 94       	sei
	}
}
     a4c:	cf 91       	pop	r28
     a4e:	df 91       	pop	r29
     a50:	ff 91       	pop	r31
     a52:	ef 91       	pop	r30
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <__vector_11>:

void TIMER0_OVF_MODE_INTERRUPT (void)
{
     a72:	78 94       	sei
     a74:	1f 92       	push	r1
     a76:	0f 92       	push	r0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	0f 92       	push	r0
     a7c:	11 24       	eor	r1, r1
     a7e:	df 93       	push	r29
     a80:	cf 93       	push	r28
     a82:	cd b7       	in	r28, 0x3d	; 61
     a84:	de b7       	in	r29, 0x3e	; 62

}
     a86:	cf 91       	pop	r28
     a88:	df 91       	pop	r29
     a8a:	0f 90       	pop	r0
     a8c:	0f be       	out	0x3f, r0	; 63
     a8e:	0f 90       	pop	r0
     a90:	1f 90       	pop	r1
     a92:	18 95       	reti

00000a94 <__vector_6>:

void TIMER1_ICU_MODE_INTERRUPT (void)
{
     a94:	78 94       	sei
     a96:	1f 92       	push	r1
     a98:	0f 92       	push	r0
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	0f 92       	push	r0
     a9e:	11 24       	eor	r1, r1
     aa0:	df 93       	push	r29
     aa2:	cf 93       	push	r28
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62

}
     aa8:	cf 91       	pop	r28
     aaa:	df 91       	pop	r29
     aac:	0f 90       	pop	r0
     aae:	0f be       	out	0x3f, r0	; 63
     ab0:	0f 90       	pop	r0
     ab2:	1f 90       	pop	r1
     ab4:	18 95       	reti

00000ab6 <__vector_7>:

void TIMER1_CTC_A_MODE_INTERRUPT (void)
{
     ab6:	78 94       	sei
     ab8:	1f 92       	push	r1
     aba:	0f 92       	push	r0
     abc:	0f b6       	in	r0, 0x3f	; 63
     abe:	0f 92       	push	r0
     ac0:	11 24       	eor	r1, r1
     ac2:	df 93       	push	r29
     ac4:	cf 93       	push	r28
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	0f 90       	pop	r0
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	0f 90       	pop	r0
     ad4:	1f 90       	pop	r1
     ad6:	18 95       	reti

00000ad8 <__vector_8>:

void TIMER1_CTC_B_MODE_INTERRUPT (void)
{
     ad8:	78 94       	sei
     ada:	1f 92       	push	r1
     adc:	0f 92       	push	r0
     ade:	0f b6       	in	r0, 0x3f	; 63
     ae0:	0f 92       	push	r0
     ae2:	11 24       	eor	r1, r1
     ae4:	df 93       	push	r29
     ae6:	cf 93       	push	r28
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
}
     aec:	cf 91       	pop	r28
     aee:	df 91       	pop	r29
     af0:	0f 90       	pop	r0
     af2:	0f be       	out	0x3f, r0	; 63
     af4:	0f 90       	pop	r0
     af6:	1f 90       	pop	r1
     af8:	18 95       	reti

00000afa <__vector_9>:

void TIMER1_OVF_MODE_INTERRUPT (void)
{
     afa:	78 94       	sei
     afc:	1f 92       	push	r1
     afe:	0f 92       	push	r0
     b00:	0f b6       	in	r0, 0x3f	; 63
     b02:	0f 92       	push	r0
     b04:	11 24       	eor	r1, r1
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
//	Led_Toggle(LED_0);
//	timer1Set(49911);
}
     b0e:	cf 91       	pop	r28
     b10:	df 91       	pop	r29
     b12:	0f 90       	pop	r0
     b14:	0f be       	out	0x3f, r0	; 63
     b16:	0f 90       	pop	r0
     b18:	1f 90       	pop	r1
     b1a:	18 95       	reti

00000b1c <__vector_4>:

void TIMER2_CTC_MODE_INTERRUPT (void)
{
     b1c:	78 94       	sei
     b1e:	1f 92       	push	r1
     b20:	0f 92       	push	r0
     b22:	0f b6       	in	r0, 0x3f	; 63
     b24:	0f 92       	push	r0
     b26:	11 24       	eor	r1, r1
     b28:	df 93       	push	r29
     b2a:	cf 93       	push	r28
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
//	if(gu16_globalInterruptVariable == 125)
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}
}
     b30:	cf 91       	pop	r28
     b32:	df 91       	pop	r29
     b34:	0f 90       	pop	r0
     b36:	0f be       	out	0x3f, r0	; 63
     b38:	0f 90       	pop	r0
     b3a:	1f 90       	pop	r1
     b3c:	18 95       	reti

00000b3e <__vector_5>:

void TIMER2_OVF_MODE_INTERRUPT (void)
{
     b3e:	78 94       	sei
     b40:	1f 92       	push	r1
     b42:	0f 92       	push	r0
     b44:	0f b6       	in	r0, 0x3f	; 63
     b46:	0f 92       	push	r0
     b48:	11 24       	eor	r1, r1
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
//	if(gu16_globalInterruptVariable == 250)
//	{
//		Led_Toggle(LED_0);
//		gu16_globalInterruptVariable = 0;
//	}
}
     b52:	cf 91       	pop	r28
     b54:	df 91       	pop	r29
     b56:	0f 90       	pop	r0
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	0f 90       	pop	r0
     b5c:	1f 90       	pop	r1
     b5e:	18 95       	reti

00000b60 <__vector_12>:

void SPI_STC_INTERRUPT (void)
{
     b60:	78 94       	sei
     b62:	1f 92       	push	r1
     b64:	0f 92       	push	r0
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	0f 92       	push	r0
     b6a:	11 24       	eor	r1, r1
     b6c:	df 93       	push	r29
     b6e:	cf 93       	push	r28
     b70:	cd b7       	in	r28, 0x3d	; 61
     b72:	de b7       	in	r29, 0x3e	; 62

}
     b74:	cf 91       	pop	r28
     b76:	df 91       	pop	r29
     b78:	0f 90       	pop	r0
     b7a:	0f be       	out	0x3f, r0	; 63
     b7c:	0f 90       	pop	r0
     b7e:	1f 90       	pop	r1
     b80:	18 95       	reti

00000b82 <__vector_13>:

void USART_RXC_INTERRUPT (void)
{
     b82:	78 94       	sei
     b84:	1f 92       	push	r1
     b86:	0f 92       	push	r0
     b88:	0f b6       	in	r0, 0x3f	; 63
     b8a:	0f 92       	push	r0
     b8c:	11 24       	eor	r1, r1
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62

}
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	0f 90       	pop	r0
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	0f 90       	pop	r0
     ba0:	1f 90       	pop	r1
     ba2:	18 95       	reti

00000ba4 <__vector_14>:

void USART_UDRE_INTERRUPT (void)
{
     ba4:	78 94       	sei
     ba6:	1f 92       	push	r1
     ba8:	0f 92       	push	r0
     baa:	0f b6       	in	r0, 0x3f	; 63
     bac:	0f 92       	push	r0
     bae:	11 24       	eor	r1, r1
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62

}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	0f 90       	pop	r0
     bbe:	0f be       	out	0x3f, r0	; 63
     bc0:	0f 90       	pop	r0
     bc2:	1f 90       	pop	r1
     bc4:	18 95       	reti

00000bc6 <__vector_15>:

void USART_TXC_INTERRUPT (void)
{
     bc6:	78 94       	sei
     bc8:	1f 92       	push	r1
     bca:	0f 92       	push	r0
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	0f 92       	push	r0
     bd0:	11 24       	eor	r1, r1
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62

}
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	0f 90       	pop	r0
     be0:	0f be       	out	0x3f, r0	; 63
     be2:	0f 90       	pop	r0
     be4:	1f 90       	pop	r1
     be6:	18 95       	reti

00000be8 <__vector_16>:

void ADC_INTERRUPT (void)
{
     be8:	78 94       	sei
     bea:	1f 92       	push	r1
     bec:	0f 92       	push	r0
     bee:	0f b6       	in	r0, 0x3f	; 63
     bf0:	0f 92       	push	r0
     bf2:	11 24       	eor	r1, r1
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62

}
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	0f 90       	pop	r0
     c02:	0f be       	out	0x3f, r0	; 63
     c04:	0f 90       	pop	r0
     c06:	1f 90       	pop	r1
     c08:	18 95       	reti

00000c0a <__vector_17>:

void EE_RDY_INTERRUPT (void)
{
     c0a:	78 94       	sei
     c0c:	1f 92       	push	r1
     c0e:	0f 92       	push	r0
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	0f 92       	push	r0
     c14:	11 24       	eor	r1, r1
     c16:	df 93       	push	r29
     c18:	cf 93       	push	r28
     c1a:	cd b7       	in	r28, 0x3d	; 61
     c1c:	de b7       	in	r29, 0x3e	; 62

}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <__vector_18>:

void ANA_COMP_INTERRUPT (void)
{
     c2c:	78 94       	sei
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	df 93       	push	r29
     c3a:	cf 93       	push	r28
     c3c:	cd b7       	in	r28, 0x3d	; 61
     c3e:	de b7       	in	r29, 0x3e	; 62

}
     c40:	cf 91       	pop	r28
     c42:	df 91       	pop	r29
     c44:	0f 90       	pop	r0
     c46:	0f be       	out	0x3f, r0	; 63
     c48:	0f 90       	pop	r0
     c4a:	1f 90       	pop	r1
     c4c:	18 95       	reti

00000c4e <__vector_19>:

void TWI_INTERRUPT (void)
{
     c4e:	78 94       	sei
     c50:	1f 92       	push	r1
     c52:	0f 92       	push	r0
     c54:	0f b6       	in	r0, 0x3f	; 63
     c56:	0f 92       	push	r0
     c58:	11 24       	eor	r1, r1
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62

}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	0f 90       	pop	r0
     c68:	0f be       	out	0x3f, r0	; 63
     c6a:	0f 90       	pop	r0
     c6c:	1f 90       	pop	r1
     c6e:	18 95       	reti

00000c70 <__vector_20>:

void SPM_RDY_INTERRUPT (void)
{
     c70:	78 94       	sei
     c72:	1f 92       	push	r1
     c74:	0f 92       	push	r0
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	0f 92       	push	r0
     c7a:	11 24       	eor	r1, r1
     c7c:	df 93       	push	r29
     c7e:	cf 93       	push	r28
     c80:	cd b7       	in	r28, 0x3d	; 61
     c82:	de b7       	in	r29, 0x3e	; 62

}
     c84:	cf 91       	pop	r28
     c86:	df 91       	pop	r29
     c88:	0f 90       	pop	r0
     c8a:	0f be       	out	0x3f, r0	; 63
     c8c:	0f 90       	pop	r0
     c8e:	1f 90       	pop	r1
     c90:	18 95       	reti

00000c92 <Led_Init>:
#include "ledConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void Led_Init(En_LedNumber_t en_led_id)
{
     c92:	df 93       	push	r29
     c94:	cf 93       	push	r28
     c96:	00 d0       	rcall	.+0      	; 0xc98 <Led_Init+0x6>
     c98:	0f 92       	push	r0
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be initialized */
	switch(en_led_id)
     ca0:	89 81       	ldd	r24, Y+1	; 0x01
     ca2:	28 2f       	mov	r18, r24
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	3b 83       	std	Y+3, r19	; 0x03
     ca8:	2a 83       	std	Y+2, r18	; 0x02
     caa:	8a 81       	ldd	r24, Y+2	; 0x02
     cac:	9b 81       	ldd	r25, Y+3	; 0x03
     cae:	81 30       	cpi	r24, 0x01	; 1
     cb0:	91 05       	cpc	r25, r1
     cb2:	d9 f0       	breq	.+54     	; 0xcea <Led_Init+0x58>
     cb4:	2a 81       	ldd	r18, Y+2	; 0x02
     cb6:	3b 81       	ldd	r19, Y+3	; 0x03
     cb8:	22 30       	cpi	r18, 0x02	; 2
     cba:	31 05       	cpc	r19, r1
     cbc:	2c f4       	brge	.+10     	; 0xcc8 <Led_Init+0x36>
     cbe:	8a 81       	ldd	r24, Y+2	; 0x02
     cc0:	9b 81       	ldd	r25, Y+3	; 0x03
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	61 f0       	breq	.+24     	; 0xcde <Led_Init+0x4c>
     cc6:	22 c0       	rjmp	.+68     	; 0xd0c <Led_Init+0x7a>
     cc8:	2a 81       	ldd	r18, Y+2	; 0x02
     cca:	3b 81       	ldd	r19, Y+3	; 0x03
     ccc:	22 30       	cpi	r18, 0x02	; 2
     cce:	31 05       	cpc	r19, r1
     cd0:	91 f0       	breq	.+36     	; 0xcf6 <Led_Init+0x64>
     cd2:	8a 81       	ldd	r24, Y+2	; 0x02
     cd4:	9b 81       	ldd	r25, Y+3	; 0x03
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	91 05       	cpc	r25, r1
     cda:	99 f0       	breq	.+38     	; 0xd02 <Led_Init+0x70>
     cdc:	17 c0       	rjmp	.+46     	; 0xd0c <Led_Init+0x7a>
	{
	case LED_0:
		gpioPinDirection(LED_0_GPIO, LED_0_BIT, OUTPUT);
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	60 e1       	ldi	r22, 0x10	; 16
     ce2:	4f ef       	ldi	r20, 0xFF	; 255
     ce4:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
     ce8:	11 c0       	rjmp	.+34     	; 0xd0c <Led_Init+0x7a>
		break;
	case LED_1:
		gpioPinDirection(LED_1_GPIO, LED_1_BIT, OUTPUT);
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	60 e2       	ldi	r22, 0x20	; 32
     cee:	4f ef       	ldi	r20, 0xFF	; 255
     cf0:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
     cf4:	0b c0       	rjmp	.+22     	; 0xd0c <Led_Init+0x7a>
		break;
	case LED_2:
		gpioPinDirection(LED_2_GPIO, LED_2_BIT, OUTPUT);
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	60 e4       	ldi	r22, 0x40	; 64
     cfa:	4f ef       	ldi	r20, 0xFF	; 255
     cfc:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
     d00:	05 c0       	rjmp	.+10     	; 0xd0c <Led_Init+0x7a>
		break;
	case LED_3:
		gpioPinDirection(LED_3_GPIO, LED_3_BIT, OUTPUT);
     d02:	81 e0       	ldi	r24, 0x01	; 1
     d04:	60 e8       	ldi	r22, 0x80	; 128
     d06:	4f ef       	ldi	r20, 0xFF	; 255
     d08:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		break;
	default:

		break;
	}
}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	0f 90       	pop	r0
     d12:	cf 91       	pop	r28
     d14:	df 91       	pop	r29
     d16:	08 95       	ret

00000d18 <Led_On>:

void Led_On(En_LedNumber_t en_led_id)
{
     d18:	df 93       	push	r29
     d1a:	cf 93       	push	r28
     d1c:	00 d0       	rcall	.+0      	; 0xd1e <Led_On+0x6>
     d1e:	0f 92       	push	r0
     d20:	cd b7       	in	r28, 0x3d	; 61
     d22:	de b7       	in	r29, 0x3e	; 62
     d24:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned on */
	switch(en_led_id)
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	3b 83       	std	Y+3, r19	; 0x03
     d2e:	2a 83       	std	Y+2, r18	; 0x02
     d30:	8a 81       	ldd	r24, Y+2	; 0x02
     d32:	9b 81       	ldd	r25, Y+3	; 0x03
     d34:	81 30       	cpi	r24, 0x01	; 1
     d36:	91 05       	cpc	r25, r1
     d38:	d9 f0       	breq	.+54     	; 0xd70 <Led_On+0x58>
     d3a:	2a 81       	ldd	r18, Y+2	; 0x02
     d3c:	3b 81       	ldd	r19, Y+3	; 0x03
     d3e:	22 30       	cpi	r18, 0x02	; 2
     d40:	31 05       	cpc	r19, r1
     d42:	2c f4       	brge	.+10     	; 0xd4e <Led_On+0x36>
     d44:	8a 81       	ldd	r24, Y+2	; 0x02
     d46:	9b 81       	ldd	r25, Y+3	; 0x03
     d48:	00 97       	sbiw	r24, 0x00	; 0
     d4a:	61 f0       	breq	.+24     	; 0xd64 <Led_On+0x4c>
     d4c:	22 c0       	rjmp	.+68     	; 0xd92 <Led_On+0x7a>
     d4e:	2a 81       	ldd	r18, Y+2	; 0x02
     d50:	3b 81       	ldd	r19, Y+3	; 0x03
     d52:	22 30       	cpi	r18, 0x02	; 2
     d54:	31 05       	cpc	r19, r1
     d56:	91 f0       	breq	.+36     	; 0xd7c <Led_On+0x64>
     d58:	8a 81       	ldd	r24, Y+2	; 0x02
     d5a:	9b 81       	ldd	r25, Y+3	; 0x03
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	99 f0       	breq	.+38     	; 0xd88 <Led_On+0x70>
     d62:	17 c0       	rjmp	.+46     	; 0xd92 <Led_On+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, HIGH);
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	60 e1       	ldi	r22, 0x10	; 16
     d68:	4f ef       	ldi	r20, 0xFF	; 255
     d6a:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     d6e:	11 c0       	rjmp	.+34     	; 0xd92 <Led_On+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, HIGH);
     d70:	81 e0       	ldi	r24, 0x01	; 1
     d72:	60 e2       	ldi	r22, 0x20	; 32
     d74:	4f ef       	ldi	r20, 0xFF	; 255
     d76:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     d7a:	0b c0       	rjmp	.+22     	; 0xd92 <Led_On+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, HIGH);
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	60 e4       	ldi	r22, 0x40	; 64
     d80:	4f ef       	ldi	r20, 0xFF	; 255
     d82:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     d86:	05 c0       	rjmp	.+10     	; 0xd92 <Led_On+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, HIGH);
     d88:	81 e0       	ldi	r24, 0x01	; 1
     d8a:	60 e8       	ldi	r22, 0x80	; 128
     d8c:	4f ef       	ldi	r20, 0xFF	; 255
     d8e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		break;
	default:

		break;
	}
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <Led_Off>:

void Led_Off(En_LedNumber_t en_led_id)
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	00 d0       	rcall	.+0      	; 0xda4 <Led_Off+0x6>
     da4:	0f 92       	push	r0
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
     daa:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be turned off */
	switch(en_led_id)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	3b 83       	std	Y+3, r19	; 0x03
     db4:	2a 83       	std	Y+2, r18	; 0x02
     db6:	8a 81       	ldd	r24, Y+2	; 0x02
     db8:	9b 81       	ldd	r25, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	91 05       	cpc	r25, r1
     dbe:	d9 f0       	breq	.+54     	; 0xdf6 <Led_Off+0x58>
     dc0:	2a 81       	ldd	r18, Y+2	; 0x02
     dc2:	3b 81       	ldd	r19, Y+3	; 0x03
     dc4:	22 30       	cpi	r18, 0x02	; 2
     dc6:	31 05       	cpc	r19, r1
     dc8:	2c f4       	brge	.+10     	; 0xdd4 <Led_Off+0x36>
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	9b 81       	ldd	r25, Y+3	; 0x03
     dce:	00 97       	sbiw	r24, 0x00	; 0
     dd0:	61 f0       	breq	.+24     	; 0xdea <Led_Off+0x4c>
     dd2:	22 c0       	rjmp	.+68     	; 0xe18 <Led_Off+0x7a>
     dd4:	2a 81       	ldd	r18, Y+2	; 0x02
     dd6:	3b 81       	ldd	r19, Y+3	; 0x03
     dd8:	22 30       	cpi	r18, 0x02	; 2
     dda:	31 05       	cpc	r19, r1
     ddc:	91 f0       	breq	.+36     	; 0xe02 <Led_Off+0x64>
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	9b 81       	ldd	r25, Y+3	; 0x03
     de2:	83 30       	cpi	r24, 0x03	; 3
     de4:	91 05       	cpc	r25, r1
     de6:	99 f0       	breq	.+38     	; 0xe0e <Led_Off+0x70>
     de8:	17 c0       	rjmp	.+46     	; 0xe18 <Led_Off+0x7a>
	{
	case LED_0:
		gpioPinWrite(LED_0_GPIO, LED_0_BIT, LOW);
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	60 e1       	ldi	r22, 0x10	; 16
     dee:	40 e0       	ldi	r20, 0x00	; 0
     df0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     df4:	11 c0       	rjmp	.+34     	; 0xe18 <Led_Off+0x7a>
		break;
	case LED_1:
		gpioPinWrite(LED_1_GPIO, LED_1_BIT, LOW);
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	60 e2       	ldi	r22, 0x20	; 32
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     e00:	0b c0       	rjmp	.+22     	; 0xe18 <Led_Off+0x7a>
		break;
	case LED_2:
		gpioPinWrite(LED_2_GPIO, LED_2_BIT, LOW);
     e02:	81 e0       	ldi	r24, 0x01	; 1
     e04:	60 e4       	ldi	r22, 0x40	; 64
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <Led_Off+0x7a>
		break;
	case LED_3:
		gpioPinWrite(LED_3_GPIO, LED_3_BIT, LOW);
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	60 e8       	ldi	r22, 0x80	; 128
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		break;
	default:

		break;
	}
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	0f 90       	pop	r0
     e1e:	cf 91       	pop	r28
     e20:	df 91       	pop	r29
     e22:	08 95       	ret

00000e24 <Led_Toggle>:

void Led_Toggle(En_LedNumber_t en_led_id)
{
     e24:	df 93       	push	r29
     e26:	cf 93       	push	r28
     e28:	00 d0       	rcall	.+0      	; 0xe2a <Led_Toggle+0x6>
     e2a:	0f 92       	push	r0
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
     e30:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which led to be toggled */
	switch(en_led_id)
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	3b 83       	std	Y+3, r19	; 0x03
     e3a:	2a 83       	std	Y+2, r18	; 0x02
     e3c:	8a 81       	ldd	r24, Y+2	; 0x02
     e3e:	9b 81       	ldd	r25, Y+3	; 0x03
     e40:	81 30       	cpi	r24, 0x01	; 1
     e42:	91 05       	cpc	r25, r1
     e44:	d1 f0       	breq	.+52     	; 0xe7a <Led_Toggle+0x56>
     e46:	2a 81       	ldd	r18, Y+2	; 0x02
     e48:	3b 81       	ldd	r19, Y+3	; 0x03
     e4a:	22 30       	cpi	r18, 0x02	; 2
     e4c:	31 05       	cpc	r19, r1
     e4e:	2c f4       	brge	.+10     	; 0xe5a <Led_Toggle+0x36>
     e50:	8a 81       	ldd	r24, Y+2	; 0x02
     e52:	9b 81       	ldd	r25, Y+3	; 0x03
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	61 f0       	breq	.+24     	; 0xe70 <Led_Toggle+0x4c>
     e58:	1e c0       	rjmp	.+60     	; 0xe96 <Led_Toggle+0x72>
     e5a:	2a 81       	ldd	r18, Y+2	; 0x02
     e5c:	3b 81       	ldd	r19, Y+3	; 0x03
     e5e:	22 30       	cpi	r18, 0x02	; 2
     e60:	31 05       	cpc	r19, r1
     e62:	81 f0       	breq	.+32     	; 0xe84 <Led_Toggle+0x60>
     e64:	8a 81       	ldd	r24, Y+2	; 0x02
     e66:	9b 81       	ldd	r25, Y+3	; 0x03
     e68:	83 30       	cpi	r24, 0x03	; 3
     e6a:	91 05       	cpc	r25, r1
     e6c:	81 f0       	breq	.+32     	; 0xe8e <Led_Toggle+0x6a>
     e6e:	13 c0       	rjmp	.+38     	; 0xe96 <Led_Toggle+0x72>
	{
	case LED_0:
		gpioPinToggle(LED_0_GPIO, LED_0_BIT);
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	60 e1       	ldi	r22, 0x10	; 16
     e74:	0e 94 60 03 	call	0x6c0	; 0x6c0 <gpioPinToggle>
     e78:	0e c0       	rjmp	.+28     	; 0xe96 <Led_Toggle+0x72>
		break;
	case LED_1:
		gpioPinToggle(LED_1_GPIO, LED_1_BIT);
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	60 e2       	ldi	r22, 0x20	; 32
     e7e:	0e 94 60 03 	call	0x6c0	; 0x6c0 <gpioPinToggle>
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <Led_Toggle+0x72>
		break;
	case LED_2:
		gpioPinToggle(LED_2_GPIO, LED_2_BIT);
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	60 e4       	ldi	r22, 0x40	; 64
     e88:	0e 94 60 03 	call	0x6c0	; 0x6c0 <gpioPinToggle>
     e8c:	04 c0       	rjmp	.+8      	; 0xe96 <Led_Toggle+0x72>
		break;
	case LED_3:
		gpioPinToggle(LED_3_GPIO, LED_3_BIT);
     e8e:	81 e0       	ldi	r24, 0x01	; 1
     e90:	60 e8       	ldi	r22, 0x80	; 128
     e92:	0e 94 60 03 	call	0x6c0	; 0x6c0 <gpioPinToggle>
		break;
	default:

		break;
	}
}
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <pushButtonInit>:
#include "pushButtonConfig.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void pushButtonInit(En_buttonId_t en_button_id)
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	00 d0       	rcall	.+0      	; 0xea8 <pushButtonInit+0x6>
     ea8:	0f 92       	push	r0
     eaa:	cd b7       	in	r28, 0x3d	; 61
     eac:	de b7       	in	r29, 0x3e	; 62
     eae:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to be initialized */
	switch(en_button_id)
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	28 2f       	mov	r18, r24
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	3b 83       	std	Y+3, r19	; 0x03
     eb8:	2a 83       	std	Y+2, r18	; 0x02
     eba:	8a 81       	ldd	r24, Y+2	; 0x02
     ebc:	9b 81       	ldd	r25, Y+3	; 0x03
     ebe:	00 97       	sbiw	r24, 0x00	; 0
     ec0:	31 f0       	breq	.+12     	; 0xece <pushButtonInit+0x2c>
     ec2:	2a 81       	ldd	r18, Y+2	; 0x02
     ec4:	3b 81       	ldd	r19, Y+3	; 0x03
     ec6:	21 30       	cpi	r18, 0x01	; 1
     ec8:	31 05       	cpc	r19, r1
     eca:	39 f0       	breq	.+14     	; 0xeda <pushButtonInit+0x38>
     ecc:	0b c0       	rjmp	.+22     	; 0xee4 <pushButtonInit+0x42>
	{
	case BTN_0:
		gpioPinDirection(BTN_0_GPIO, BTN_0_BIT, INPUT);
     ece:	82 e0       	ldi	r24, 0x02	; 2
     ed0:	60 e1       	ldi	r22, 0x10	; 16
     ed2:	40 e0       	ldi	r20, 0x00	; 0
     ed4:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <pushButtonInit+0x42>
		break;
	case BTN_1:
		gpioPinDirection(BTN_1_GPIO, BTN_1_BIT, INPUT);
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	64 e0       	ldi	r22, 0x04	; 4
     ede:	40 e0       	ldi	r20, 0x00	; 0
     ee0:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		break;
	default:

		break;
	}
}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	cf 91       	pop	r28
     eec:	df 91       	pop	r29
     eee:	08 95       	ret

00000ef0 <pushButtonUpdate>:

void pushButtonUpdate(void)
{
     ef0:	df 93       	push	r29
     ef2:	cf 93       	push	r28
     ef4:	cd b7       	in	r28, 0x3d	; 61
     ef6:	de b7       	in	r29, 0x3e	; 62
	/* Postponed */
}
     ef8:	cf 91       	pop	r28
     efa:	df 91       	pop	r29
     efc:	08 95       	ret

00000efe <pushButtonGetStatus>:

En_buttonStatus_t pushButtonGetStatus(En_buttonId_t en_button_id)
{
     efe:	df 93       	push	r29
     f00:	cf 93       	push	r28
     f02:	00 d0       	rcall	.+0      	; 0xf04 <pushButtonGetStatus+0x6>
     f04:	00 d0       	rcall	.+0      	; 0xf06 <pushButtonGetStatus+0x8>
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which push button to read its status (pressed or released) */
	switch(en_button_id)
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	28 2f       	mov	r18, r24
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	3c 83       	std	Y+4, r19	; 0x04
     f14:	2b 83       	std	Y+3, r18	; 0x03
     f16:	8b 81       	ldd	r24, Y+3	; 0x03
     f18:	9c 81       	ldd	r25, Y+4	; 0x04
     f1a:	81 30       	cpi	r24, 0x01	; 1
     f1c:	91 05       	cpc	r25, r1
     f1e:	71 f1       	breq	.+92     	; 0xf7c <pushButtonGetStatus+0x7e>
     f20:	2b 81       	ldd	r18, Y+3	; 0x03
     f22:	3c 81       	ldd	r19, Y+4	; 0x04
     f24:	22 30       	cpi	r18, 0x02	; 2
     f26:	31 05       	cpc	r19, r1
     f28:	2c f4       	brge	.+10     	; 0xf34 <pushButtonGetStatus+0x36>
     f2a:	8b 81       	ldd	r24, Y+3	; 0x03
     f2c:	9c 81       	ldd	r25, Y+4	; 0x04
     f2e:	00 97       	sbiw	r24, 0x00	; 0
     f30:	61 f0       	breq	.+24     	; 0xf4a <pushButtonGetStatus+0x4c>
     f32:	43 c0       	rjmp	.+134    	; 0xfba <pushButtonGetStatus+0xbc>
     f34:	2b 81       	ldd	r18, Y+3	; 0x03
     f36:	3c 81       	ldd	r19, Y+4	; 0x04
     f38:	22 30       	cpi	r18, 0x02	; 2
     f3a:	31 05       	cpc	r19, r1
     f3c:	c1 f1       	breq	.+112    	; 0xfae <pushButtonGetStatus+0xb0>
     f3e:	8b 81       	ldd	r24, Y+3	; 0x03
     f40:	9c 81       	ldd	r25, Y+4	; 0x04
     f42:	83 30       	cpi	r24, 0x03	; 3
     f44:	91 05       	cpc	r25, r1
     f46:	b1 f1       	breq	.+108    	; 0xfb4 <pushButtonGetStatus+0xb6>
     f48:	38 c0       	rjmp	.+112    	; 0xfba <pushButtonGetStatus+0xbc>
	{
	case BTN_0:
		if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	60 e1       	ldi	r22, 0x10	; 16
     f4e:	0e 94 b1 03 	call	0x762	; 0x762 <gpioPinRead>
     f52:	88 23       	and	r24, r24
     f54:	89 f0       	breq	.+34     	; 0xf78 <pushButtonGetStatus+0x7a>
		{
			softwareDelayMs(20);
     f56:	64 e1       	ldi	r22, 0x14	; 20
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
			if(gpioPinRead(BTN_0_GPIO, BTN_0_BIT))
     f62:	82 e0       	ldi	r24, 0x02	; 2
     f64:	60 e1       	ldi	r22, 0x10	; 16
     f66:	0e 94 b1 03 	call	0x762	; 0x762 <gpioPinRead>
     f6a:	88 23       	and	r24, r24
     f6c:	19 f0       	breq	.+6      	; 0xf74 <pushButtonGetStatus+0x76>
			{
				return Pressed;
     f6e:	92 e0       	ldi	r25, 0x02	; 2
     f70:	9a 83       	std	Y+2, r25	; 0x02
     f72:	25 c0       	rjmp	.+74     	; 0xfbe <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	23 c0       	rjmp	.+70     	; 0xfbe <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
     f78:	1a 82       	std	Y+2, r1	; 0x02
     f7a:	21 c0       	rjmp	.+66     	; 0xfbe <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_1:
		if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
     f7c:	81 e0       	ldi	r24, 0x01	; 1
     f7e:	64 e0       	ldi	r22, 0x04	; 4
     f80:	0e 94 b1 03 	call	0x762	; 0x762 <gpioPinRead>
     f84:	88 23       	and	r24, r24
     f86:	89 f0       	breq	.+34     	; 0xfaa <pushButtonGetStatus+0xac>
		{
			softwareDelayMs(20);
     f88:	64 e1       	ldi	r22, 0x14	; 20
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	80 e0       	ldi	r24, 0x00	; 0
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	0e 94 bf 08 	call	0x117e	; 0x117e <softwareDelayMs>
			if(gpioPinRead(BTN_1_GPIO, BTN_1_BIT))
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	64 e0       	ldi	r22, 0x04	; 4
     f98:	0e 94 b1 03 	call	0x762	; 0x762 <gpioPinRead>
     f9c:	88 23       	and	r24, r24
     f9e:	19 f0       	breq	.+6      	; 0xfa6 <pushButtonGetStatus+0xa8>
			{
				return Pressed;
     fa0:	22 e0       	ldi	r18, 0x02	; 2
     fa2:	2a 83       	std	Y+2, r18	; 0x02
     fa4:	0c c0       	rjmp	.+24     	; 0xfbe <pushButtonGetStatus+0xc0>
			}else
			{
				return Released;
     fa6:	1a 82       	std	Y+2, r1	; 0x02
     fa8:	0a c0       	rjmp	.+20     	; 0xfbe <pushButtonGetStatus+0xc0>
			}
		}else
		{
			return Released;
     faa:	1a 82       	std	Y+2, r1	; 0x02
     fac:	08 c0       	rjmp	.+16     	; 0xfbe <pushButtonGetStatus+0xc0>
		}
		break;
	case BTN_2:
		return ERROR;
     fae:	3f ef       	ldi	r19, 0xFF	; 255
     fb0:	3a 83       	std	Y+2, r19	; 0x02
     fb2:	05 c0       	rjmp	.+10     	; 0xfbe <pushButtonGetStatus+0xc0>
		break;
	case BTN_3:
		return ERROR;
     fb4:	8f ef       	ldi	r24, 0xFF	; 255
     fb6:	8a 83       	std	Y+2, r24	; 0x02
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <pushButtonGetStatus+0xc0>
		break;
	default:
		return ERROR;
     fba:	9f ef       	ldi	r25, 0xFF	; 255
     fbc:	9a 83       	std	Y+2, r25	; 0x02
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
		break;
	}
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	cf 91       	pop	r28
     fca:	df 91       	pop	r29
     fcc:	08 95       	ret

00000fce <sevenSegInit>:
static uint8_t gu8_sevenSeg1Status = HIGH;

/*- APIs IMPLEMENTATION ------------------------------------*/

void sevenSegInit(En_SevenSegId_t a_segment_id)
{
     fce:	df 93       	push	r29
     fd0:	cf 93       	push	r28
     fd2:	00 d0       	rcall	.+0      	; 0xfd4 <sevenSegInit+0x6>
     fd4:	0f 92       	push	r0
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be initialized */
	switch(a_segment_id)
     fdc:	89 81       	ldd	r24, Y+1	; 0x01
     fde:	28 2f       	mov	r18, r24
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	3b 83       	std	Y+3, r19	; 0x03
     fe4:	2a 83       	std	Y+2, r18	; 0x02
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	9b 81       	ldd	r25, Y+3	; 0x03
     fea:	00 97       	sbiw	r24, 0x00	; 0
     fec:	31 f0       	breq	.+12     	; 0xffa <sevenSegInit+0x2c>
     fee:	2a 81       	ldd	r18, Y+2	; 0x02
     ff0:	3b 81       	ldd	r19, Y+3	; 0x03
     ff2:	21 30       	cpi	r18, 0x01	; 1
     ff4:	31 05       	cpc	r19, r1
     ff6:	c9 f0       	breq	.+50     	; 0x102a <sevenSegInit+0x5c>
     ff8:	2f c0       	rjmp	.+94     	; 0x1058 <sevenSegInit+0x8a>
	{
	case SEG_0:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
     ffa:	81 e0       	ldi	r24, 0x01	; 1
     ffc:	6f e0       	ldi	r22, 0x0F	; 15
     ffe:	4f ef       	ldi	r20, 0xFF	; 255
    1000:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT2 | BIT4), OUTPUT);
    1004:	83 e0       	ldi	r24, 0x03	; 3
    1006:	64 e1       	ldi	r22, 0x14	; 20
    1008:	4f ef       	ldi	r20, 0xFF	; 255
    100a:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	6f e0       	ldi	r22, 0x0F	; 15
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    1018:	83 e0       	ldi	r24, 0x03	; 3
    101a:	60 e1       	ldi	r22, 0x10	; 16
    101c:	40 e0       	ldi	r20, 0x00	; 0
    101e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		sevenSegDisable(SEG_0);
    1022:	80 e0       	ldi	r24, 0x00	; 0
    1024:	0e 94 5f 08 	call	0x10be	; 0x10be <sevenSegDisable>
    1028:	17 c0       	rjmp	.+46     	; 0x1058 <sevenSegInit+0x8a>
		break;
	case SEG_1:
		gpioPinDirection(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), OUTPUT);
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	6f e0       	ldi	r22, 0x0F	; 15
    102e:	4f ef       	ldi	r20, 0xFF	; 255
    1030:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		gpioPinDirection(GPIOD, (BIT3 | BIT4), OUTPUT);
    1034:	83 e0       	ldi	r24, 0x03	; 3
    1036:	68 e1       	ldi	r22, 0x18	; 24
    1038:	4f ef       	ldi	r20, 0xFF	; 255
    103a:	0e 94 88 02 	call	0x510	; 0x510 <gpioPinDirection>
		gpioPinWrite(GPIOB, (BIT0 | BIT1 | BIT2 | BIT3), LOW);
    103e:	81 e0       	ldi	r24, 0x01	; 1
    1040:	6f e0       	ldi	r22, 0x0F	; 15
    1042:	40 e0       	ldi	r20, 0x00	; 0
    1044:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gpioPinWrite(GPIOD, BIT4, LOW);
    1048:	83 e0       	ldi	r24, 0x03	; 3
    104a:	60 e1       	ldi	r22, 0x10	; 16
    104c:	40 e0       	ldi	r20, 0x00	; 0
    104e:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		sevenSegDisable(SEG_1);
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	0e 94 5f 08 	call	0x10be	; 0x10be <sevenSegDisable>
		break;
	}
}
    1058:	0f 90       	pop	r0
    105a:	0f 90       	pop	r0
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <sevenSegEnable>:

void sevenSegEnable(En_SevenSegId_t en_segment_id)
{
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	00 d0       	rcall	.+0      	; 0x106a <sevenSegEnable+0x6>
    106a:	0f 92       	push	r0
    106c:	cd b7       	in	r28, 0x3d	; 61
    106e:	de b7       	in	r29, 0x3e	; 62
    1070:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be enabled */
	switch(en_segment_id)
    1072:	89 81       	ldd	r24, Y+1	; 0x01
    1074:	28 2f       	mov	r18, r24
    1076:	30 e0       	ldi	r19, 0x00	; 0
    1078:	3b 83       	std	Y+3, r19	; 0x03
    107a:	2a 83       	std	Y+2, r18	; 0x02
    107c:	8a 81       	ldd	r24, Y+2	; 0x02
    107e:	9b 81       	ldd	r25, Y+3	; 0x03
    1080:	00 97       	sbiw	r24, 0x00	; 0
    1082:	31 f0       	breq	.+12     	; 0x1090 <sevenSegEnable+0x2c>
    1084:	2a 81       	ldd	r18, Y+2	; 0x02
    1086:	3b 81       	ldd	r19, Y+3	; 0x03
    1088:	21 30       	cpi	r18, 0x01	; 1
    108a:	31 05       	cpc	r19, r1
    108c:	51 f0       	breq	.+20     	; 0x10a2 <sevenSegEnable+0x3e>
    108e:	11 c0       	rjmp	.+34     	; 0x10b2 <sevenSegEnable+0x4e>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, LOW);
    1090:	83 e0       	ldi	r24, 0x03	; 3
    1092:	64 e0       	ldi	r22, 0x04	; 4
    1094:	40 e0       	ldi	r20, 0x00	; 0
    1096:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gu8_sevenSeg0Status = HIGH;
    109a:	8f ef       	ldi	r24, 0xFF	; 255
    109c:	80 93 6a 00 	sts	0x006A, r24
    10a0:	08 c0       	rjmp	.+16     	; 0x10b2 <sevenSegEnable+0x4e>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, LOW);
    10a2:	83 e0       	ldi	r24, 0x03	; 3
    10a4:	68 e0       	ldi	r22, 0x08	; 8
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gu8_sevenSeg1Status = HIGH;
    10ac:	8f ef       	ldi	r24, 0xFF	; 255
    10ae:	80 93 60 00 	sts	0x0060, r24
		break;
	}
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	cf 91       	pop	r28
    10ba:	df 91       	pop	r29
    10bc:	08 95       	ret

000010be <sevenSegDisable>:

void sevenSegDisable(En_SevenSegId_t en_segment_id)
{
    10be:	df 93       	push	r29
    10c0:	cf 93       	push	r28
    10c2:	00 d0       	rcall	.+0      	; 0x10c4 <sevenSegDisable+0x6>
    10c4:	0f 92       	push	r0
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	89 83       	std	Y+1, r24	; 0x01
	/* A switch-case statement to decide which 7seg to be disabled */
	switch(en_segment_id)
    10cc:	89 81       	ldd	r24, Y+1	; 0x01
    10ce:	28 2f       	mov	r18, r24
    10d0:	30 e0       	ldi	r19, 0x00	; 0
    10d2:	3b 83       	std	Y+3, r19	; 0x03
    10d4:	2a 83       	std	Y+2, r18	; 0x02
    10d6:	8a 81       	ldd	r24, Y+2	; 0x02
    10d8:	9b 81       	ldd	r25, Y+3	; 0x03
    10da:	00 97       	sbiw	r24, 0x00	; 0
    10dc:	31 f0       	breq	.+12     	; 0x10ea <sevenSegDisable+0x2c>
    10de:	2a 81       	ldd	r18, Y+2	; 0x02
    10e0:	3b 81       	ldd	r19, Y+3	; 0x03
    10e2:	21 30       	cpi	r18, 0x01	; 1
    10e4:	31 05       	cpc	r19, r1
    10e6:	49 f0       	breq	.+18     	; 0x10fa <sevenSegDisable+0x3c>
    10e8:	0f c0       	rjmp	.+30     	; 0x1108 <sevenSegDisable+0x4a>
	{
	case SEG_0:
		gpioPinWrite(GPIOD, BIT2, HIGH);
    10ea:	83 e0       	ldi	r24, 0x03	; 3
    10ec:	64 e0       	ldi	r22, 0x04	; 4
    10ee:	4f ef       	ldi	r20, 0xFF	; 255
    10f0:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gu8_sevenSeg0Status = LOW;
    10f4:	10 92 6a 00 	sts	0x006A, r1
    10f8:	07 c0       	rjmp	.+14     	; 0x1108 <sevenSegDisable+0x4a>
		break;
	case SEG_1:
		gpioPinWrite(GPIOD, BIT3, HIGH);
    10fa:	83 e0       	ldi	r24, 0x03	; 3
    10fc:	68 e0       	ldi	r22, 0x08	; 8
    10fe:	4f ef       	ldi	r20, 0xFF	; 255
    1100:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <gpioPinWrite>
		gu8_sevenSeg1Status = LOW;
    1104:	10 92 60 00 	sts	0x0060, r1
		break;
	}
}
    1108:	0f 90       	pop	r0
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	cf 91       	pop	r28
    1110:	df 91       	pop	r29
    1112:	08 95       	ret

00001114 <sevenSegWrite>:

void sevenSegWrite(En_SevenSegId_t en_segment_id, uint8_t u8_number)
{
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	00 d0       	rcall	.+0      	; 0x111a <sevenSegWrite+0x6>
    111a:	00 d0       	rcall	.+0      	; 0x111c <sevenSegWrite+0x8>
    111c:	cd b7       	in	r28, 0x3d	; 61
    111e:	de b7       	in	r29, 0x3e	; 62
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	6a 83       	std	Y+2, r22	; 0x02
	/* A switch-case statement to decide which 7seg to be written */
	switch(en_segment_id)
    1124:	89 81       	ldd	r24, Y+1	; 0x01
    1126:	28 2f       	mov	r18, r24
    1128:	30 e0       	ldi	r19, 0x00	; 0
    112a:	3c 83       	std	Y+4, r19	; 0x04
    112c:	2b 83       	std	Y+3, r18	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	00 97       	sbiw	r24, 0x00	; 0
    1134:	31 f0       	breq	.+12     	; 0x1142 <sevenSegWrite+0x2e>
    1136:	2b 81       	ldd	r18, Y+3	; 0x03
    1138:	3c 81       	ldd	r19, Y+4	; 0x04
    113a:	21 30       	cpi	r18, 0x01	; 1
    113c:	31 05       	cpc	r19, r1
    113e:	69 f0       	breq	.+26     	; 0x115a <sevenSegWrite+0x46>
    1140:	17 c0       	rjmp	.+46     	; 0x1170 <sevenSegWrite+0x5c>
	{
	case SEG_0:
		if(gu8_sevenSeg0Status == HIGH)
    1142:	80 91 6a 00 	lds	r24, 0x006A
    1146:	8f 3f       	cpi	r24, 0xFF	; 255
    1148:	99 f4       	brne	.+38     	; 0x1170 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    114a:	8a 81       	ldd	r24, Y+2	; 0x02
    114c:	98 2f       	mov	r25, r24
    114e:	9f 70       	andi	r25, 0x0F	; 15
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	69 2f       	mov	r22, r25
    1154:	0e 94 b8 01 	call	0x370	; 0x370 <gpioPortWrite>
    1158:	0b c0       	rjmp	.+22     	; 0x1170 <sevenSegWrite+0x5c>
		}
		break;
	case SEG_1:
		if(gu8_sevenSeg1Status == HIGH)
    115a:	80 91 60 00 	lds	r24, 0x0060
    115e:	8f 3f       	cpi	r24, 0xFF	; 255
    1160:	39 f4       	brne	.+14     	; 0x1170 <sevenSegWrite+0x5c>
		{
			gpioPortWrite(GPIOB, (GPIOB & 0xF0) | (u8_number & 0x0F));
    1162:	8a 81       	ldd	r24, Y+2	; 0x02
    1164:	98 2f       	mov	r25, r24
    1166:	9f 70       	andi	r25, 0x0F	; 15
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	69 2f       	mov	r22, r25
    116c:	0e 94 b8 01 	call	0x370	; 0x370 <gpioPortWrite>
		}
		break;
	}
}
    1170:	0f 90       	pop	r0
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <softwareDelayMs>:
#include "softwareDelay.h"

/*- APIs IMPLEMENTATION ------------------------------------*/

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	cd b7       	in	r28, 0x3d	; 61
    1184:	de b7       	in	r29, 0x3e	; 62
    1186:	60 97       	sbiw	r28, 0x10	; 16
    1188:	0f b6       	in	r0, 0x3f	; 63
    118a:	f8 94       	cli
    118c:	de bf       	out	0x3e, r29	; 62
    118e:	0f be       	out	0x3f, r0	; 63
    1190:	cd bf       	out	0x3d, r28	; 61
    1192:	6d 87       	std	Y+13, r22	; 0x0d
    1194:	7e 87       	std	Y+14, r23	; 0x0e
    1196:	8f 87       	std	Y+15, r24	; 0x0f
    1198:	98 8b       	std	Y+16, r25	; 0x10
	/* 16 MHz */
	uint32_t ticks=380, i, j;
    119a:	8c e7       	ldi	r24, 0x7C	; 124
    119c:	91 e0       	ldi	r25, 0x01	; 1
    119e:	a0 e0       	ldi	r26, 0x00	; 0
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	89 87       	std	Y+9, r24	; 0x09
    11a4:	9a 87       	std	Y+10, r25	; 0x0a
    11a6:	ab 87       	std	Y+11, r26	; 0x0b
    11a8:	bc 87       	std	Y+12, r27	; 0x0c
	for(i=0 ; i<u32_delay_in_ms ; i++)
    11aa:	1d 82       	std	Y+5, r1	; 0x05
    11ac:	1e 82       	std	Y+6, r1	; 0x06
    11ae:	1f 82       	std	Y+7, r1	; 0x07
    11b0:	18 86       	std	Y+8, r1	; 0x08
    11b2:	28 c0       	rjmp	.+80     	; 0x1204 <softwareDelayMs+0x86>
	{
		for(j=0 ; j<ticks ; j++);
    11b4:	19 82       	std	Y+1, r1	; 0x01
    11b6:	1a 82       	std	Y+2, r1	; 0x02
    11b8:	1b 82       	std	Y+3, r1	; 0x03
    11ba:	1c 82       	std	Y+4, r1	; 0x04
    11bc:	0b c0       	rjmp	.+22     	; 0x11d4 <softwareDelayMs+0x56>
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	ab 81       	ldd	r26, Y+3	; 0x03
    11c4:	bc 81       	ldd	r27, Y+4	; 0x04
    11c6:	01 96       	adiw	r24, 0x01	; 1
    11c8:	a1 1d       	adc	r26, r1
    11ca:	b1 1d       	adc	r27, r1
    11cc:	89 83       	std	Y+1, r24	; 0x01
    11ce:	9a 83       	std	Y+2, r25	; 0x02
    11d0:	ab 83       	std	Y+3, r26	; 0x03
    11d2:	bc 83       	std	Y+4, r27	; 0x04
    11d4:	29 81       	ldd	r18, Y+1	; 0x01
    11d6:	3a 81       	ldd	r19, Y+2	; 0x02
    11d8:	4b 81       	ldd	r20, Y+3	; 0x03
    11da:	5c 81       	ldd	r21, Y+4	; 0x04
    11dc:	89 85       	ldd	r24, Y+9	; 0x09
    11de:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e0:	ab 85       	ldd	r26, Y+11	; 0x0b
    11e2:	bc 85       	ldd	r27, Y+12	; 0x0c
    11e4:	28 17       	cp	r18, r24
    11e6:	39 07       	cpc	r19, r25
    11e8:	4a 07       	cpc	r20, r26
    11ea:	5b 07       	cpc	r21, r27
    11ec:	40 f3       	brcs	.-48     	; 0x11be <softwareDelayMs+0x40>

void softwareDelayMs(uint32_t u32_delay_in_ms)
{
	/* 16 MHz */
	uint32_t ticks=380, i, j;
	for(i=0 ; i<u32_delay_in_ms ; i++)
    11ee:	8d 81       	ldd	r24, Y+5	; 0x05
    11f0:	9e 81       	ldd	r25, Y+6	; 0x06
    11f2:	af 81       	ldd	r26, Y+7	; 0x07
    11f4:	b8 85       	ldd	r27, Y+8	; 0x08
    11f6:	01 96       	adiw	r24, 0x01	; 1
    11f8:	a1 1d       	adc	r26, r1
    11fa:	b1 1d       	adc	r27, r1
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	9e 83       	std	Y+6, r25	; 0x06
    1200:	af 83       	std	Y+7, r26	; 0x07
    1202:	b8 87       	std	Y+8, r27	; 0x08
    1204:	2d 81       	ldd	r18, Y+5	; 0x05
    1206:	3e 81       	ldd	r19, Y+6	; 0x06
    1208:	4f 81       	ldd	r20, Y+7	; 0x07
    120a:	58 85       	ldd	r21, Y+8	; 0x08
    120c:	8d 85       	ldd	r24, Y+13	; 0x0d
    120e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1210:	af 85       	ldd	r26, Y+15	; 0x0f
    1212:	b8 89       	ldd	r27, Y+16	; 0x10
    1214:	28 17       	cp	r18, r24
    1216:	39 07       	cpc	r19, r25
    1218:	4a 07       	cpc	r20, r26
    121a:	5b 07       	cpc	r21, r27
    121c:	58 f2       	brcs	.-106    	; 0x11b4 <softwareDelayMs+0x36>
	{
		for(j=0 ; j<ticks ; j++);
	}
}
    121e:	60 96       	adiw	r28, 0x10	; 16
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	cf 91       	pop	r28
    122c:	df 91       	pop	r29
    122e:	08 95       	ret

00001230 <timer0Init>:
static uint8_t gu8_timer2PreScaler = 0;

/*- APIs IMPLEMENTATION ------------------------------------*/

void timer0Init(En_timer0Mode_t en_mode,En_timer0OC_t en_OC0,En_timer0perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, En_timer0Interrupt_t en_interruptMask)
{
    1230:	ef 92       	push	r14
    1232:	0f 93       	push	r16
    1234:	df 93       	push	r29
    1236:	cf 93       	push	r28
    1238:	00 d0       	rcall	.+0      	; 0x123a <timer0Init+0xa>
    123a:	00 d0       	rcall	.+0      	; 0x123c <timer0Init+0xc>
    123c:	00 d0       	rcall	.+0      	; 0x123e <timer0Init+0xe>
    123e:	cd b7       	in	r28, 0x3d	; 61
    1240:	de b7       	in	r29, 0x3e	; 62
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	6a 83       	std	Y+2, r22	; 0x02
    1246:	4b 83       	std	Y+3, r20	; 0x03
    1248:	2c 83       	std	Y+4, r18	; 0x04
    124a:	0d 83       	std	Y+5, r16	; 0x05
    124c:	ee 82       	std	Y+6, r14	; 0x06
	/* Non-PWM mode */
	SET_BIT(TCCR0, FOC0);
    124e:	a3 e5       	ldi	r26, 0x53	; 83
    1250:	b0 e0       	ldi	r27, 0x00	; 0
    1252:	e3 e5       	ldi	r30, 0x53	; 83
    1254:	f0 e0       	ldi	r31, 0x00	; 0
    1256:	80 81       	ld	r24, Z
    1258:	80 68       	ori	r24, 0x80	; 128
    125a:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR0 = (TCCR0 & 0xB7) | (en_mode);
    125c:	a3 e5       	ldi	r26, 0x53	; 83
    125e:	b0 e0       	ldi	r27, 0x00	; 0
    1260:	e3 e5       	ldi	r30, 0x53	; 83
    1262:	f0 e0       	ldi	r31, 0x00	; 0
    1264:	80 81       	ld	r24, Z
    1266:	98 2f       	mov	r25, r24
    1268:	97 7b       	andi	r25, 0xB7	; 183
    126a:	89 81       	ldd	r24, Y+1	; 0x01
    126c:	89 2b       	or	r24, r25
    126e:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR0 = (TCCR0 & 0xCF) | (en_OC0);
    1270:	a3 e5       	ldi	r26, 0x53	; 83
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	e3 e5       	ldi	r30, 0x53	; 83
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	98 2f       	mov	r25, r24
    127c:	9f 7c       	andi	r25, 0xCF	; 207
    127e:	8a 81       	ldd	r24, Y+2	; 0x02
    1280:	89 2b       	or	r24, r25
    1282:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	80 93 6b 00 	sts	0x006B, r24

	/* Set the timer/counter0 initial value */
	TCNT0 = u8_initialValue;
    128a:	e2 e5       	ldi	r30, 0x52	; 82
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR0 = u8_outputCompare;
    1292:	ec e5       	ldi	r30, 0x5C	; 92
    1294:	f0 e0       	ldi	r31, 0x00	; 0
    1296:	8d 81       	ldd	r24, Y+5	; 0x05
    1298:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xFC) | (en_interruptMask);
    129a:	a9 e5       	ldi	r26, 0x59	; 89
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e9 e5       	ldi	r30, 0x59	; 89
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	98 2f       	mov	r25, r24
    12a6:	9c 7f       	andi	r25, 0xFC	; 252
    12a8:	8e 81       	ldd	r24, Y+6	; 0x06
    12aa:	89 2b       	or	r24, r25
    12ac:	8c 93       	st	X, r24
}
    12ae:	26 96       	adiw	r28, 0x06	; 6
    12b0:	0f b6       	in	r0, 0x3f	; 63
    12b2:	f8 94       	cli
    12b4:	de bf       	out	0x3e, r29	; 62
    12b6:	0f be       	out	0x3f, r0	; 63
    12b8:	cd bf       	out	0x3d, r28	; 61
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	0f 91       	pop	r16
    12c0:	ef 90       	pop	r14
    12c2:	08 95       	ret

000012c4 <timer0Set>:

void timer0Set(uint8_t u8_value)
{
    12c4:	df 93       	push	r29
    12c6:	cf 93       	push	r28
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter0 custom value */
	TCNT0 = u8_value;
    12d0:	e2 e5       	ldi	r30, 0x52	; 82
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	80 83       	st	Z, r24
}
    12d8:	0f 90       	pop	r0
    12da:	cf 91       	pop	r28
    12dc:	df 91       	pop	r29
    12de:	08 95       	ret

000012e0 <timer0Read>:

uint8_t timer0Read(void)
{
    12e0:	df 93       	push	r29
    12e2:	cf 93       	push	r28
    12e4:	cd b7       	in	r28, 0x3d	; 61
    12e6:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT0;
    12e8:	e2 e5       	ldi	r30, 0x52	; 82
    12ea:	f0 e0       	ldi	r31, 0x00	; 0
    12ec:	80 81       	ld	r24, Z
}
    12ee:	cf 91       	pop	r28
    12f0:	df 91       	pop	r29
    12f2:	08 95       	ret

000012f4 <timer0Start>:

void timer0Start(void)
{
    12f4:	df 93       	push	r29
    12f6:	cf 93       	push	r28
    12f8:	cd b7       	in	r28, 0x3d	; 61
    12fa:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR0 = (TCCR0 & 0xF8) | (gu8_timer0Timer1PreScaler);
    12fc:	a3 e5       	ldi	r26, 0x53	; 83
    12fe:	b0 e0       	ldi	r27, 0x00	; 0
    1300:	e3 e5       	ldi	r30, 0x53	; 83
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	80 81       	ld	r24, Z
    1306:	98 2f       	mov	r25, r24
    1308:	98 7f       	andi	r25, 0xF8	; 248
    130a:	80 91 6b 00 	lds	r24, 0x006B
    130e:	89 2b       	or	r24, r25
    1310:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT0 = 0;
    1312:	e2 e5       	ldi	r30, 0x52	; 82
    1314:	f0 e0       	ldi	r31, 0x00	; 0
    1316:	10 82       	st	Z, r1
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <timer0Stop>:

void timer0Stop(void)
{
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR0 &= ~((1 << CS00) | (1 << CS01) | (1 << CS02));
    1326:	a3 e5       	ldi	r26, 0x53	; 83
    1328:	b0 e0       	ldi	r27, 0x00	; 0
    132a:	e3 e5       	ldi	r30, 0x53	; 83
    132c:	f0 e0       	ldi	r31, 0x00	; 0
    132e:	80 81       	ld	r24, Z
    1330:	88 7f       	andi	r24, 0xF8	; 248
    1332:	8c 93       	st	X, r24
}
    1334:	cf 91       	pop	r28
    1336:	df 91       	pop	r29
    1338:	08 95       	ret

0000133a <timer0DelayMs>:

void timer0DelayMs(uint16_t u16_delay_in_ms)
{
    133a:	ef 92       	push	r14
    133c:	0f 93       	push	r16
    133e:	df 93       	push	r29
    1340:	cf 93       	push	r28
    1342:	00 d0       	rcall	.+0      	; 0x1344 <timer0DelayMs+0xa>
    1344:	00 d0       	rcall	.+0      	; 0x1346 <timer0DelayMs+0xc>
    1346:	0f 92       	push	r0
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    134c:	9d 83       	std	Y+5, r25	; 0x05
    134e:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1350:	1b 82       	std	Y+3, r1	; 0x03
    1352:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1354:	8a ef       	ldi	r24, 0xFA	; 250
    1356:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
    1358:	80 e0       	ldi	r24, 0x00	; 0
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	43 e0       	ldi	r20, 0x03	; 3
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	ee 24       	eor	r14, r14
    1364:	0e 94 18 09 	call	0x1230	; 0x1230 <timer0Init>
	timer0Start();
    1368:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <timer0Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    136c:	1b 82       	std	Y+3, r1	; 0x03
    136e:	1a 82       	std	Y+2, r1	; 0x02
    1370:	0e c0       	rjmp	.+28     	; 0x138e <timer0DelayMs+0x54>
	{
		while(TCNT0 < u8_outputCompare);
    1372:	e2 e5       	ldi	r30, 0x52	; 82
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	90 81       	ld	r25, Z
    1378:	89 81       	ldd	r24, Y+1	; 0x01
    137a:	98 17       	cp	r25, r24
    137c:	d0 f3       	brcs	.-12     	; 0x1372 <timer0DelayMs+0x38>
		TCNT0 = 0;
    137e:	e2 e5       	ldi	r30, 0x52	; 82
    1380:	f0 e0       	ldi	r31, 0x00	; 0
    1382:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer0Init(T0_NORMAL_MODE, T0_OC0_DIS, T0_PRESCALER_64, 0, 0, T0_POLLING);
	timer0Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	9b 81       	ldd	r25, Y+3	; 0x03
    1388:	01 96       	adiw	r24, 0x01	; 1
    138a:	9b 83       	std	Y+3, r25	; 0x03
    138c:	8a 83       	std	Y+2, r24	; 0x02
    138e:	2a 81       	ldd	r18, Y+2	; 0x02
    1390:	3b 81       	ldd	r19, Y+3	; 0x03
    1392:	8c 81       	ldd	r24, Y+4	; 0x04
    1394:	9d 81       	ldd	r25, Y+5	; 0x05
    1396:	28 17       	cp	r18, r24
    1398:	39 07       	cpc	r19, r25
    139a:	58 f3       	brcs	.-42     	; 0x1372 <timer0DelayMs+0x38>
	{
		while(TCNT0 < u8_outputCompare);
		TCNT0 = 0;
	}
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	cf 91       	pop	r28
    13a8:	df 91       	pop	r29
    13aa:	0f 91       	pop	r16
    13ac:	ef 90       	pop	r14
    13ae:	08 95       	ret

000013b0 <timer0DelayUs>:

void timer0DelayUs(uint32_t u32_delay_in_us)
{
    13b0:	ef 92       	push	r14
    13b2:	0f 93       	push	r16
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	29 97       	sbiw	r28, 0x09	; 9
    13be:	0f b6       	in	r0, 0x3f	; 63
    13c0:	f8 94       	cli
    13c2:	de bf       	out	0x3e, r29	; 62
    13c4:	0f be       	out	0x3f, r0	; 63
    13c6:	cd bf       	out	0x3d, r28	; 61
    13c8:	6e 83       	std	Y+6, r22	; 0x06
    13ca:	7f 83       	std	Y+7, r23	; 0x07
    13cc:	88 87       	std	Y+8, r24	; 0x08
    13ce:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    13d0:	1a 82       	std	Y+2, r1	; 0x02
    13d2:	1b 82       	std	Y+3, r1	; 0x03
    13d4:	1c 82       	std	Y+4, r1	; 0x04
    13d6:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    13d8:	80 e1       	ldi	r24, 0x10	; 16
    13da:	89 83       	std	Y+1, r24	; 0x01

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
    13dc:	88 e0       	ldi	r24, 0x08	; 8
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	41 e0       	ldi	r20, 0x01	; 1
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	09 81       	ldd	r16, Y+1	; 0x01
    13e6:	ee 24       	eor	r14, r14
    13e8:	0e 94 18 09 	call	0x1230	; 0x1230 <timer0Init>
	timer0Start();
    13ec:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <timer0Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    13f0:	1a 82       	std	Y+2, r1	; 0x02
    13f2:	1b 82       	std	Y+3, r1	; 0x03
    13f4:	1c 82       	std	Y+4, r1	; 0x04
    13f6:	1d 82       	std	Y+5, r1	; 0x05
    13f8:	1e c0       	rjmp	.+60     	; 0x1436 <timer0DelayUs+0x86>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
    13fa:	e8 e5       	ldi	r30, 0x58	; 88
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	82 70       	andi	r24, 0x02	; 2
    1406:	90 70       	andi	r25, 0x00	; 0
    1408:	00 97       	sbiw	r24, 0x00	; 0
    140a:	b9 f3       	breq	.-18     	; 0x13fa <timer0DelayUs+0x4a>
		SET_BIT(TIFR, OCF0);
    140c:	a8 e5       	ldi	r26, 0x58	; 88
    140e:	b0 e0       	ldi	r27, 0x00	; 0
    1410:	e8 e5       	ldi	r30, 0x58	; 88
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	80 81       	ld	r24, Z
    1416:	82 60       	ori	r24, 0x02	; 2
    1418:	8c 93       	st	X, r24
		TCNT0 = 0;
    141a:	e2 e5       	ldi	r30, 0x52	; 82
    141c:	f0 e0       	ldi	r31, 0x00	; 0
    141e:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, T0_PRESCALER_NO, 0, u8_outputCompare, T0_POLLING);
	timer0Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1420:	8a 81       	ldd	r24, Y+2	; 0x02
    1422:	9b 81       	ldd	r25, Y+3	; 0x03
    1424:	ac 81       	ldd	r26, Y+4	; 0x04
    1426:	bd 81       	ldd	r27, Y+5	; 0x05
    1428:	01 96       	adiw	r24, 0x01	; 1
    142a:	a1 1d       	adc	r26, r1
    142c:	b1 1d       	adc	r27, r1
    142e:	8a 83       	std	Y+2, r24	; 0x02
    1430:	9b 83       	std	Y+3, r25	; 0x03
    1432:	ac 83       	std	Y+4, r26	; 0x04
    1434:	bd 83       	std	Y+5, r27	; 0x05
    1436:	2a 81       	ldd	r18, Y+2	; 0x02
    1438:	3b 81       	ldd	r19, Y+3	; 0x03
    143a:	4c 81       	ldd	r20, Y+4	; 0x04
    143c:	5d 81       	ldd	r21, Y+5	; 0x05
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	a8 85       	ldd	r26, Y+8	; 0x08
    1444:	b9 85       	ldd	r27, Y+9	; 0x09
    1446:	28 17       	cp	r18, r24
    1448:	39 07       	cpc	r19, r25
    144a:	4a 07       	cpc	r20, r26
    144c:	5b 07       	cpc	r21, r27
    144e:	a8 f2       	brcs	.-86     	; 0x13fa <timer0DelayUs+0x4a>
	{
		while(BIT_IS_CLEAR(TIFR, OCF0));
		SET_BIT(TIFR, OCF0);
		TCNT0 = 0;
	}
}
    1450:	29 96       	adiw	r28, 0x09	; 9
    1452:	0f b6       	in	r0, 0x3f	; 63
    1454:	f8 94       	cli
    1456:	de bf       	out	0x3e, r29	; 62
    1458:	0f be       	out	0x3f, r0	; 63
    145a:	cd bf       	out	0x3d, r28	; 61
    145c:	cf 91       	pop	r28
    145e:	df 91       	pop	r29
    1460:	0f 91       	pop	r16
    1462:	ef 90       	pop	r14
    1464:	08 95       	ret

00001466 <timer0SwPWM>:

void timer0SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1466:	ef 92       	push	r14
    1468:	0f 93       	push	r16
    146a:	df 93       	push	r29
    146c:	cf 93       	push	r28
    146e:	00 d0       	rcall	.+0      	; 0x1470 <timer0SwPWM+0xa>
    1470:	00 d0       	rcall	.+0      	; 0x1472 <timer0SwPWM+0xc>
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
    1476:	8b 83       	std	Y+3, r24	; 0x03
    1478:	6c 83       	std	Y+4, r22	; 0x04
	uint8_t u8_outputCompare, u8_prescaler;

	sei();
    147a:	78 94       	sei

	if(u8_frequency <= 80)
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	81 35       	cpi	r24, 0x51	; 81
    1480:	e8 f4       	brcc	.+58     	; 0x14bc <timer0SwPWM+0x56>
	{
		u8_prescaler = T0_PRESCALER_64;
    1482:	83 e0       	ldi	r24, 0x03	; 3
    1484:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (64UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    1486:	8c 81       	ldd	r24, Y+4	; 0x04
    1488:	88 2f       	mov	r24, r24
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	a0 e0       	ldi	r26, 0x00	; 0
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	39 e1       	ldi	r19, 0x19	; 25
    1494:	40 e0       	ldi	r20, 0x00	; 0
    1496:	50 e0       	ldi	r21, 0x00	; 0
    1498:	bc 01       	movw	r22, r24
    149a:	cd 01       	movw	r24, r26
    149c:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__mulsi3>
    14a0:	9b 01       	movw	r18, r22
    14a2:	ac 01       	movw	r20, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	94 e2       	ldi	r25, 0x24	; 36
    14a8:	a4 ef       	ldi	r26, 0xF4	; 244
    14aa:	b0 e0       	ldi	r27, 0x00	; 0
    14ac:	bc 01       	movw	r22, r24
    14ae:	cd 01       	movw	r24, r26
    14b0:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    14b4:	da 01       	movw	r26, r20
    14b6:	c9 01       	movw	r24, r18
    14b8:	8a 83       	std	Y+2, r24	; 0x02
    14ba:	1c c0       	rjmp	.+56     	; 0x14f4 <timer0SwPWM+0x8e>
	}else if(u8_frequency <= 625)
	{
		u8_prescaler = T0_PRESCALER_8;
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	89 83       	std	Y+1, r24	; 0x01
		u8_outputCompare = (F_CPU / (8UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
    14c0:	8c 81       	ldd	r24, Y+4	; 0x04
    14c2:	88 2f       	mov	r24, r24
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	a0 e0       	ldi	r26, 0x00	; 0
    14c8:	b0 e0       	ldi	r27, 0x00	; 0
    14ca:	20 e2       	ldi	r18, 0x20	; 32
    14cc:	33 e0       	ldi	r19, 0x03	; 3
    14ce:	40 e0       	ldi	r20, 0x00	; 0
    14d0:	50 e0       	ldi	r21, 0x00	; 0
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 38 0d 	call	0x1a70	; 0x1a70 <__mulsi3>
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
    14de:	80 e0       	ldi	r24, 0x00	; 0
    14e0:	94 e2       	ldi	r25, 0x24	; 36
    14e2:	a4 ef       	ldi	r26, 0xF4	; 244
    14e4:	b0 e0       	ldi	r27, 0x00	; 0
    14e6:	bc 01       	movw	r22, r24
    14e8:	cd 01       	movw	r24, r26
    14ea:	0e 94 77 0d 	call	0x1aee	; 0x1aee <__udivmodsi4>
    14ee:	da 01       	movw	r26, r20
    14f0:	c9 01       	movw	r24, r18
    14f2:	8a 83       	std	Y+2, r24	; 0x02
	{
		u8_prescaler = T0_PRESCALER_NO;
		u8_outputCompare = (F_CPU / (1UL * SW_PWM_DUTY_CYCLE_RESOLUTION * u8_frequency));
	}

	timer0Init(T0_COMP_MODE, T0_OC0_DIS, u8_prescaler, 0, u8_outputCompare, T0_INTERRUPT_CMP);
    14f4:	88 e0       	ldi	r24, 0x08	; 8
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	49 81       	ldd	r20, Y+1	; 0x01
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	0a 81       	ldd	r16, Y+2	; 0x02
    14fe:	ee 24       	eor	r14, r14
    1500:	68 94       	set
    1502:	e1 f8       	bld	r14, 1
    1504:	0e 94 18 09 	call	0x1230	; 0x1230 <timer0Init>
	timer0Start();
    1508:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <timer0Start>
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	cf 91       	pop	r28
    1516:	df 91       	pop	r29
    1518:	0f 91       	pop	r16
    151a:	ef 90       	pop	r14
    151c:	08 95       	ret

0000151e <timer1Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer1Init(En_timer1Mode_t en_mode,En_timer1OC_t en_OC1,En_timer1perscaler_t en_prescal, uint16_t u16_initialValue, uint16_t u16_outputCompareA, uint16_t u16_outputCompareB,uint16_t u16_inputCapture, En_timer1Interrupt_t en_interruptMask)
{
    151e:	af 92       	push	r10
    1520:	cf 92       	push	r12
    1522:	df 92       	push	r13
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	df 93       	push	r29
    152e:	cf 93       	push	r28
    1530:	cd b7       	in	r28, 0x3d	; 61
    1532:	de b7       	in	r29, 0x3e	; 62
    1534:	2d 97       	sbiw	r28, 0x0d	; 13
    1536:	0f b6       	in	r0, 0x3f	; 63
    1538:	f8 94       	cli
    153a:	de bf       	out	0x3e, r29	; 62
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	cd bf       	out	0x3d, r28	; 61
    1540:	89 83       	std	Y+1, r24	; 0x01
    1542:	7b 83       	std	Y+3, r23	; 0x03
    1544:	6a 83       	std	Y+2, r22	; 0x02
    1546:	4c 83       	std	Y+4, r20	; 0x04
    1548:	3e 83       	std	Y+6, r19	; 0x06
    154a:	2d 83       	std	Y+5, r18	; 0x05
    154c:	18 87       	std	Y+8, r17	; 0x08
    154e:	0f 83       	std	Y+7, r16	; 0x07
    1550:	fa 86       	std	Y+10, r15	; 0x0a
    1552:	e9 86       	std	Y+9, r14	; 0x09
    1554:	dc 86       	std	Y+12, r13	; 0x0c
    1556:	cb 86       	std	Y+11, r12	; 0x0b
    1558:	ad 86       	std	Y+13, r10	; 0x0d
	/* Non-PWM mode */
	SET_BIT(TCCR1A, FOC1A);
    155a:	af e4       	ldi	r26, 0x4F	; 79
    155c:	b0 e0       	ldi	r27, 0x00	; 0
    155e:	ef e4       	ldi	r30, 0x4F	; 79
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 60       	ori	r24, 0x08	; 8
    1566:	8c 93       	st	X, r24
	SET_BIT(TCCR1A, FOC1B);
    1568:	af e4       	ldi	r26, 0x4F	; 79
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ef e4       	ldi	r30, 0x4F	; 79
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	84 60       	ori	r24, 0x04	; 4
    1574:	8c 93       	st	X, r24

	TCCR1 = 0x0000;
    1576:	ee e4       	ldi	r30, 0x4E	; 78
    1578:	f0 e0       	ldi	r31, 0x00	; 0
    157a:	11 82       	std	Z+1, r1	; 0x01
    157c:	10 82       	st	Z, r1

	/* Set the required operating mode */
	TCCR1 = en_mode | en_OC1;
    157e:	ee e4       	ldi	r30, 0x4E	; 78
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	89 81       	ldd	r24, Y+1	; 0x01
    1584:	28 2f       	mov	r18, r24
    1586:	30 e0       	ldi	r19, 0x00	; 0
    1588:	8a 81       	ldd	r24, Y+2	; 0x02
    158a:	9b 81       	ldd	r25, Y+3	; 0x03
    158c:	82 2b       	or	r24, r18
    158e:	93 2b       	or	r25, r19
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24

	/* Set the pre-scaler */
	gu8_timer0Timer1PreScaler = en_prescal;
    1594:	8c 81       	ldd	r24, Y+4	; 0x04
    1596:	80 93 6b 00 	sts	0x006B, r24

	/* Set the timer/counter0 initial value */
	TCNT1 = u16_initialValue;
    159a:	ec e4       	ldi	r30, 0x4C	; 76
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	8d 81       	ldd	r24, Y+5	; 0x05
    15a0:	9e 81       	ldd	r25, Y+6	; 0x06
    15a2:	91 83       	std	Z+1, r25	; 0x01
    15a4:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR1A = u16_outputCompareA;
    15a6:	ea e4       	ldi	r30, 0x4A	; 74
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	8f 81       	ldd	r24, Y+7	; 0x07
    15ac:	98 85       	ldd	r25, Y+8	; 0x08
    15ae:	91 83       	std	Z+1, r25	; 0x01
    15b0:	80 83       	st	Z, r24
	OCR1B = u16_outputCompareB;
    15b2:	e8 e4       	ldi	r30, 0x48	; 72
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	89 85       	ldd	r24, Y+9	; 0x09
    15b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ba:	91 83       	std	Z+1, r25	; 0x01
    15bc:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0xC3) | (en_interruptMask);
    15be:	a9 e5       	ldi	r26, 0x59	; 89
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e9 e5       	ldi	r30, 0x59	; 89
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	98 2f       	mov	r25, r24
    15ca:	93 7c       	andi	r25, 0xC3	; 195
    15cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ce:	89 2b       	or	r24, r25
    15d0:	8c 93       	st	X, r24
}
    15d2:	2d 96       	adiw	r28, 0x0d	; 13
    15d4:	0f b6       	in	r0, 0x3f	; 63
    15d6:	f8 94       	cli
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	0f be       	out	0x3f, r0	; 63
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	1f 91       	pop	r17
    15e4:	0f 91       	pop	r16
    15e6:	ff 90       	pop	r15
    15e8:	ef 90       	pop	r14
    15ea:	df 90       	pop	r13
    15ec:	cf 90       	pop	r12
    15ee:	af 90       	pop	r10
    15f0:	08 95       	ret

000015f2 <timer1Set>:

void timer1Set(uint16_t u16_value)
{
    15f2:	df 93       	push	r29
    15f4:	cf 93       	push	r28
    15f6:	00 d0       	rcall	.+0      	; 0x15f8 <timer1Set+0x6>
    15f8:	cd b7       	in	r28, 0x3d	; 61
    15fa:	de b7       	in	r29, 0x3e	; 62
    15fc:	9a 83       	std	Y+2, r25	; 0x02
    15fe:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter1 custom value */
	TCNT1 = u16_value;
    1600:	ec e4       	ldi	r30, 0x4C	; 76
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	89 81       	ldd	r24, Y+1	; 0x01
    1606:	9a 81       	ldd	r25, Y+2	; 0x02
    1608:	91 83       	std	Z+1, r25	; 0x01
    160a:	80 83       	st	Z, r24
}
    160c:	0f 90       	pop	r0
    160e:	0f 90       	pop	r0
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <timer1Read>:

uint16_t timer1Read(void)
{
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT1;
    161e:	ec e4       	ldi	r30, 0x4C	; 76
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	91 81       	ldd	r25, Z+1	; 0x01
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <timer1Start>:

void timer1Start(void)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	cd b7       	in	r28, 0x3d	; 61
    1632:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR1B = (TCCR1B & 0xF8) | (gu8_timer0Timer1PreScaler);
    1634:	ae e4       	ldi	r26, 0x4E	; 78
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	ee e4       	ldi	r30, 0x4E	; 78
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	98 2f       	mov	r25, r24
    1640:	98 7f       	andi	r25, 0xF8	; 248
    1642:	80 91 6b 00 	lds	r24, 0x006B
    1646:	89 2b       	or	r24, r25
    1648:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT1 = 0;
    164a:	ec e4       	ldi	r30, 0x4C	; 76
    164c:	f0 e0       	ldi	r31, 0x00	; 0
    164e:	11 82       	std	Z+1, r1	; 0x01
    1650:	10 82       	st	Z, r1
}
    1652:	cf 91       	pop	r28
    1654:	df 91       	pop	r29
    1656:	08 95       	ret

00001658 <timer1Stop>:

void timer1Stop(void)
{
    1658:	df 93       	push	r29
    165a:	cf 93       	push	r28
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR1B &= ~((1 << CS10) | (1 << CS11) | (1 << CS12));
    1660:	ae e4       	ldi	r26, 0x4E	; 78
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	ee e4       	ldi	r30, 0x4E	; 78
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
    166a:	88 7f       	andi	r24, 0xF8	; 248
    166c:	8c 93       	st	X, r24
}
    166e:	cf 91       	pop	r28
    1670:	df 91       	pop	r29
    1672:	08 95       	ret

00001674 <timer1DelayMs>:

void timer1DelayMs(uint16_t u16_delay_in_ms)
{
    1674:	af 92       	push	r10
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	df 93       	push	r29
    1684:	cf 93       	push	r28
    1686:	00 d0       	rcall	.+0      	; 0x1688 <timer1DelayMs+0x14>
    1688:	00 d0       	rcall	.+0      	; 0x168a <timer1DelayMs+0x16>
    168a:	00 d0       	rcall	.+0      	; 0x168c <timer1DelayMs+0x18>
    168c:	cd b7       	in	r28, 0x3d	; 61
    168e:	de b7       	in	r29, 0x3e	; 62
    1690:	9e 83       	std	Y+6, r25	; 0x06
    1692:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t u16_msCounter = 0;
    1694:	1c 82       	std	Y+4, r1	; 0x04
    1696:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1698:	8a ef       	ldi	r24, 0xFA	; 250
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9a 83       	std	Y+2, r25	; 0x02
    169e:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	70 e0       	ldi	r23, 0x00	; 0
    16a6:	43 e0       	ldi	r20, 0x03	; 3
    16a8:	20 e0       	ldi	r18, 0x00	; 0
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	00 e0       	ldi	r16, 0x00	; 0
    16ae:	10 e0       	ldi	r17, 0x00	; 0
    16b0:	ee 24       	eor	r14, r14
    16b2:	ff 24       	eor	r15, r15
    16b4:	cc 24       	eor	r12, r12
    16b6:	dd 24       	eor	r13, r13
    16b8:	aa 24       	eor	r10, r10
    16ba:	0e 94 8f 0a 	call	0x151e	; 0x151e <timer1Init>
	timer1Start();
    16be:	0e 94 16 0b 	call	0x162c	; 0x162c <timer1Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    16c2:	1c 82       	std	Y+4, r1	; 0x04
    16c4:	1b 82       	std	Y+3, r1	; 0x03
    16c6:	12 c0       	rjmp	.+36     	; 0x16ec <timer1DelayMs+0x78>
	{
		while(TCNT1 < u16_outputCompare);
    16c8:	ec e4       	ldi	r30, 0x4C	; 76
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	20 81       	ld	r18, Z
    16ce:	31 81       	ldd	r19, Z+1	; 0x01
    16d0:	89 81       	ldd	r24, Y+1	; 0x01
    16d2:	9a 81       	ldd	r25, Y+2	; 0x02
    16d4:	28 17       	cp	r18, r24
    16d6:	39 07       	cpc	r19, r25
    16d8:	b8 f3       	brcs	.-18     	; 0x16c8 <timer1DelayMs+0x54>
		TCNT1 = 0;
    16da:	ec e4       	ldi	r30, 0x4C	; 76
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	11 82       	std	Z+1, r1	; 0x01
    16e0:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer1Init(T1_NORMAL_MODE, T1_OC1_DIS, T1_PRESCALER_64, 0, 0, 0, 0, T1_POLLING);
	timer1Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    16e2:	8b 81       	ldd	r24, Y+3	; 0x03
    16e4:	9c 81       	ldd	r25, Y+4	; 0x04
    16e6:	01 96       	adiw	r24, 0x01	; 1
    16e8:	9c 83       	std	Y+4, r25	; 0x04
    16ea:	8b 83       	std	Y+3, r24	; 0x03
    16ec:	2b 81       	ldd	r18, Y+3	; 0x03
    16ee:	3c 81       	ldd	r19, Y+4	; 0x04
    16f0:	8d 81       	ldd	r24, Y+5	; 0x05
    16f2:	9e 81       	ldd	r25, Y+6	; 0x06
    16f4:	28 17       	cp	r18, r24
    16f6:	39 07       	cpc	r19, r25
    16f8:	38 f3       	brcs	.-50     	; 0x16c8 <timer1DelayMs+0x54>
	{
		while(TCNT1 < u16_outputCompare);
		TCNT1 = 0;
	}
}
    16fa:	26 96       	adiw	r28, 0x06	; 6
    16fc:	0f b6       	in	r0, 0x3f	; 63
    16fe:	f8 94       	cli
    1700:	de bf       	out	0x3e, r29	; 62
    1702:	0f be       	out	0x3f, r0	; 63
    1704:	cd bf       	out	0x3d, r28	; 61
    1706:	cf 91       	pop	r28
    1708:	df 91       	pop	r29
    170a:	1f 91       	pop	r17
    170c:	0f 91       	pop	r16
    170e:	ff 90       	pop	r15
    1710:	ef 90       	pop	r14
    1712:	df 90       	pop	r13
    1714:	cf 90       	pop	r12
    1716:	af 90       	pop	r10
    1718:	08 95       	ret

0000171a <timer1DelayUs>:

void timer1DelayUs(uint32_t u32_delay_in_us)
{
    171a:	af 92       	push	r10
    171c:	cf 92       	push	r12
    171e:	df 92       	push	r13
    1720:	ef 92       	push	r14
    1722:	ff 92       	push	r15
    1724:	0f 93       	push	r16
    1726:	1f 93       	push	r17
    1728:	df 93       	push	r29
    172a:	cf 93       	push	r28
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	2a 97       	sbiw	r28, 0x0a	; 10
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	f8 94       	cli
    1736:	de bf       	out	0x3e, r29	; 62
    1738:	0f be       	out	0x3f, r0	; 63
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	6f 83       	std	Y+7, r22	; 0x07
    173e:	78 87       	std	Y+8, r23	; 0x08
    1740:	89 87       	std	Y+9, r24	; 0x09
    1742:	9a 87       	std	Y+10, r25	; 0x0a
	uint32_t u32_usCounter = 0;
    1744:	1b 82       	std	Y+3, r1	; 0x03
    1746:	1c 82       	std	Y+4, r1	; 0x04
    1748:	1d 82       	std	Y+5, r1	; 0x05
    174a:	1e 82       	std	Y+6, r1	; 0x06
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    174c:	80 e1       	ldi	r24, 0x10	; 16
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	9a 83       	std	Y+2, r25	; 0x02
    1752:	89 83       	std	Y+1, r24	; 0x01

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
    1754:	e9 81       	ldd	r30, Y+1	; 0x01
    1756:	fa 81       	ldd	r31, Y+2	; 0x02
    1758:	88 e0       	ldi	r24, 0x08	; 8
    175a:	60 e0       	ldi	r22, 0x00	; 0
    175c:	70 e0       	ldi	r23, 0x00	; 0
    175e:	41 e0       	ldi	r20, 0x01	; 1
    1760:	20 e0       	ldi	r18, 0x00	; 0
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	8f 01       	movw	r16, r30
    1766:	ee 24       	eor	r14, r14
    1768:	ff 24       	eor	r15, r15
    176a:	cc 24       	eor	r12, r12
    176c:	dd 24       	eor	r13, r13
    176e:	aa 24       	eor	r10, r10
    1770:	0e 94 8f 0a 	call	0x151e	; 0x151e <timer1Init>
	timer1Start();
    1774:	0e 94 16 0b 	call	0x162c	; 0x162c <timer1Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1778:	1b 82       	std	Y+3, r1	; 0x03
    177a:	1c 82       	std	Y+4, r1	; 0x04
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	1e 82       	std	Y+6, r1	; 0x06
    1780:	1f c0       	rjmp	.+62     	; 0x17c0 <timer1DelayUs+0xa6>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
    1782:	e8 e5       	ldi	r30, 0x58	; 88
    1784:	f0 e0       	ldi	r31, 0x00	; 0
    1786:	80 81       	ld	r24, Z
    1788:	88 2f       	mov	r24, r24
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	80 71       	andi	r24, 0x10	; 16
    178e:	90 70       	andi	r25, 0x00	; 0
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	b9 f3       	breq	.-18     	; 0x1782 <timer1DelayUs+0x68>
		SET_BIT(TIFR, OCF1A);
    1794:	a8 e5       	ldi	r26, 0x58	; 88
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e8 e5       	ldi	r30, 0x58	; 88
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	80 61       	ori	r24, 0x10	; 16
    17a0:	8c 93       	st	X, r24
		TCNT1 = 0;
    17a2:	ec e4       	ldi	r30, 0x4C	; 76
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	11 82       	std	Z+1, r1	; 0x01
    17a8:	10 82       	st	Z, r1
	uint16_t u16_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer1Init(T1_COMP_MODE_OCR1A_TOP, T1_OC1_DIS, T1_PRESCALER_NO, 0, u16_outputCompare, 0, 0, T1_POLLING);
	timer1Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	9c 81       	ldd	r25, Y+4	; 0x04
    17ae:	ad 81       	ldd	r26, Y+5	; 0x05
    17b0:	be 81       	ldd	r27, Y+6	; 0x06
    17b2:	01 96       	adiw	r24, 0x01	; 1
    17b4:	a1 1d       	adc	r26, r1
    17b6:	b1 1d       	adc	r27, r1
    17b8:	8b 83       	std	Y+3, r24	; 0x03
    17ba:	9c 83       	std	Y+4, r25	; 0x04
    17bc:	ad 83       	std	Y+5, r26	; 0x05
    17be:	be 83       	std	Y+6, r27	; 0x06
    17c0:	2b 81       	ldd	r18, Y+3	; 0x03
    17c2:	3c 81       	ldd	r19, Y+4	; 0x04
    17c4:	4d 81       	ldd	r20, Y+5	; 0x05
    17c6:	5e 81       	ldd	r21, Y+6	; 0x06
    17c8:	8f 81       	ldd	r24, Y+7	; 0x07
    17ca:	98 85       	ldd	r25, Y+8	; 0x08
    17cc:	a9 85       	ldd	r26, Y+9	; 0x09
    17ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    17d0:	28 17       	cp	r18, r24
    17d2:	39 07       	cpc	r19, r25
    17d4:	4a 07       	cpc	r20, r26
    17d6:	5b 07       	cpc	r21, r27
    17d8:	a0 f2       	brcs	.-88     	; 0x1782 <timer1DelayUs+0x68>
	{
		while(BIT_IS_CLEAR(TIFR, OCF1A));
		SET_BIT(TIFR, OCF1A);
		TCNT1 = 0;
	}
}
    17da:	2a 96       	adiw	r28, 0x0a	; 10
    17dc:	0f b6       	in	r0, 0x3f	; 63
    17de:	f8 94       	cli
    17e0:	de bf       	out	0x3e, r29	; 62
    17e2:	0f be       	out	0x3f, r0	; 63
    17e4:	cd bf       	out	0x3d, r28	; 61
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	1f 91       	pop	r17
    17ec:	0f 91       	pop	r16
    17ee:	ff 90       	pop	r15
    17f0:	ef 90       	pop	r14
    17f2:	df 90       	pop	r13
    17f4:	cf 90       	pop	r12
    17f6:	af 90       	pop	r10
    17f8:	08 95       	ret

000017fa <timer1SwPWM>:

void timer1SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <timer1SwPWM+0x6>
    1800:	cd b7       	in	r28, 0x3d	; 61
    1802:	de b7       	in	r29, 0x3e	; 62
    1804:	89 83       	std	Y+1, r24	; 0x01
    1806:	6a 83       	std	Y+2, r22	; 0x02

}
    1808:	0f 90       	pop	r0
    180a:	0f 90       	pop	r0
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <timer2Init>:
/*
 ********************************************************************************************************************************************************
 */

void timer2Init(En_timer2Mode_t en_mode,En_timer2OC_t en_OC2,En_timer2perscaler_t en_prescal, uint8_t u8_initialValue, uint8_t u8_outputCompare, uint8_t u8_assynchronous, En_timer2Interrupt_t en_interruptMask)
{
    1812:	cf 92       	push	r12
    1814:	ef 92       	push	r14
    1816:	0f 93       	push	r16
    1818:	df 93       	push	r29
    181a:	cf 93       	push	r28
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
    1820:	27 97       	sbiw	r28, 0x07	; 7
    1822:	0f b6       	in	r0, 0x3f	; 63
    1824:	f8 94       	cli
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	89 83       	std	Y+1, r24	; 0x01
    182e:	6a 83       	std	Y+2, r22	; 0x02
    1830:	4b 83       	std	Y+3, r20	; 0x03
    1832:	2c 83       	std	Y+4, r18	; 0x04
    1834:	0d 83       	std	Y+5, r16	; 0x05
    1836:	ee 82       	std	Y+6, r14	; 0x06
    1838:	cf 82       	std	Y+7, r12	; 0x07
	/* Non-PWM mode */
	SET_BIT(TCCR2, FOC2);
    183a:	a5 e4       	ldi	r26, 0x45	; 69
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e5 e4       	ldi	r30, 0x45	; 69
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 68       	ori	r24, 0x80	; 128
    1846:	8c 93       	st	X, r24

	/* Set the required operating mode */
	TCCR2 = (TCCR2 & 0xB7) | (en_mode);
    1848:	a5 e4       	ldi	r26, 0x45	; 69
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e5 e4       	ldi	r30, 0x45	; 69
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	98 2f       	mov	r25, r24
    1854:	97 7b       	andi	r25, 0xB7	; 183
    1856:	89 81       	ldd	r24, Y+1	; 0x01
    1858:	89 2b       	or	r24, r25
    185a:	8c 93       	st	X, r24

	/* Set the compare match output mode */
	TCCR2 = (TCCR2 & 0xCF) | (en_OC2);
    185c:	a5 e4       	ldi	r26, 0x45	; 69
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	e5 e4       	ldi	r30, 0x45	; 69
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	98 2f       	mov	r25, r24
    1868:	9f 7c       	andi	r25, 0xCF	; 207
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	89 2b       	or	r24, r25
    186e:	8c 93       	st	X, r24

	/* Set the pre-scaler */
	gu8_timer2PreScaler = en_prescal;
    1870:	8b 81       	ldd	r24, Y+3	; 0x03
    1872:	80 93 6c 00 	sts	0x006C, r24

	/* Set the timer/counter0 initial value */
	TCNT2 = u8_initialValue;
    1876:	e4 e4       	ldi	r30, 0x44	; 68
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8c 81       	ldd	r24, Y+4	; 0x04
    187c:	80 83       	st	Z, r24

	/* Set the timer/counter0 CTC mode compare value */
	OCR2 = u8_outputCompare;
    187e:	e3 e4       	ldi	r30, 0x43	; 67
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8d 81       	ldd	r24, Y+5	; 0x05
    1884:	80 83       	st	Z, r24

	/* Enable the interrupt corresponding to the mode */
	TIMSK = (TIMSK & 0x3F) | (en_interruptMask);
    1886:	a9 e5       	ldi	r26, 0x59	; 89
    1888:	b0 e0       	ldi	r27, 0x00	; 0
    188a:	e9 e5       	ldi	r30, 0x59	; 89
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	98 2f       	mov	r25, r24
    1892:	9f 73       	andi	r25, 0x3F	; 63
    1894:	8f 81       	ldd	r24, Y+7	; 0x07
    1896:	89 2b       	or	r24, r25
    1898:	8c 93       	st	X, r24
}
    189a:	27 96       	adiw	r28, 0x07	; 7
    189c:	0f b6       	in	r0, 0x3f	; 63
    189e:	f8 94       	cli
    18a0:	de bf       	out	0x3e, r29	; 62
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	cd bf       	out	0x3d, r28	; 61
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	0f 91       	pop	r16
    18ac:	ef 90       	pop	r14
    18ae:	cf 90       	pop	r12
    18b0:	08 95       	ret

000018b2 <timer2Set>:

void timer2Set(uint8_t u8_value)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	0f 92       	push	r0
    18b8:	cd b7       	in	r28, 0x3d	; 61
    18ba:	de b7       	in	r29, 0x3e	; 62
    18bc:	89 83       	std	Y+1, r24	; 0x01
	/* Set the timer/counter2 custom value */
	TCNT2 = u8_value;
    18be:	e4 e4       	ldi	r30, 0x44	; 68
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	80 83       	st	Z, r24
}
    18c6:	0f 90       	pop	r0
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	08 95       	ret

000018ce <timer2Read>:

uint8_t timer2Read(void)
{
    18ce:	df 93       	push	r29
    18d0:	cf 93       	push	r28
    18d2:	cd b7       	in	r28, 0x3d	; 61
    18d4:	de b7       	in	r29, 0x3e	; 62
	/* Read the counter register */
	return TCNT2;
    18d6:	e4 e4       	ldi	r30, 0x44	; 68
    18d8:	f0 e0       	ldi	r31, 0x00	; 0
    18da:	80 81       	ld	r24, Z
}
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <timer2Start>:

void timer2Start(void)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
	/* Provide suitable clock to the timer according to the chosen prescaler value */
	TCCR2 = (TCCR2 & 0xF8) | (gu8_timer2PreScaler);
    18ea:	a5 e4       	ldi	r26, 0x45	; 69
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e5 e4       	ldi	r30, 0x45	; 69
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	98 2f       	mov	r25, r24
    18f6:	98 7f       	andi	r25, 0xF8	; 248
    18f8:	80 91 6c 00 	lds	r24, 0x006C
    18fc:	89 2b       	or	r24, r25
    18fe:	8c 93       	st	X, r24
	/* Set the timer/counter0 initial value to zero */
	TCNT2 = 0;
    1900:	e4 e4       	ldi	r30, 0x44	; 68
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	10 82       	st	Z, r1
}
    1906:	cf 91       	pop	r28
    1908:	df 91       	pop	r29
    190a:	08 95       	ret

0000190c <timer2Stop>:

void timer2Stop(void)
{
    190c:	df 93       	push	r29
    190e:	cf 93       	push	r28
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	/* disable the timer clock */
	TCCR2 &= ~((1 << CS20) | (1 << CS21) | (1 << CS22));
    1914:	a5 e4       	ldi	r26, 0x45	; 69
    1916:	b0 e0       	ldi	r27, 0x00	; 0
    1918:	e5 e4       	ldi	r30, 0x45	; 69
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	80 81       	ld	r24, Z
    191e:	88 7f       	andi	r24, 0xF8	; 248
    1920:	8c 93       	st	X, r24
}
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	08 95       	ret

00001928 <timer2DelayMs>:

void timer2DelayMs(uint16_t u16_delay_in_ms)
{
    1928:	cf 92       	push	r12
    192a:	ef 92       	push	r14
    192c:	0f 93       	push	r16
    192e:	df 93       	push	r29
    1930:	cf 93       	push	r28
    1932:	00 d0       	rcall	.+0      	; 0x1934 <timer2DelayMs+0xc>
    1934:	00 d0       	rcall	.+0      	; 0x1936 <timer2DelayMs+0xe>
    1936:	0f 92       	push	r0
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	9d 83       	std	Y+5, r25	; 0x05
    193e:	8c 83       	std	Y+4, r24	; 0x04
	uint16_t u16_msCounter = 0;
    1940:	1b 82       	std	Y+3, r1	; 0x03
    1942:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;
    1944:	8a ef       	ldi	r24, 0xFA	; 250
    1946:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
    1948:	80 e0       	ldi	r24, 0x00	; 0
    194a:	60 e0       	ldi	r22, 0x00	; 0
    194c:	44 e0       	ldi	r20, 0x04	; 4
    194e:	20 e0       	ldi	r18, 0x00	; 0
    1950:	00 e0       	ldi	r16, 0x00	; 0
    1952:	ee 24       	eor	r14, r14
    1954:	cc 24       	eor	r12, r12
    1956:	0e 94 09 0c 	call	0x1812	; 0x1812 <timer2Init>
	timer2Start();
    195a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <timer2Start>

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    195e:	1b 82       	std	Y+3, r1	; 0x03
    1960:	1a 82       	std	Y+2, r1	; 0x02
    1962:	0e c0       	rjmp	.+28     	; 0x1980 <timer2DelayMs+0x58>
	{
		while(TCNT2 < u8_outputCompare);
    1964:	e4 e4       	ldi	r30, 0x44	; 68
    1966:	f0 e0       	ldi	r31, 0x00	; 0
    1968:	90 81       	ld	r25, Z
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	98 17       	cp	r25, r24
    196e:	d0 f3       	brcs	.-12     	; 0x1964 <timer2DelayMs+0x3c>
		TCNT2 = 0;
    1970:	e4 e4       	ldi	r30, 0x44	; 68
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_MS_DIVISION_FACTOR;

	timer2Init(T2_NORMAL_MODE, T2_OC2_DIS, T2_PRESCALER_64, 0, 0, 0, T2_POLLING);
	timer2Start();

	for(u16_msCounter=0 ; u16_msCounter < u16_delay_in_ms ; u16_msCounter++)
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	9b 81       	ldd	r25, Y+3	; 0x03
    197a:	01 96       	adiw	r24, 0x01	; 1
    197c:	9b 83       	std	Y+3, r25	; 0x03
    197e:	8a 83       	std	Y+2, r24	; 0x02
    1980:	2a 81       	ldd	r18, Y+2	; 0x02
    1982:	3b 81       	ldd	r19, Y+3	; 0x03
    1984:	8c 81       	ldd	r24, Y+4	; 0x04
    1986:	9d 81       	ldd	r25, Y+5	; 0x05
    1988:	28 17       	cp	r18, r24
    198a:	39 07       	cpc	r19, r25
    198c:	58 f3       	brcs	.-42     	; 0x1964 <timer2DelayMs+0x3c>
	{
		while(TCNT2 < u8_outputCompare);
		TCNT2 = 0;
	}
}
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	0f 90       	pop	r0
    1994:	0f 90       	pop	r0
    1996:	0f 90       	pop	r0
    1998:	cf 91       	pop	r28
    199a:	df 91       	pop	r29
    199c:	0f 91       	pop	r16
    199e:	ef 90       	pop	r14
    19a0:	cf 90       	pop	r12
    19a2:	08 95       	ret

000019a4 <timer2DelayUs>:

void timer2DelayUs(uint32_t u32_delay_in_us)
{
    19a4:	cf 92       	push	r12
    19a6:	ef 92       	push	r14
    19a8:	0f 93       	push	r16
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
    19b2:	29 97       	sbiw	r28, 0x09	; 9
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	6e 83       	std	Y+6, r22	; 0x06
    19c0:	7f 83       	std	Y+7, r23	; 0x07
    19c2:	88 87       	std	Y+8, r24	; 0x08
    19c4:	99 87       	std	Y+9, r25	; 0x09
	uint32_t u32_usCounter = 0;
    19c6:	1a 82       	std	Y+2, r1	; 0x02
    19c8:	1b 82       	std	Y+3, r1	; 0x03
    19ca:	1c 82       	std	Y+4, r1	; 0x04
    19cc:	1d 82       	std	Y+5, r1	; 0x05
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;
    19ce:	80 e1       	ldi	r24, 0x10	; 16
    19d0:	89 83       	std	Y+1, r24	; 0x01

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
    19d2:	88 e0       	ldi	r24, 0x08	; 8
    19d4:	60 e0       	ldi	r22, 0x00	; 0
    19d6:	41 e0       	ldi	r20, 0x01	; 1
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	09 81       	ldd	r16, Y+1	; 0x01
    19dc:	ee 24       	eor	r14, r14
    19de:	cc 24       	eor	r12, r12
    19e0:	0e 94 09 0c 	call	0x1812	; 0x1812 <timer2Init>
	timer2Start();
    19e4:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <timer2Start>

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    19e8:	1a 82       	std	Y+2, r1	; 0x02
    19ea:	1b 82       	std	Y+3, r1	; 0x03
    19ec:	1c 82       	std	Y+4, r1	; 0x04
    19ee:	1d 82       	std	Y+5, r1	; 0x05
    19f0:	1a c0       	rjmp	.+52     	; 0x1a26 <timer2DelayUs+0x82>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
    19f2:	e8 e5       	ldi	r30, 0x58	; 88
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	88 23       	and	r24, r24
    19fa:	dc f7       	brge	.-10     	; 0x19f2 <timer2DelayUs+0x4e>
		SET_BIT(TIFR, OCF2);
    19fc:	a8 e5       	ldi	r26, 0x58	; 88
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e8 e5       	ldi	r30, 0x58	; 88
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	80 68       	ori	r24, 0x80	; 128
    1a08:	8c 93       	st	X, r24
		TCNT2 = 0;
    1a0a:	e4 e4       	ldi	r30, 0x44	; 68
    1a0c:	f0 e0       	ldi	r31, 0x00	; 0
    1a0e:	10 82       	st	Z, r1
	uint8_t u8_outputCompare = F_CPU / TIMER_US_DIVISION_FACTOR;

	timer2Init(T2_COMP_MODE, T2_OC2_DIS, T2_PRESCALER_NO, 0, u8_outputCompare, 0, T2_POLLING);
	timer2Start();

	for(u32_usCounter=0 ; u32_usCounter < u32_delay_in_us ; u32_usCounter++)
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	9b 81       	ldd	r25, Y+3	; 0x03
    1a14:	ac 81       	ldd	r26, Y+4	; 0x04
    1a16:	bd 81       	ldd	r27, Y+5	; 0x05
    1a18:	01 96       	adiw	r24, 0x01	; 1
    1a1a:	a1 1d       	adc	r26, r1
    1a1c:	b1 1d       	adc	r27, r1
    1a1e:	8a 83       	std	Y+2, r24	; 0x02
    1a20:	9b 83       	std	Y+3, r25	; 0x03
    1a22:	ac 83       	std	Y+4, r26	; 0x04
    1a24:	bd 83       	std	Y+5, r27	; 0x05
    1a26:	2a 81       	ldd	r18, Y+2	; 0x02
    1a28:	3b 81       	ldd	r19, Y+3	; 0x03
    1a2a:	4c 81       	ldd	r20, Y+4	; 0x04
    1a2c:	5d 81       	ldd	r21, Y+5	; 0x05
    1a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a30:	9f 81       	ldd	r25, Y+7	; 0x07
    1a32:	a8 85       	ldd	r26, Y+8	; 0x08
    1a34:	b9 85       	ldd	r27, Y+9	; 0x09
    1a36:	28 17       	cp	r18, r24
    1a38:	39 07       	cpc	r19, r25
    1a3a:	4a 07       	cpc	r20, r26
    1a3c:	5b 07       	cpc	r21, r27
    1a3e:	c8 f2       	brcs	.-78     	; 0x19f2 <timer2DelayUs+0x4e>
	{
		while(BIT_IS_CLEAR(TIFR, OCF2));
		SET_BIT(TIFR, OCF2);
		TCNT2 = 0;
	}
}
    1a40:	29 96       	adiw	r28, 0x09	; 9
    1a42:	0f b6       	in	r0, 0x3f	; 63
    1a44:	f8 94       	cli
    1a46:	de bf       	out	0x3e, r29	; 62
    1a48:	0f be       	out	0x3f, r0	; 63
    1a4a:	cd bf       	out	0x3d, r28	; 61
    1a4c:	cf 91       	pop	r28
    1a4e:	df 91       	pop	r29
    1a50:	0f 91       	pop	r16
    1a52:	ef 90       	pop	r14
    1a54:	cf 90       	pop	r12
    1a56:	08 95       	ret

00001a58 <timer2SwPWM>:

void timer2SwPWM(uint8_t u8_dutyCycle,uint8_t u8_frequency)
{
    1a58:	df 93       	push	r29
    1a5a:	cf 93       	push	r28
    1a5c:	00 d0       	rcall	.+0      	; 0x1a5e <timer2SwPWM+0x6>
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	89 83       	std	Y+1, r24	; 0x01
    1a64:	6a 83       	std	Y+2, r22	; 0x02

}
    1a66:	0f 90       	pop	r0
    1a68:	0f 90       	pop	r0
    1a6a:	cf 91       	pop	r28
    1a6c:	df 91       	pop	r29
    1a6e:	08 95       	ret

00001a70 <__mulsi3>:
    1a70:	62 9f       	mul	r22, r18
    1a72:	d0 01       	movw	r26, r0
    1a74:	73 9f       	mul	r23, r19
    1a76:	f0 01       	movw	r30, r0
    1a78:	82 9f       	mul	r24, r18
    1a7a:	e0 0d       	add	r30, r0
    1a7c:	f1 1d       	adc	r31, r1
    1a7e:	64 9f       	mul	r22, r20
    1a80:	e0 0d       	add	r30, r0
    1a82:	f1 1d       	adc	r31, r1
    1a84:	92 9f       	mul	r25, r18
    1a86:	f0 0d       	add	r31, r0
    1a88:	83 9f       	mul	r24, r19
    1a8a:	f0 0d       	add	r31, r0
    1a8c:	74 9f       	mul	r23, r20
    1a8e:	f0 0d       	add	r31, r0
    1a90:	65 9f       	mul	r22, r21
    1a92:	f0 0d       	add	r31, r0
    1a94:	99 27       	eor	r25, r25
    1a96:	72 9f       	mul	r23, r18
    1a98:	b0 0d       	add	r27, r0
    1a9a:	e1 1d       	adc	r30, r1
    1a9c:	f9 1f       	adc	r31, r25
    1a9e:	63 9f       	mul	r22, r19
    1aa0:	b0 0d       	add	r27, r0
    1aa2:	e1 1d       	adc	r30, r1
    1aa4:	f9 1f       	adc	r31, r25
    1aa6:	bd 01       	movw	r22, r26
    1aa8:	cf 01       	movw	r24, r30
    1aaa:	11 24       	eor	r1, r1
    1aac:	08 95       	ret

00001aae <__udivmodqi4>:
    1aae:	99 1b       	sub	r25, r25
    1ab0:	79 e0       	ldi	r23, 0x09	; 9
    1ab2:	04 c0       	rjmp	.+8      	; 0x1abc <__udivmodqi4_ep>

00001ab4 <__udivmodqi4_loop>:
    1ab4:	99 1f       	adc	r25, r25
    1ab6:	96 17       	cp	r25, r22
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <__udivmodqi4_ep>
    1aba:	96 1b       	sub	r25, r22

00001abc <__udivmodqi4_ep>:
    1abc:	88 1f       	adc	r24, r24
    1abe:	7a 95       	dec	r23
    1ac0:	c9 f7       	brne	.-14     	; 0x1ab4 <__udivmodqi4_loop>
    1ac2:	80 95       	com	r24
    1ac4:	08 95       	ret

00001ac6 <__udivmodhi4>:
    1ac6:	aa 1b       	sub	r26, r26
    1ac8:	bb 1b       	sub	r27, r27
    1aca:	51 e1       	ldi	r21, 0x11	; 17
    1acc:	07 c0       	rjmp	.+14     	; 0x1adc <__udivmodhi4_ep>

00001ace <__udivmodhi4_loop>:
    1ace:	aa 1f       	adc	r26, r26
    1ad0:	bb 1f       	adc	r27, r27
    1ad2:	a6 17       	cp	r26, r22
    1ad4:	b7 07       	cpc	r27, r23
    1ad6:	10 f0       	brcs	.+4      	; 0x1adc <__udivmodhi4_ep>
    1ad8:	a6 1b       	sub	r26, r22
    1ada:	b7 0b       	sbc	r27, r23

00001adc <__udivmodhi4_ep>:
    1adc:	88 1f       	adc	r24, r24
    1ade:	99 1f       	adc	r25, r25
    1ae0:	5a 95       	dec	r21
    1ae2:	a9 f7       	brne	.-22     	; 0x1ace <__udivmodhi4_loop>
    1ae4:	80 95       	com	r24
    1ae6:	90 95       	com	r25
    1ae8:	bc 01       	movw	r22, r24
    1aea:	cd 01       	movw	r24, r26
    1aec:	08 95       	ret

00001aee <__udivmodsi4>:
    1aee:	a1 e2       	ldi	r26, 0x21	; 33
    1af0:	1a 2e       	mov	r1, r26
    1af2:	aa 1b       	sub	r26, r26
    1af4:	bb 1b       	sub	r27, r27
    1af6:	fd 01       	movw	r30, r26
    1af8:	0d c0       	rjmp	.+26     	; 0x1b14 <__udivmodsi4_ep>

00001afa <__udivmodsi4_loop>:
    1afa:	aa 1f       	adc	r26, r26
    1afc:	bb 1f       	adc	r27, r27
    1afe:	ee 1f       	adc	r30, r30
    1b00:	ff 1f       	adc	r31, r31
    1b02:	a2 17       	cp	r26, r18
    1b04:	b3 07       	cpc	r27, r19
    1b06:	e4 07       	cpc	r30, r20
    1b08:	f5 07       	cpc	r31, r21
    1b0a:	20 f0       	brcs	.+8      	; 0x1b14 <__udivmodsi4_ep>
    1b0c:	a2 1b       	sub	r26, r18
    1b0e:	b3 0b       	sbc	r27, r19
    1b10:	e4 0b       	sbc	r30, r20
    1b12:	f5 0b       	sbc	r31, r21

00001b14 <__udivmodsi4_ep>:
    1b14:	66 1f       	adc	r22, r22
    1b16:	77 1f       	adc	r23, r23
    1b18:	88 1f       	adc	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	1a 94       	dec	r1
    1b1e:	69 f7       	brne	.-38     	; 0x1afa <__udivmodsi4_loop>
    1b20:	60 95       	com	r22
    1b22:	70 95       	com	r23
    1b24:	80 95       	com	r24
    1b26:	90 95       	com	r25
    1b28:	9b 01       	movw	r18, r22
    1b2a:	ac 01       	movw	r20, r24
    1b2c:	bd 01       	movw	r22, r26
    1b2e:	cf 01       	movw	r24, r30
    1b30:	08 95       	ret

00001b32 <_exit>:
    1b32:	f8 94       	cli

00001b34 <__stop_program>:
    1b34:	ff cf       	rjmp	.-2      	; 0x1b34 <__stop_program>
